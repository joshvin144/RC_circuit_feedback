
RC_circuit_feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005410  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  0800575c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  0800575c  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001394b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f5  00000000  00000000  000339eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceee  00000000  00000000  00037eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ffe  00000000  00000000  00054da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000baac6  00000000  00000000  00065da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012086a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  001208c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005588 	.word	0x08005588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005588 	.word	0x08005588

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_d2uiz>:
 80006f8:	004a      	lsls	r2, r1, #1
 80006fa:	d211      	bcs.n	8000720 <__aeabi_d2uiz+0x28>
 80006fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000700:	d211      	bcs.n	8000726 <__aeabi_d2uiz+0x2e>
 8000702:	d50d      	bpl.n	8000720 <__aeabi_d2uiz+0x28>
 8000704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800070c:	d40e      	bmi.n	800072c <__aeabi_d2uiz+0x34>
 800070e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071a:	fa23 f002 	lsr.w	r0, r3, r2
 800071e:	4770      	bx	lr
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	4770      	bx	lr
 8000726:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800072a:	d102      	bne.n	8000732 <__aeabi_d2uiz+0x3a>
 800072c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fc08 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f827 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f9ad 	bl	8000aa4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800074a:	f000 f87d 	bl	8000848 <MX_ADC1_Init>
  MX_TIM1_Init();
 800074e:	f000 f8f1 	bl	8000934 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status = HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000752:	2100      	movs	r1, #0
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <main+0x48>)
 8000756:	f002 ff6f 	bl	8003638 <HAL_TIM_PWM_Start>
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  assert( HAL_OK == status );
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d005      	beq.n	8000770 <main+0x38>
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <main+0x4c>)
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <main+0x50>)
 8000768:	2165      	movs	r1, #101	; 0x65
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <main+0x54>)
 800076c:	f003 fea0 	bl	80044b0 <__assert_func>
  TIM1->CCR1 = pwm_calculate_CCRx( PWM_DUTY_CYCLE );
 8000770:	4c07      	ldr	r4, [pc, #28]	; (8000790 <main+0x58>)
 8000772:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000776:	f000 f9df 	bl	8000b38 <pwm_calculate_CCRx>
 800077a:	4603      	mov	r3, r0
 800077c:	6363      	str	r3, [r4, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077e:	e7fe      	b.n	800077e <main+0x46>
 8000780:	200000fc 	.word	0x200000fc
 8000784:	080055a0 	.word	0x080055a0
 8000788:	080055c8 	.word	0x080055c8
 800078c:	080055b4 	.word	0x080055b4
 8000790:	40012c00 	.word	0x40012c00

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0a4      	sub	sp, #144	; 0x90
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800079e:	2244      	movs	r2, #68	; 0x44
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fede 	bl	8004564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fed0 	bl	8004564 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c8:	f001 fe54 	bl	8002474 <HAL_PWREx_ControlVoltageScaling>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007d2:	f000 f9d3 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d6:	2310      	movs	r3, #16
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e2:	2360      	movs	r3, #96	; 0x60
 80007e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fe96 	bl	8002520 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f9bf 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000812:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fae3 	bl	8002de4 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f9aa 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000828:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800082c:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fcc3 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800083c:	f000 f99e 	bl	8000b7c <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3790      	adds	r7, #144	; 0x90
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_ADC1_Init+0xe0>)
 800086c:	4a2f      	ldr	r2, [pc, #188]	; (800092c <MX_ADC1_Init+0xe4>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000870:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_ADC1_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_ADC1_Init+0xe0>)
 800088a:	2204      	movs	r2, #4
 800088c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_ADC1_Init+0xe0>)
 800089c:	2201      	movs	r2, #1
 800089e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ca:	4817      	ldr	r0, [pc, #92]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008cc:	f000 fd56 	bl	800137c <HAL_ADC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008d6:	f000 f951 	bl	8000b7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008e6:	f001 fabb 	bl	8001e60 <HAL_ADCEx_MultiModeConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008f0:	f000 f944 	bl	8000b7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_ADC1_Init+0xe8>)
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2306      	movs	r3, #6
 80008fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000900:	237f      	movs	r3, #127	; 0x7f
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000912:	f000 fe83 	bl	800161c <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800091c:	f000 f92e 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000098 	.word	0x20000098
 800092c:	50040000 	.word	0x50040000
 8000930:	14f00020 	.word	0x14f00020

08000934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09a      	sub	sp, #104	; 0x68
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	222c      	movs	r2, #44	; 0x2c
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fdf8 	bl	8004564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  uint32_t prescaler = pwm_calculate_prescaler(PWM_CLOCK_FREQUENCY_HZ, PWM_PULSE_FREQUENCY_HZ);
 8000974:	eddf 0a47 	vldr	s1, [pc, #284]	; 8000a94 <MX_TIM1_Init+0x160>
 8000978:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000a98 <MX_TIM1_Init+0x164>
 800097c:	f000 f8aa 	bl	8000ad4 <pwm_calculate_prescaler>
 8000980:	6678      	str	r0, [r7, #100]	; 0x64
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000982:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000984:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <MX_TIM1_Init+0x16c>)
 8000986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 8000988:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <MX_TIM1_Init+0x168>)
 800098a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800098c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_TIM1_Init+0x168>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a2:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ae:	483b      	ldr	r0, [pc, #236]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009b0:	f002 fd8a 	bl	80034c8 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009ba:	f000 f8df 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c8:	4619      	mov	r1, r3
 80009ca:	4834      	ldr	r0, [pc, #208]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009cc:	f003 f826 	bl	8003a1c <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009d6:	f000 f8d1 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009dc:	f002 fdcb 	bl	8003576 <HAL_TIM_PWM_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80009e6:	f000 f8c9 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009fa:	4619      	mov	r1, r3
 80009fc:	4827      	ldr	r0, [pc, #156]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009fe:	f003 fc79 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000a08:	f000 f8b8 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481a      	ldr	r0, [pc, #104]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a32:	f002 fedf 	bl	80037f4 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a3c:	f000 f89e 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a76:	f003 fca3 	bl	80043c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000a80:	f000 f87c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a86:	f000 f901 	bl	8000c8c <HAL_TIM_MspPostInit>

}
 8000a8a:	bf00      	nop
 8000a8c:	3768      	adds	r7, #104	; 0x68
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	3dcccccd 	.word	0x3dcccccd
 8000a98:	4a742400 	.word	0x4a742400
 8000a9c:	200000fc 	.word	0x200000fc
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_GPIO_Init+0x2c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x2c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0x2c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <pwm_calculate_prescaler>:
* F_PWM = ( F_CLK )/( ( ARR + 1 ) * ( PSC + 1 ) )
* ( ARR + 1 ) * ( PSC + 1 ) = ( F_CLK ) / ( F_PWM )
* PSC = ( ( F_CLK ) / ( ( F_PWM ) * ( ARR + 1 ) ) ) - 1
*/
static uint32_t pwm_calculate_prescaler(float clock_frequency_Hz, float pulse_frequency_Hz)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ade:	edc7 0a00 	vstr	s1, [r7]
	return floor( ( clock_frequency_Hz ) / ( ( pulse_frequency_Hz ) * ( PWM_ARRX + 1 ) ) ) - 1u;
 8000ae2:	edd7 7a00 	vldr	s15, [r7]
 8000ae6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b30 <pwm_calculate_prescaler+0x5c>
 8000aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aee:	ed97 7a01 	vldr	s14, [r7, #4]
 8000af2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000af6:	ee16 0a90 	vmov	r0, s13
 8000afa:	f7ff fd1d 	bl	8000538 <__aeabi_f2d>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	ec43 2b10 	vmov	d0, r2, r3
 8000b06:	f004 fcbf 	bl	8005488 <floor>
 8000b0a:	ec51 0b10 	vmov	r0, r1, d0
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <pwm_calculate_prescaler+0x60>)
 8000b14:	f7ff fbb0 	bl	8000278 <__aeabi_dsub>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f7ff fdea 	bl	80006f8 <__aeabi_d2uiz>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	47800000 	.word	0x47800000
 8000b34:	3ff00000 	.word	0x3ff00000

08000b38 <pwm_calculate_CCRx>:
* Calculate CCRx
* DUTY_CYCLE = ( CCRx ) / ( ARRx )
* CCRx = ( DUTY_CYCLE ) * ( ARRx )
*/
static uint32_t pwm_calculate_CCRx(float duty_cycle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	ed87 0a01 	vstr	s0, [r7, #4]
	return floor( duty_cycle * PWM_ARRX );
 8000b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b46:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b78 <pwm_calculate_CCRx+0x40>
 8000b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4e:	ee17 0a90 	vmov	r0, s15
 8000b52:	f7ff fcf1 	bl	8000538 <__aeabi_f2d>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	ec43 2b10 	vmov	d0, r2, r3
 8000b5e:	f004 fc93 	bl	8005488 <floor>
 8000b62:	ec53 2b10 	vmov	r2, r3, d0
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f7ff fdc5 	bl	80006f8 <__aeabi_d2uiz>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	477fff00 	.word	0x477fff00

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_ADC_MspInit+0x74>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d124      	bne.n	8000c3c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-CK_IN     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c26:	230b      	movs	r3, #11
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f001 fa9c 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	50040000 	.word	0x50040000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_TIM_Base_MspInit+0x38>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10b      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d11d      	bne.n	8000cea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <HAL_TIM_MspPostInit+0x6c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_TIM_MspPostInit+0x6c>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f001 fa45 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f958 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_kill>:

int _kill(int pid, int sig)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6a:	f003 fbbf 	bl	80044ec <__errno>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2216      	movs	r2, #22
 8000d72:	601a      	str	r2, [r3, #0]
	return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_exit>:

void _exit (int status)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffe7 	bl	8000d60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d92:	e7fe      	b.n	8000d92 <_exit+0x12>

08000d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
	}

return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
	}
	return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f003 fb24 	bl	80044ec <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000a000 	.word	0x2000a000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	2000008c 	.word	0x2000008c
 8000ed8:	20000160 	.word	0x20000160

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 faf5 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f32:	f7ff fc01 	bl	8000738 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f38:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f44:	080056ec 	.word	0x080056ec
  ldr r2, =_sbss
 8000f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f4c:	2000015c 	.word	0x2000015c

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>

08000f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f001 f8d5 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f80e 	bl	8000f84 <HAL_InitTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f74:	f7ff fe08 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_InitTick+0x6c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d023      	beq.n	8000fe0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_InitTick+0x70>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_InitTick+0x6c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 f8d3 	bl	800215a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10f      	bne.n	8000fda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d809      	bhi.n	8000fd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc8:	f001 f8ab 	bl	8002122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_InitTick+0x74>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e007      	b.n	8000fe4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e004      	b.n	8000fe4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000148 	.word	0x20000148

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000148 	.word	0x20000148

0800103c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	609a      	str	r2, [r3, #8]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3360      	adds	r3, #96	; 0x60
 80010b6:	461a      	mov	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <LL_ADC_SetOffset+0x44>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	4313      	orrs	r3, r2
 80010d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	03fff000 	.word	0x03fff000

080010ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3360      	adds	r3, #96	; 0x60
 80010fa:	461a      	mov	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3360      	adds	r3, #96	; 0x60
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	615a      	str	r2, [r3, #20]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3330      	adds	r3, #48	; 0x30
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	211f      	movs	r1, #31
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	0e9b      	lsrs	r3, r3, #26
 80011ac:	f003 011f 	and.w	r1, r3, #31
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3314      	adds	r3, #20
 80011dc:	461a      	mov	r2, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	0e5b      	lsrs	r3, r3, #25
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	0d1b      	lsrs	r3, r3, #20
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	2107      	movs	r1, #7
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	401a      	ands	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	0d1b      	lsrs	r3, r3, #20
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	431a      	orrs	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001216:	bf00      	nop
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0318 	and.w	r3, r3, #24
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001248:	40d9      	lsrs	r1, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	400b      	ands	r3, r1
 800124e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001252:	431a      	orrs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	0007ffff 	.word	0x0007ffff

0800126c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6093      	str	r3, [r2, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f4:	d101      	bne.n	80012fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <LL_ADC_IsEnabled+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_ADC_IsEnabled+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b04      	cmp	r3, #4
 8001340:	d101      	bne.n	8001346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b08      	cmp	r3, #8
 8001366:	d101      	bne.n	800136c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e131      	b.n	80015fa <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fc13 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff67 	bl	8001290 <LL_ADC_IsDeepPowerDownEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff4d 	bl	800126c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff82 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff66 	bl	80012b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ec:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_ADC_Init+0x288>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	4a85      	ldr	r2, [pc, #532]	; (8001608 <HAL_ADC_Init+0x28c>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	3301      	adds	r3, #1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001400:	e002      	b.n	8001408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3b01      	subs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f9      	bne.n	8001402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff64 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10d      	bne.n	800143a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff75 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80ca 	bne.w	80015e8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80c6 	bne.w	80015e8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff49 	bl	8001308 <LL_ADC_IsEnabled>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d110      	bne.n	800149e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800147c:	4863      	ldr	r0, [pc, #396]	; (800160c <HAL_ADC_Init+0x290>)
 800147e:	f7ff ff43 	bl	8001308 <LL_ADC_IsEnabled>
 8001482:	4604      	mov	r4, r0
 8001484:	4862      	ldr	r0, [pc, #392]	; (8001610 <HAL_ADC_Init+0x294>)
 8001486:	f7ff ff3f 	bl	8001308 <LL_ADC_IsEnabled>
 800148a:	4603      	mov	r3, r0
 800148c:	4323      	orrs	r3, r4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4619      	mov	r1, r3
 8001498:	485e      	ldr	r0, [pc, #376]	; (8001614 <HAL_ADC_Init+0x298>)
 800149a:	f7ff fdcf 	bl	800103c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7e5b      	ldrb	r3, [r3, #25]
 80014a2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014ae:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014b4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	3b01      	subs	r3, #1
 80014d2:	045b      	lsls	r3, r3, #17
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_ADC_Init+0x29c>)
 80014fe:	4013      	ands	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	430b      	orrs	r3, r1
 8001508:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff0d 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001514:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff1a 	bl	8001354 <LL_ADC_INJ_IsConversionOngoing>
 8001520:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d13d      	bne.n	80015a4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d13a      	bne.n	80015a4 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001532:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800153a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800154a:	f023 0302 	bic.w	r3, r3, #2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	430b      	orrs	r3, r1
 8001556:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155e:	2b01      	cmp	r3, #1
 8001560:	d118      	bne.n	8001594 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001578:	4311      	orrs	r1, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001584:	430a      	orrs	r2, r1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	e007      	b.n	80015a4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10c      	bne.n	80015c6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f023 010f 	bic.w	r1, r3, #15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
 80015c4:	e007      	b.n	80015d6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020f 	bic.w	r2, r2, #15
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
 80015e6:	e007      	b.n	80015f8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	f043 0210 	orr.w	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	053e2d63 	.word	0x053e2d63
 800160c:	50040000 	.word	0x50040000
 8001610:	50040100 	.word	0x50040100
 8001614:	50040300 	.word	0x50040300
 8001618:	fff0c007 	.word	0xfff0c007

0800161c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0b6      	sub	sp, #216	; 0xd8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADC_ConfigChannel+0x22>
 800163a:	2302      	movs	r3, #2
 800163c:	e3d5      	b.n	8001dea <HAL_ADC_ConfigChannel+0x7ce>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fe6f 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 83ba 	bne.w	8001dcc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d824      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	3b02      	subs	r3, #2
 8001666:	2b03      	cmp	r3, #3
 8001668:	d81b      	bhi.n	80016a2 <HAL_ADC_ConfigChannel+0x86>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HAL_ADC_ConfigChannel+0x54>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001681 	.word	0x08001681
 8001674:	08001689 	.word	0x08001689
 8001678:	08001691 	.word	0x08001691
 800167c:	08001699 	.word	0x08001699
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	220c      	movs	r2, #12
 8001684:	605a      	str	r2, [r3, #4]
          break;
 8001686:	e011      	b.n	80016ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2212      	movs	r2, #18
 800168c:	605a      	str	r2, [r3, #4]
          break;
 800168e:	e00d      	b.n	80016ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2218      	movs	r2, #24
 8001694:	605a      	str	r2, [r3, #4]
          break;
 8001696:	e009      	b.n	80016ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169e:	605a      	str	r2, [r3, #4]
          break;
 80016a0:	e004      	b.n	80016ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2206      	movs	r2, #6
 80016a6:	605a      	str	r2, [r3, #4]
          break;
 80016a8:	e000      	b.n	80016ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	f7ff fd5b 	bl	8001174 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fe33 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 80016c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fe3f 	bl	8001354 <LL_ADC_INJ_IsConversionOngoing>
 80016d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 81c1 	bne.w	8001a66 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f040 81bc 	bne.w	8001a66 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016f6:	d10f      	bne.n	8001718 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fd62 	bl	80011cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd1c 	bl	800114e <LL_ADC_SetSamplingTimeCommonConfig>
 8001716:	e00e      	b.n	8001736 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	461a      	mov	r2, r3
 8001726:	f7ff fd51 	bl	80011cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fd0c 	bl	800114e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d00a      	beq.n	800176e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6919      	ldr	r1, [r3, #16]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001768:	f7ff fc9c 	bl	80010a4 <LL_ADC_SetOffset>
 800176c:	e17b      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fcb9 	bl	80010ec <LL_ADC_GetOffsetChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <HAL_ADC_ConfigChannel+0x17e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fcae 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	0e9b      	lsrs	r3, r3, #26
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	e01e      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1bc>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fca3 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80017c8:	2320      	movs	r3, #32
 80017ca:	e004      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80017cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	e018      	b.n	8001822 <HAL_ADC_ConfigChannel+0x206>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800180c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001814:	2320      	movs	r3, #32
 8001816:	e004      	b.n	8001822 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc72 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc56 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x244>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2101      	movs	r1, #1
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc4b 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	f003 021f 	and.w	r2, r3, #31
 800185e:	e01e      	b.n	800189e <HAL_ADC_ConfigChannel+0x282>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc40 	bl	80010ec <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800187e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800188e:	2320      	movs	r3, #32
 8001890:	e004      	b.n	800189c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x29a>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	e018      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x2cc>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80018da:	2320      	movs	r3, #32
 80018dc:	e004      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d106      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fc0f 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2102      	movs	r1, #2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fbf3 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x30a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fbe8 	bl	80010ec <LL_ADC_GetOffsetChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	0e9b      	lsrs	r3, r3, #26
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	e01e      	b.n	8001964 <HAL_ADC_ConfigChannel+0x348>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbdd 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800194c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e004      	b.n	8001962 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x360>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	e016      	b.n	80019aa <HAL_ADC_ConfigChannel+0x38e>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800198e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800199c:	2320      	movs	r3, #32
 800199e:	e004      	b.n	80019aa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80019a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	2102      	movs	r1, #2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fbae 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2103      	movs	r1, #3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb92 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x3cc>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2103      	movs	r1, #3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb87 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	f003 021f 	and.w	r2, r3, #31
 80019e6:	e017      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x3fc>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2103      	movs	r1, #3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb7c 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x414>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	e011      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x438>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e003      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb59 	bl	8001118 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fc4c 	bl	8001308 <LL_ADC_IsEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 8140 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	461a      	mov	r2, r3
 8001a86:	f7ff fbcd 	bl	8001224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4a8f      	ldr	r2, [pc, #572]	; (8001ccc <HAL_ADC_ConfigChannel+0x6b0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 8131 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x4a2>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	3301      	adds	r3, #1
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b09      	cmp	r3, #9
 8001ab4:	bf94      	ite	ls
 8001ab6:	2301      	movls	r3, #1
 8001ab8:	2300      	movhi	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	e019      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x4d6>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ace:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e003      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	bf94      	ite	ls
 8001aec:	2301      	movls	r3, #1
 8001aee:	2300      	movhi	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d079      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x4f6>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	3301      	adds	r3, #1
 8001b0a:	069b      	lsls	r3, r3, #26
 8001b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b10:	e015      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x522>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e003      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	069b      	lsls	r3, r3, #26
 8001b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x542>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	3301      	adds	r3, #1
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	e017      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x572>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	ea42 0103 	orr.w	r1, r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x598>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 021f 	and.w	r2, r3, #31
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	051b      	lsls	r3, r3, #20
 8001bb2:	e018      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x5ca>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e003      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 021f 	and.w	r2, r3, #31
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be6:	430b      	orrs	r3, r1
 8001be8:	e081      	b.n	8001cee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x5ea>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0e9b      	lsrs	r3, r3, #26
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	069b      	lsls	r3, r3, #26
 8001c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c04:	e015      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x616>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	069b      	lsls	r3, r3, #26
 8001c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x636>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	3301      	adds	r3, #1
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	e017      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x666>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e003      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	ea42 0103 	orr.w	r1, r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x692>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f003 021f 	and.w	r2, r3, #31
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	051b      	lsls	r3, r3, #20
 8001ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cac:	e01e      	b.n	8001cec <HAL_ADC_ConfigChannel+0x6d0>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	613b      	str	r3, [r7, #16]
  return result;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e006      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x6bc>
 8001cca:	bf00      	nop
 8001ccc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 021f 	and.w	r2, r3, #31
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b1e      	subs	r3, #30
 8001ce6:	051b      	lsls	r3, r3, #20
 8001ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cec:	430b      	orrs	r3, r1
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7ff fa6a 	bl	80011cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d06c      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d04:	483c      	ldr	r0, [pc, #240]	; (8001df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d06:	f7ff f9bf 	bl	8001088 <LL_ADC_GetCommonPathInternalCh>
 8001d0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_ADC_ConfigChannel+0x7e0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d127      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d121      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d157      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d36:	4619      	mov	r1, r3
 8001d38:	482f      	ldr	r0, [pc, #188]	; (8001df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d3a:	f7ff f992 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_ADC_ConfigChannel+0x7ec>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d66:	e03a      	b.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_ADC_ConfigChannel+0x7f0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d113      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x77e>
 8001d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d12a      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d90:	4619      	mov	r1, r3
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d94:	f7ff f965 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d98:	e021      	b.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_ADC_ConfigChannel+0x7f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d11c      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d116      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_ADC_ConfigChannel+0x7e4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d111      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dc6:	f7ff f94c 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
 8001dca:	e008      	b.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001de6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	37d8      	adds	r7, #216	; 0xd8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	80080000 	.word	0x80080000
 8001df8:	50040300 	.word	0x50040300
 8001dfc:	c7520000 	.word	0xc7520000
 8001e00:	50040000 	.word	0x50040000
 8001e04:	20000000 	.word	0x20000000
 8001e08:	053e2d63 	.word	0x053e2d63
 8001e0c:	cb840000 	.word	0xcb840000
 8001e10:	80000001 	.word	0x80000001

08001e14 <LL_ADC_IsEnabled>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_IsEnabled+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_IsEnabled+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b09f      	sub	sp, #124	; 0x7c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e089      	b.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e86:	2300      	movs	r3, #0
 8001e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d102      	bne.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	e001      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e068      	b.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ffb9 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ffb3 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d14a      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d147      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001ee2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d027      	beq.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001efe:	035b      	lsls	r3, r3, #13
 8001f00:	430b      	orrs	r3, r1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f08:	4824      	ldr	r0, [pc, #144]	; (8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f0a:	f7ff ff83 	bl	8001e14 <LL_ADC_IsEnabled>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f12:	f7ff ff7f 	bl	8001e14 <LL_ADC_IsEnabled>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4323      	orrs	r3, r4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d132      	bne.n	8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f26:	f023 030f 	bic.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6811      	ldr	r1, [r2, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f3a:	e023      	b.n	8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f4a:	f7ff ff63 	bl	8001e14 <LL_ADC_IsEnabled>
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f52:	f7ff ff5f 	bl	8001e14 <LL_ADC_IsEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4323      	orrs	r3, r4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d112      	bne.n	8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f6c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f6e:	e009      	b.n	8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f82:	e000      	b.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	377c      	adds	r7, #124	; 0x7c
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	50040000 	.word	0x50040000
 8001fa0:	50040100 	.word	0x50040100
 8001fa4:	50040300 	.word	0x50040300

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff47 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff5c 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffb0 	bl	80020c8 <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e14e      	b.n	8002422 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8140 	beq.w	800241c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 809a 	beq.w	800241c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	4b55      	ldr	r3, [pc, #340]	; (8002440 <HAL_GPIO_Init+0x2cc>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x2cc>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6613      	str	r3, [r2, #96]	; 0x60
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_GPIO_Init+0x2cc>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232a:	d013      	beq.n	8002354 <HAL_GPIO_Init+0x1e0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <HAL_GPIO_Init+0x2d4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00d      	beq.n	8002350 <HAL_GPIO_Init+0x1dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a45      	ldr	r2, [pc, #276]	; (800244c <HAL_GPIO_Init+0x2d8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0x1d8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_GPIO_Init+0x2dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_GPIO_Init+0x1d4>
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002348:	2307      	movs	r3, #7
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002354:	2300      	movs	r3, #0
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002366:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002374:	4b37      	ldr	r3, [pc, #220]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002398:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aea9 	bne.w	8002184 <HAL_GPIO_Init+0x10>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	48000c00 	.word	0x48000c00
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_PWREx_GetVoltageRange+0x18>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40007000 	.word	0x40007000

08002474 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002482:	d130      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d038      	beq.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249a:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2232      	movs	r2, #50	; 0x32
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	4a1b      	ldr	r2, [pc, #108]	; (800251c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	3301      	adds	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b8:	e002      	b.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3b01      	subs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d102      	bne.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f2      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d110      	bne.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e00f      	b.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d007      	beq.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fc:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002502:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40007000 	.word	0x40007000
 8002518:	20000000 	.word	0x20000000
 800251c:	431bde83 	.word	0x431bde83

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f000 bc52 	b.w	8002dd8 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002534:	4ba1      	ldr	r3, [pc, #644]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800253e:	4b9f      	ldr	r3, [pc, #636]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80e6 	beq.w	8002722 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_RCC_OscConfig+0x4c>
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	f040 808d 	bne.w	800267e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 8089 	bne.w	800267e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256c:	4b93      	ldr	r3, [pc, #588]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_RCC_OscConfig+0x66>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f000 bc29 	b.w	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	4b8c      	ldr	r3, [pc, #560]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_RCC_OscConfig+0x80>
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259e:	e005      	b.n	80025ac <HAL_RCC_OscConfig+0x8c>
 80025a0:	4b86      	ldr	r3, [pc, #536]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d224      	bcs.n	80025fa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fda1 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f000 bc09 	b.w	8002dd8 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7c      	ldr	r2, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	4977      	ldr	r1, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	4972      	ldr	r1, [pc, #456]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
 80025f8:	e025      	b.n	8002646 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fa:	4b70      	ldr	r3, [pc, #448]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6f      	ldr	r2, [pc, #444]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	496a      	ldr	r1, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	4965      	ldr	r1, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fd60 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e3c8      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002646:	f000 fccd 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	495a      	ldr	r1, [pc, #360]	; (80027c0 <HAL_RCC_OscConfig+0x2a0>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_OscConfig+0x2a4>)
 8002664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x2a8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fc8a 	bl	8000f84 <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d052      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	e3ac      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d032      	beq.n	80026ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002686:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4c      	ldr	r2, [pc, #304]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002692:	f7fe fcc7 	bl	8001024 <HAL_GetTick>
 8002696:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800269a:	f7fe fcc3 	bl	8001024 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e395      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	493a      	ldr	r1, [pc, #232]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4935      	ldr	r1, [pc, #212]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
 80026ea:	e01a      	b.n	8002722 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fc94 	bl	8001024 <HAL_GetTick>
 80026fc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002700:	f7fe fc90 	bl	8001024 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e362      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x1e0>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d073      	beq.n	8002816 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d10e      	bne.n	8002758 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d063      	beq.n	8002814 <HAL_RCC_OscConfig+0x2f4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d15f      	bne.n	8002814 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e33f      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x250>
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0x28c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x274>
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0x28c>
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_RCC_OscConfig+0x29c>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fc36 	bl	8001024 <HAL_GetTick>
 80027b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	e010      	b.n	80027de <HAL_RCC_OscConfig+0x2be>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080055d0 	.word	0x080055d0
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fc2a 	bl	8001024 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e2fc      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2ac>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fc1a 	bl	8001024 <HAL_GetTick>
 80027f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fc16 	bl	8001024 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e2e8      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002806:	4b96      	ldr	r3, [pc, #600]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d060      	beq.n	80028e4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x314>
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d119      	bne.n	8002862 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d116      	bne.n	8002862 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002834:	4b8a      	ldr	r3, [pc, #552]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x32c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e2c5      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b84      	ldr	r3, [pc, #528]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4981      	ldr	r1, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002860:	e040      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d023      	beq.n	80028b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286a:	4b7d      	ldr	r3, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7c      	ldr	r2, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fbd5 	bl	8001024 <HAL_GetTick>
 800287a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fbd1 	bl	8001024 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e2a3      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	496d      	ldr	r1, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e018      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b6b      	ldr	r3, [pc, #428]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6a      	ldr	r2, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fbb1 	bl	8001024 <HAL_GetTick>
 80028c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fbad 	bl	8001024 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e27f      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d8:	4b61      	ldr	r3, [pc, #388]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d07f      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05f      	beq.n	80029b8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	429a      	cmp	r2, r3
 800290c:	d037      	beq.n	800297e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e258      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7fe fb70 	bl	8001024 <HAL_GetTick>
 8002944:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe fb6c 	bl	8001024 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b11      	cmp	r3, #17
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e23e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ef      	bne.n	8002948 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002968:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f023 0210 	bic.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	493a      	ldr	r1, [pc, #232]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	4a36      	ldr	r2, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7fe fb49 	bl	8001024 <HAL_GetTick>
 8002992:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe fb45 	bl	8001024 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b11      	cmp	r3, #17
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e217      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80029aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ef      	beq.n	8002996 <HAL_RCC_OscConfig+0x476>
 80029b6:	e01b      	b.n	80029f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fb2c 	bl	8001024 <HAL_GetTick>
 80029cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fb28 	bl	8001024 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b11      	cmp	r3, #17
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1fa      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ef      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80c1 	beq.w	8002b80 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10e      	bne.n	8002a2e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x540>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_OscConfig+0x544>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_OscConfig+0x544>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_OscConfig+0x544>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7fe faed 	bl	8001024 <HAL_GetTick>
 8002a4a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4c:	e00c      	b.n	8002a68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe fae9 	bl	8001024 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d905      	bls.n	8002a68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1bb      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	4bb1      	ldr	r3, [pc, #708]	; (8002d30 <HAL_RCC_OscConfig+0x810>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ec      	beq.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02c      	beq.n	8002ada <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a80:	4bac      	ldr	r3, [pc, #688]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	49a8      	ldr	r1, [pc, #672]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aa6:	4ba3      	ldr	r3, [pc, #652]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	4aa1      	ldr	r2, [pc, #644]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab6:	4b9f      	ldr	r3, [pc, #636]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a9d      	ldr	r2, [pc, #628]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ac8:	4b9a      	ldr	r3, [pc, #616]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	4a99      	ldr	r2, [pc, #612]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad8:	e00f      	b.n	8002afa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ada:	4b96      	ldr	r3, [pc, #600]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a94      	ldr	r2, [pc, #592]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aea:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	4a90      	ldr	r2, [pc, #576]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fa8f 	bl	8001024 <HAL_GetTick>
 8002b06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fa8b 	bl	8001024 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e15b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	4b84      	ldr	r3, [pc, #528]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ed      	beq.n	8002b0a <HAL_RCC_OscConfig+0x5ea>
 8002b2e:	e01d      	b.n	8002b6c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fa78 	bl	8001024 <HAL_GetTick>
 8002b34:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa74 	bl	8001024 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e144      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4e:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ed      	bne.n	8002b38 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a74      	ldr	r2, [pc, #464]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b9a:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fa3e 	bl	8001024 <HAL_GetTick>
 8002ba8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7fe fa3a 	bl	8001024 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e10c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x68c>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fa21 	bl	8001024 <HAL_GetTick>
 8002be2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7fe fa1d 	bl	8001024 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0ef      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80e3 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	f040 80b7 	bne.w	8002d88 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c1a:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d124      	bne.n	8002c78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d11b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d113      	bne.n	8002c78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d109      	bne.n	8002c78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	3b01      	subs	r3, #1
 8002c72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d061      	beq.n	8002d3c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d056      	beq.n	8002d2c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8a:	f7fe f9cb 	bl	8001024 <HAL_GetTick>
 8002c8e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe f9c7 	bl	8001024 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e099      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_OscConfig+0x818>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0652      	lsls	r2, r2, #25
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	4913      	ldr	r1, [pc, #76]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d04:	f7fe f98e 	bl	8001024 <HAL_GetTick>
 8002d08:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f98a 	bl	8001024 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e05c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_OscConfig+0x814>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2a:	e054      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e053      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
 8002d30:	40007000 	.word	0x40007000
 8002d34:	40021000 	.word	0x40021000
 8002d38:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d146      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d60:	f7fe f960 	bl	8001024 <HAL_GetTick>
 8002d64:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f95c 	bl	8001024 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e02e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x848>
 8002d86:	e026      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d021      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f943 	bl	8001024 <HAL_GetTick>
 8002d9e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe f93f 	bl	8001024 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e011      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x8c0>)
 8002dc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	60d3      	str	r3, [r2, #12]
 8002dd0:	e001      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0e7      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d910      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4970      	ldr	r1, [pc, #448]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0cf      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d908      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4960      	ldr	r1, [pc, #384]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d04c      	beq.n	8002efc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b5a      	ldr	r3, [pc, #360]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d121      	bne.n	8002eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0a6      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e82:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d115      	bne.n	8002eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e09a      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e08e      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e086      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4943      	ldr	r1, [pc, #268]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe f8aa 	bl	8001024 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe f8a6 	bl	8001024 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e06e      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d208      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	492b      	ldr	r1, [pc, #172]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d210      	bcs.n	8002f5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 0207 	bic.w	r2, r3, #7
 8002f40:	4923      	ldr	r1, [pc, #140]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e036      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4918      	ldr	r1, [pc, #96]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4910      	ldr	r1, [pc, #64]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f98:	f000 f824 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1f8>)
 8002fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1fc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd ffe1 	bl	8000f84 <HAL_InitTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080055d0 	.word	0x080055d0
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff2:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d121      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d11e      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003034:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003040:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003054:	e00a      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d102      	bne.n	8003062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e004      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d101      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800306a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d134      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0xa6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0xac>
 8003088:	e005      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800308c:	617b      	str	r3, [r7, #20]
      break;
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003092:	617b      	str	r3, [r7, #20]
      break;
 8003094:	e002      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	617b      	str	r3, [r7, #20]
      break;
 800309a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	fb02 f203 	mul.w	r2, r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	0e5b      	lsrs	r3, r3, #25
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	3301      	adds	r3, #1
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030dc:	69bb      	ldr	r3, [r7, #24]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	080055e0 	.word	0x080055e0
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff f9a0 	bl	8002458 <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f990 	bl	8002458 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d10b      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d919      	bls.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d902      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e013      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e010      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d902      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800316c:	2303      	movs	r3, #3
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e00a      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d102      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003178:	2302      	movs	r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e004      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d101      	bne.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0207 	bic.w	r2, r3, #7
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 809e 	beq.w	8003316 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031de:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003210:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a39      	ldr	r2, [pc, #228]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321c:	f7fd ff02 	bl	8001024 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fd fefe 	bl	8001024 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	74fb      	strb	r3, [r7, #19]
        break;
 8003236:	e005      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d15a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	429a      	cmp	r2, r3
 8003264:	d019      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003272:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd febe 	bl	8001024 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	e00b      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fd feba 	bl	8001024 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d902      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	74fb      	strb	r3, [r7, #19]
            break;
 80032c2:	e006      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ec      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003304:	7c7b      	ldrb	r3, [r7, #17]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b6e      	ldr	r3, [pc, #440]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	4a6d      	ldr	r2, [pc, #436]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003322:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f023 0203 	bic.w	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4964      	ldr	r1, [pc, #400]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003344:	4b5f      	ldr	r3, [pc, #380]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 020c 	bic.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	495c      	ldr	r1, [pc, #368]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4953      	ldr	r1, [pc, #332]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003388:	4b4e      	ldr	r3, [pc, #312]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	494b      	ldr	r1, [pc, #300]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033aa:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4942      	ldr	r1, [pc, #264]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	493a      	ldr	r1, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ee:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4931      	ldr	r1, [pc, #196]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	4929      	ldr	r1, [pc, #164]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4920      	ldr	r1, [pc, #128]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	4918      	ldr	r1, [pc, #96]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	490a      	ldr	r1, [pc, #40]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e049      	b.n	800356e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fbac 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fb52 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e049      	b.n	800361c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f841 	bl	8003624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f000 fafb 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_TIM_PWM_Start+0x24>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e03c      	b.n	80036d6 <HAL_TIM_PWM_Start+0x9e>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b04      	cmp	r3, #4
 8003660:	d109      	bne.n	8003676 <HAL_TIM_PWM_Start+0x3e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	e02f      	b.n	80036d6 <HAL_TIM_PWM_Start+0x9e>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d109      	bne.n	8003690 <HAL_TIM_PWM_Start+0x58>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e022      	b.n	80036d6 <HAL_TIM_PWM_Start+0x9e>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d109      	bne.n	80036aa <HAL_TIM_PWM_Start+0x72>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e015      	b.n	80036d6 <HAL_TIM_PWM_Start+0x9e>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d109      	bne.n	80036c4 <HAL_TIM_PWM_Start+0x8c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_TIM_PWM_Start+0x9e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07e      	b.n	80037dc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xb6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	e023      	b.n	8003736 <HAL_TIM_PWM_Start+0xfe>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xc6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036fc:	e01b      	b.n	8003736 <HAL_TIM_PWM_Start+0xfe>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0xd6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	e013      	b.n	8003736 <HAL_TIM_PWM_Start+0xfe>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d104      	bne.n	800371e <HAL_TIM_PWM_Start+0xe6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800371c:	e00b      	b.n	8003736 <HAL_TIM_PWM_Start+0xfe>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b10      	cmp	r3, #16
 8003722:	d104      	bne.n	800372e <HAL_TIM_PWM_Start+0xf6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372c:	e003      	b.n	8003736 <HAL_TIM_PWM_Start+0xfe>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fdb2 	bl	80042a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <HAL_TIM_PWM_Start+0x1ac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_TIM_PWM_Start+0x12a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <HAL_TIM_PWM_Start+0x1b0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start+0x12a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a23      	ldr	r2, [pc, #140]	; (80037ec <HAL_TIM_PWM_Start+0x1b4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_TIM_PWM_Start+0x12e>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_TIM_PWM_Start+0x130>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_PWM_Start+0x1ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIM_PWM_Start+0x162>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d004      	beq.n	800379a <HAL_TIM_PWM_Start+0x162>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_TIM_PWM_Start+0x1b0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d115      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_TIM_PWM_Start+0x1b8>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d015      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x1a0>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d011      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e008      	b.n	80037d8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e000      	b.n	80037da <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400
 80037f0:	00010007 	.word	0x00010007

080037f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800380e:	2302      	movs	r3, #2
 8003810:	e0ff      	b.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b14      	cmp	r3, #20
 800381e:	f200 80f0 	bhi.w	8003a02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800387d 	.word	0x0800387d
 800382c:	08003a03 	.word	0x08003a03
 8003830:	08003a03 	.word	0x08003a03
 8003834:	08003a03 	.word	0x08003a03
 8003838:	080038bd 	.word	0x080038bd
 800383c:	08003a03 	.word	0x08003a03
 8003840:	08003a03 	.word	0x08003a03
 8003844:	08003a03 	.word	0x08003a03
 8003848:	080038ff 	.word	0x080038ff
 800384c:	08003a03 	.word	0x08003a03
 8003850:	08003a03 	.word	0x08003a03
 8003854:	08003a03 	.word	0x08003a03
 8003858:	0800393f 	.word	0x0800393f
 800385c:	08003a03 	.word	0x08003a03
 8003860:	08003a03 	.word	0x08003a03
 8003864:	08003a03 	.word	0x08003a03
 8003868:	08003981 	.word	0x08003981
 800386c:	08003a03 	.word	0x08003a03
 8003870:	08003a03 	.word	0x08003a03
 8003874:	08003a03 	.word	0x08003a03
 8003878:	080039c1 	.word	0x080039c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f9f8 	bl	8003c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0208 	orr.w	r2, r2, #8
 8003896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6999      	ldr	r1, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	619a      	str	r2, [r3, #24]
      break;
 80038ba:	e0a5      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fa54 	bl	8003d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	619a      	str	r2, [r3, #24]
      break;
 80038fc:	e084      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 faad 	bl	8003e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0208 	orr.w	r2, r2, #8
 8003918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0204 	bic.w	r2, r2, #4
 8003928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69d9      	ldr	r1, [r3, #28]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]
      break;
 800393c:	e064      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fb05 	bl	8003f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	021a      	lsls	r2, r3, #8
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	61da      	str	r2, [r3, #28]
      break;
 800397e:	e043      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fb42 	bl	8004010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0208 	orr.w	r2, r2, #8
 800399a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039be:	e023      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb7a 	bl	80040c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	021a      	lsls	r2, r3, #8
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a00:	e002      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop

08003a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIM_ConfigClockSource+0x1c>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0b6      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x18a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	d03e      	beq.n	8003af4 <HAL_TIM_ConfigClockSource+0xd8>
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7a:	f200 8087 	bhi.w	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	f000 8086 	beq.w	8003b92 <HAL_TIM_ConfigClockSource+0x176>
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	d87f      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003a8c:	2b70      	cmp	r3, #112	; 0x70
 8003a8e:	d01a      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xaa>
 8003a90:	2b70      	cmp	r3, #112	; 0x70
 8003a92:	d87b      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d050      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x11e>
 8003a98:	2b60      	cmp	r3, #96	; 0x60
 8003a9a:	d877      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	d03c      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xfe>
 8003aa0:	2b50      	cmp	r3, #80	; 0x50
 8003aa2:	d873      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d058      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x13e>
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d86f      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	d064      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x15e>
 8003ab0:	2b30      	cmp	r3, #48	; 0x30
 8003ab2:	d86b      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d060      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x15e>
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d867      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05c      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d05a      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac4:	e062      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f000 fbc7 	bl	8004268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	609a      	str	r2, [r3, #8]
      break;
 8003af2:	e04f      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	6899      	ldr	r1, [r3, #8]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f000 fbb0 	bl	8004268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b16:	609a      	str	r2, [r3, #8]
      break;
 8003b18:	e03c      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 fb24 	bl	8004174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2150      	movs	r1, #80	; 0x50
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb7d 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 8003b38:	e02c      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 fb43 	bl	80041d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2160      	movs	r1, #96	; 0x60
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb6d 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e01c      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 fb04 	bl	8004174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb5d 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e00c      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f000 fb54 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 8003b8a:	e003      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b90:	e000      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <TIM_Base_SetConfig+0xbc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x20>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <TIM_Base_SetConfig+0xbc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_Base_SetConfig+0x52>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d007      	beq.n	8003c02 <TIM_Base_SetConfig+0x52>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <TIM_Base_SetConfig+0xc0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_Base_SetConfig+0x52>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <TIM_Base_SetConfig+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d108      	bne.n	8003c14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <TIM_Base_SetConfig+0xbc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_Base_SetConfig+0xa0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <TIM_Base_SetConfig+0xc0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_Base_SetConfig+0xa0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <TIM_Base_SetConfig+0xc4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d103      	bne.n	8003c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400

08003c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0201 	bic.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0302 	bic.w	r3, r3, #2
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <TIM_OC1_SetConfig+0xec>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <TIM_OC1_SetConfig+0xf0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x70>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <TIM_OC1_SetConfig+0xf4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <TIM_OC1_SetConfig+0xec>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_OC1_SetConfig+0xa2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC1_SetConfig+0xf0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC1_SetConfig+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <TIM_OC1_SetConfig+0xf4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d111      	bne.n	8003d3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400

08003d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0320 	bic.w	r3, r3, #32
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <TIM_OC2_SetConfig+0xe8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <TIM_OC2_SetConfig+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_OC2_SetConfig+0x98>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <TIM_OC2_SetConfig+0xec>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_OC2_SetConfig+0x98>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <TIM_OC2_SetConfig+0xf0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d113      	bne.n	8003e30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400

08003e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10d      	bne.n	8003ee2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_OC3_SetConfig+0x96>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <TIM_OC3_SetConfig+0xe8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_OC3_SetConfig+0x96>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <TIM_OC3_SetConfig+0xec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d113      	bne.n	8003f22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400

08003f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	031b      	lsls	r3, r3, #12
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a14      	ldr	r2, [pc, #80]	; (8004004 <TIM_OC4_SetConfig+0xb0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x74>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <TIM_OC4_SetConfig+0xb4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_OC4_SetConfig+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <TIM_OC4_SetConfig+0xb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d109      	bne.n	8003fdc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400

08004010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <TIM_OC5_SetConfig+0xa4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_OC5_SetConfig+0x6a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <TIM_OC5_SetConfig+0xa8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC5_SetConfig+0x6a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <TIM_OC5_SetConfig+0xac>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d109      	bne.n	800408e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400

080040c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	051b      	lsls	r3, r3, #20
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <TIM_OC6_SetConfig+0xa8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_OC6_SetConfig+0x6c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <TIM_OC6_SetConfig+0xac>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC6_SetConfig+0x6c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <TIM_OC6_SetConfig+0xb0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d109      	bne.n	8004140 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	029b      	lsls	r3, r3, #10
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400

08004174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f023 0201 	bic.w	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800419e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 030a 	bic.w	r3, r3, #10
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800420e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	f043 0307 	orr.w	r3, r3, #7
 8004254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	021a      	lsls	r2, r3, #8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e04f      	b.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800433c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d004      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10c      	bne.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40014000 	.word	0x40014000

080043c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e060      	b.n	800449e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a14      	ldr	r2, [pc, #80]	; (80044ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d115      	bne.n	800448c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	051b      	lsls	r3, r3, #20
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00

080044b0 <__assert_func>:
 80044b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044b2:	4614      	mov	r4, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <__assert_func+0x2c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4605      	mov	r5, r0
 80044bc:	68d8      	ldr	r0, [r3, #12]
 80044be:	b14c      	cbz	r4, 80044d4 <__assert_func+0x24>
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <__assert_func+0x30>)
 80044c2:	9100      	str	r1, [sp, #0]
 80044c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044c8:	4906      	ldr	r1, [pc, #24]	; (80044e4 <__assert_func+0x34>)
 80044ca:	462b      	mov	r3, r5
 80044cc:	f000 f814 	bl	80044f8 <fiprintf>
 80044d0:	f000 fbfe 	bl	8004cd0 <abort>
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__assert_func+0x38>)
 80044d6:	461c      	mov	r4, r3
 80044d8:	e7f3      	b.n	80044c2 <__assert_func+0x12>
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	08005610 	.word	0x08005610
 80044e4:	0800561d 	.word	0x0800561d
 80044e8:	0800564b 	.word	0x0800564b

080044ec <__errno>:
 80044ec:	4b01      	ldr	r3, [pc, #4]	; (80044f4 <__errno+0x8>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c

080044f8 <fiprintf>:
 80044f8:	b40e      	push	{r1, r2, r3}
 80044fa:	b503      	push	{r0, r1, lr}
 80044fc:	4601      	mov	r1, r0
 80044fe:	ab03      	add	r3, sp, #12
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <fiprintf+0x20>)
 8004502:	f853 2b04 	ldr.w	r2, [r3], #4
 8004506:	6800      	ldr	r0, [r0, #0]
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f000 f85d 	bl	80045c8 <_vfiprintf_r>
 800450e:	b002      	add	sp, #8
 8004510:	f85d eb04 	ldr.w	lr, [sp], #4
 8004514:	b003      	add	sp, #12
 8004516:	4770      	bx	lr
 8004518:	2000000c 	.word	0x2000000c

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4d0d      	ldr	r5, [pc, #52]	; (8004554 <__libc_init_array+0x38>)
 8004520:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	2600      	movs	r6, #0
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	4d0b      	ldr	r5, [pc, #44]	; (800455c <__libc_init_array+0x40>)
 800452e:	4c0c      	ldr	r4, [pc, #48]	; (8004560 <__libc_init_array+0x44>)
 8004530:	f001 f82a 	bl	8005588 <_init>
 8004534:	1b64      	subs	r4, r4, r5
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	2600      	movs	r6, #0
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080056e4 	.word	0x080056e4
 8004558:	080056e4 	.word	0x080056e4
 800455c:	080056e4 	.word	0x080056e4
 8004560:	080056e8 	.word	0x080056e8

08004564 <memset>:
 8004564:	4402      	add	r2, r0
 8004566:	4603      	mov	r3, r0
 8004568:	4293      	cmp	r3, r2
 800456a:	d100      	bne.n	800456e <memset+0xa>
 800456c:	4770      	bx	lr
 800456e:	f803 1b01 	strb.w	r1, [r3], #1
 8004572:	e7f9      	b.n	8004568 <memset+0x4>

08004574 <__sfputc_r>:
 8004574:	6893      	ldr	r3, [r2, #8]
 8004576:	3b01      	subs	r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	b410      	push	{r4}
 800457c:	6093      	str	r3, [r2, #8]
 800457e:	da08      	bge.n	8004592 <__sfputc_r+0x1e>
 8004580:	6994      	ldr	r4, [r2, #24]
 8004582:	42a3      	cmp	r3, r4
 8004584:	db01      	blt.n	800458a <__sfputc_r+0x16>
 8004586:	290a      	cmp	r1, #10
 8004588:	d103      	bne.n	8004592 <__sfputc_r+0x1e>
 800458a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800458e:	f000 badf 	b.w	8004b50 <__swbuf_r>
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	1c58      	adds	r0, r3, #1
 8004596:	6010      	str	r0, [r2, #0]
 8004598:	7019      	strb	r1, [r3, #0]
 800459a:	4608      	mov	r0, r1
 800459c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <__sfputs_r>:
 80045a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a4:	4606      	mov	r6, r0
 80045a6:	460f      	mov	r7, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	18d5      	adds	r5, r2, r3
 80045ac:	42ac      	cmp	r4, r5
 80045ae:	d101      	bne.n	80045b4 <__sfputs_r+0x12>
 80045b0:	2000      	movs	r0, #0
 80045b2:	e007      	b.n	80045c4 <__sfputs_r+0x22>
 80045b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b8:	463a      	mov	r2, r7
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ffda 	bl	8004574 <__sfputc_r>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d1f3      	bne.n	80045ac <__sfputs_r+0xa>
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045c8 <_vfiprintf_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	460d      	mov	r5, r1
 80045ce:	b09d      	sub	sp, #116	; 0x74
 80045d0:	4614      	mov	r4, r2
 80045d2:	4698      	mov	r8, r3
 80045d4:	4606      	mov	r6, r0
 80045d6:	b118      	cbz	r0, 80045e0 <_vfiprintf_r+0x18>
 80045d8:	6983      	ldr	r3, [r0, #24]
 80045da:	b90b      	cbnz	r3, 80045e0 <_vfiprintf_r+0x18>
 80045dc:	f000 fc9a 	bl	8004f14 <__sinit>
 80045e0:	4b89      	ldr	r3, [pc, #548]	; (8004808 <_vfiprintf_r+0x240>)
 80045e2:	429d      	cmp	r5, r3
 80045e4:	d11b      	bne.n	800461e <_vfiprintf_r+0x56>
 80045e6:	6875      	ldr	r5, [r6, #4]
 80045e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ea:	07d9      	lsls	r1, r3, #31
 80045ec:	d405      	bmi.n	80045fa <_vfiprintf_r+0x32>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	059a      	lsls	r2, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_vfiprintf_r+0x32>
 80045f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f6:	f000 fd2b 	bl	8005050 <__retarget_lock_acquire_recursive>
 80045fa:	89ab      	ldrh	r3, [r5, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	d501      	bpl.n	8004604 <_vfiprintf_r+0x3c>
 8004600:	692b      	ldr	r3, [r5, #16]
 8004602:	b9eb      	cbnz	r3, 8004640 <_vfiprintf_r+0x78>
 8004604:	4629      	mov	r1, r5
 8004606:	4630      	mov	r0, r6
 8004608:	f000 faf4 	bl	8004bf4 <__swsetup_r>
 800460c:	b1c0      	cbz	r0, 8004640 <_vfiprintf_r+0x78>
 800460e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004610:	07dc      	lsls	r4, r3, #31
 8004612:	d50e      	bpl.n	8004632 <_vfiprintf_r+0x6a>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004618:	b01d      	add	sp, #116	; 0x74
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	4b7b      	ldr	r3, [pc, #492]	; (800480c <_vfiprintf_r+0x244>)
 8004620:	429d      	cmp	r5, r3
 8004622:	d101      	bne.n	8004628 <_vfiprintf_r+0x60>
 8004624:	68b5      	ldr	r5, [r6, #8]
 8004626:	e7df      	b.n	80045e8 <_vfiprintf_r+0x20>
 8004628:	4b79      	ldr	r3, [pc, #484]	; (8004810 <_vfiprintf_r+0x248>)
 800462a:	429d      	cmp	r5, r3
 800462c:	bf08      	it	eq
 800462e:	68f5      	ldreq	r5, [r6, #12]
 8004630:	e7da      	b.n	80045e8 <_vfiprintf_r+0x20>
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	0598      	lsls	r0, r3, #22
 8004636:	d4ed      	bmi.n	8004614 <_vfiprintf_r+0x4c>
 8004638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800463a:	f000 fd0a 	bl	8005052 <__retarget_lock_release_recursive>
 800463e:	e7e9      	b.n	8004614 <_vfiprintf_r+0x4c>
 8004640:	2300      	movs	r3, #0
 8004642:	9309      	str	r3, [sp, #36]	; 0x24
 8004644:	2320      	movs	r3, #32
 8004646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800464a:	f8cd 800c 	str.w	r8, [sp, #12]
 800464e:	2330      	movs	r3, #48	; 0x30
 8004650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004814 <_vfiprintf_r+0x24c>
 8004654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004658:	f04f 0901 	mov.w	r9, #1
 800465c:	4623      	mov	r3, r4
 800465e:	469a      	mov	sl, r3
 8004660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004664:	b10a      	cbz	r2, 800466a <_vfiprintf_r+0xa2>
 8004666:	2a25      	cmp	r2, #37	; 0x25
 8004668:	d1f9      	bne.n	800465e <_vfiprintf_r+0x96>
 800466a:	ebba 0b04 	subs.w	fp, sl, r4
 800466e:	d00b      	beq.n	8004688 <_vfiprintf_r+0xc0>
 8004670:	465b      	mov	r3, fp
 8004672:	4622      	mov	r2, r4
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f7ff ff93 	bl	80045a2 <__sfputs_r>
 800467c:	3001      	adds	r0, #1
 800467e:	f000 80aa 	beq.w	80047d6 <_vfiprintf_r+0x20e>
 8004682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004684:	445a      	add	r2, fp
 8004686:	9209      	str	r2, [sp, #36]	; 0x24
 8004688:	f89a 3000 	ldrb.w	r3, [sl]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a2 	beq.w	80047d6 <_vfiprintf_r+0x20e>
 8004692:	2300      	movs	r3, #0
 8004694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800469c:	f10a 0a01 	add.w	sl, sl, #1
 80046a0:	9304      	str	r3, [sp, #16]
 80046a2:	9307      	str	r3, [sp, #28]
 80046a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046a8:	931a      	str	r3, [sp, #104]	; 0x68
 80046aa:	4654      	mov	r4, sl
 80046ac:	2205      	movs	r2, #5
 80046ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b2:	4858      	ldr	r0, [pc, #352]	; (8004814 <_vfiprintf_r+0x24c>)
 80046b4:	f7fb fd8c 	bl	80001d0 <memchr>
 80046b8:	9a04      	ldr	r2, [sp, #16]
 80046ba:	b9d8      	cbnz	r0, 80046f4 <_vfiprintf_r+0x12c>
 80046bc:	06d1      	lsls	r1, r2, #27
 80046be:	bf44      	itt	mi
 80046c0:	2320      	movmi	r3, #32
 80046c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c6:	0713      	lsls	r3, r2, #28
 80046c8:	bf44      	itt	mi
 80046ca:	232b      	movmi	r3, #43	; 0x2b
 80046cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046d0:	f89a 3000 	ldrb.w	r3, [sl]
 80046d4:	2b2a      	cmp	r3, #42	; 0x2a
 80046d6:	d015      	beq.n	8004704 <_vfiprintf_r+0x13c>
 80046d8:	9a07      	ldr	r2, [sp, #28]
 80046da:	4654      	mov	r4, sl
 80046dc:	2000      	movs	r0, #0
 80046de:	f04f 0c0a 	mov.w	ip, #10
 80046e2:	4621      	mov	r1, r4
 80046e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e8:	3b30      	subs	r3, #48	; 0x30
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	d94e      	bls.n	800478c <_vfiprintf_r+0x1c4>
 80046ee:	b1b0      	cbz	r0, 800471e <_vfiprintf_r+0x156>
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	e014      	b.n	800471e <_vfiprintf_r+0x156>
 80046f4:	eba0 0308 	sub.w	r3, r0, r8
 80046f8:	fa09 f303 	lsl.w	r3, r9, r3
 80046fc:	4313      	orrs	r3, r2
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	46a2      	mov	sl, r4
 8004702:	e7d2      	b.n	80046aa <_vfiprintf_r+0xe2>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	1d19      	adds	r1, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	9103      	str	r1, [sp, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfbb      	ittet	lt
 8004710:	425b      	neglt	r3, r3
 8004712:	f042 0202 	orrlt.w	r2, r2, #2
 8004716:	9307      	strge	r3, [sp, #28]
 8004718:	9307      	strlt	r3, [sp, #28]
 800471a:	bfb8      	it	lt
 800471c:	9204      	strlt	r2, [sp, #16]
 800471e:	7823      	ldrb	r3, [r4, #0]
 8004720:	2b2e      	cmp	r3, #46	; 0x2e
 8004722:	d10c      	bne.n	800473e <_vfiprintf_r+0x176>
 8004724:	7863      	ldrb	r3, [r4, #1]
 8004726:	2b2a      	cmp	r3, #42	; 0x2a
 8004728:	d135      	bne.n	8004796 <_vfiprintf_r+0x1ce>
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9203      	str	r2, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfb8      	it	lt
 8004736:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800473a:	3402      	adds	r4, #2
 800473c:	9305      	str	r3, [sp, #20]
 800473e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004824 <_vfiprintf_r+0x25c>
 8004742:	7821      	ldrb	r1, [r4, #0]
 8004744:	2203      	movs	r2, #3
 8004746:	4650      	mov	r0, sl
 8004748:	f7fb fd42 	bl	80001d0 <memchr>
 800474c:	b140      	cbz	r0, 8004760 <_vfiprintf_r+0x198>
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	eba0 000a 	sub.w	r0, r0, sl
 8004754:	fa03 f000 	lsl.w	r0, r3, r0
 8004758:	9b04      	ldr	r3, [sp, #16]
 800475a:	4303      	orrs	r3, r0
 800475c:	3401      	adds	r4, #1
 800475e:	9304      	str	r3, [sp, #16]
 8004760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004764:	482c      	ldr	r0, [pc, #176]	; (8004818 <_vfiprintf_r+0x250>)
 8004766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800476a:	2206      	movs	r2, #6
 800476c:	f7fb fd30 	bl	80001d0 <memchr>
 8004770:	2800      	cmp	r0, #0
 8004772:	d03f      	beq.n	80047f4 <_vfiprintf_r+0x22c>
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <_vfiprintf_r+0x254>)
 8004776:	bb1b      	cbnz	r3, 80047c0 <_vfiprintf_r+0x1f8>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	3307      	adds	r3, #7
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	3308      	adds	r3, #8
 8004782:	9303      	str	r3, [sp, #12]
 8004784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004786:	443b      	add	r3, r7
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
 800478a:	e767      	b.n	800465c <_vfiprintf_r+0x94>
 800478c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004790:	460c      	mov	r4, r1
 8004792:	2001      	movs	r0, #1
 8004794:	e7a5      	b.n	80046e2 <_vfiprintf_r+0x11a>
 8004796:	2300      	movs	r3, #0
 8004798:	3401      	adds	r4, #1
 800479a:	9305      	str	r3, [sp, #20]
 800479c:	4619      	mov	r1, r3
 800479e:	f04f 0c0a 	mov.w	ip, #10
 80047a2:	4620      	mov	r0, r4
 80047a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a8:	3a30      	subs	r2, #48	; 0x30
 80047aa:	2a09      	cmp	r2, #9
 80047ac:	d903      	bls.n	80047b6 <_vfiprintf_r+0x1ee>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0c5      	beq.n	800473e <_vfiprintf_r+0x176>
 80047b2:	9105      	str	r1, [sp, #20]
 80047b4:	e7c3      	b.n	800473e <_vfiprintf_r+0x176>
 80047b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ba:	4604      	mov	r4, r0
 80047bc:	2301      	movs	r3, #1
 80047be:	e7f0      	b.n	80047a2 <_vfiprintf_r+0x1da>
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	462a      	mov	r2, r5
 80047c6:	4b16      	ldr	r3, [pc, #88]	; (8004820 <_vfiprintf_r+0x258>)
 80047c8:	a904      	add	r1, sp, #16
 80047ca:	4630      	mov	r0, r6
 80047cc:	f3af 8000 	nop.w
 80047d0:	4607      	mov	r7, r0
 80047d2:	1c78      	adds	r0, r7, #1
 80047d4:	d1d6      	bne.n	8004784 <_vfiprintf_r+0x1bc>
 80047d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047d8:	07d9      	lsls	r1, r3, #31
 80047da:	d405      	bmi.n	80047e8 <_vfiprintf_r+0x220>
 80047dc:	89ab      	ldrh	r3, [r5, #12]
 80047de:	059a      	lsls	r2, r3, #22
 80047e0:	d402      	bmi.n	80047e8 <_vfiprintf_r+0x220>
 80047e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047e4:	f000 fc35 	bl	8005052 <__retarget_lock_release_recursive>
 80047e8:	89ab      	ldrh	r3, [r5, #12]
 80047ea:	065b      	lsls	r3, r3, #25
 80047ec:	f53f af12 	bmi.w	8004614 <_vfiprintf_r+0x4c>
 80047f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047f2:	e711      	b.n	8004618 <_vfiprintf_r+0x50>
 80047f4:	ab03      	add	r3, sp, #12
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	462a      	mov	r2, r5
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <_vfiprintf_r+0x258>)
 80047fc:	a904      	add	r1, sp, #16
 80047fe:	4630      	mov	r0, r6
 8004800:	f000 f880 	bl	8004904 <_printf_i>
 8004804:	e7e4      	b.n	80047d0 <_vfiprintf_r+0x208>
 8004806:	bf00      	nop
 8004808:	080056a4 	.word	0x080056a4
 800480c:	080056c4 	.word	0x080056c4
 8004810:	08005684 	.word	0x08005684
 8004814:	08005650 	.word	0x08005650
 8004818:	0800565a 	.word	0x0800565a
 800481c:	00000000 	.word	0x00000000
 8004820:	080045a3 	.word	0x080045a3
 8004824:	08005656 	.word	0x08005656

08004828 <_printf_common>:
 8004828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	4616      	mov	r6, r2
 800482e:	4699      	mov	r9, r3
 8004830:	688a      	ldr	r2, [r1, #8]
 8004832:	690b      	ldr	r3, [r1, #16]
 8004834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004838:	4293      	cmp	r3, r2
 800483a:	bfb8      	it	lt
 800483c:	4613      	movlt	r3, r2
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004844:	4607      	mov	r7, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b10a      	cbz	r2, 800484e <_printf_common+0x26>
 800484a:	3301      	adds	r3, #1
 800484c:	6033      	str	r3, [r6, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	0699      	lsls	r1, r3, #26
 8004852:	bf42      	ittt	mi
 8004854:	6833      	ldrmi	r3, [r6, #0]
 8004856:	3302      	addmi	r3, #2
 8004858:	6033      	strmi	r3, [r6, #0]
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	f015 0506 	ands.w	r5, r5, #6
 8004860:	d106      	bne.n	8004870 <_printf_common+0x48>
 8004862:	f104 0a19 	add.w	sl, r4, #25
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	6832      	ldr	r2, [r6, #0]
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	42ab      	cmp	r3, r5
 800486e:	dc26      	bgt.n	80048be <_printf_common+0x96>
 8004870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004874:	1e13      	subs	r3, r2, #0
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	bf18      	it	ne
 800487a:	2301      	movne	r3, #1
 800487c:	0692      	lsls	r2, r2, #26
 800487e:	d42b      	bmi.n	80048d8 <_printf_common+0xb0>
 8004880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004884:	4649      	mov	r1, r9
 8004886:	4638      	mov	r0, r7
 8004888:	47c0      	blx	r8
 800488a:	3001      	adds	r0, #1
 800488c:	d01e      	beq.n	80048cc <_printf_common+0xa4>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	68e5      	ldr	r5, [r4, #12]
 8004892:	6832      	ldr	r2, [r6, #0]
 8004894:	f003 0306 	and.w	r3, r3, #6
 8004898:	2b04      	cmp	r3, #4
 800489a:	bf08      	it	eq
 800489c:	1aad      	subeq	r5, r5, r2
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	6922      	ldr	r2, [r4, #16]
 80048a2:	bf0c      	ite	eq
 80048a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048a8:	2500      	movne	r5, #0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bfc4      	itt	gt
 80048ae:	1a9b      	subgt	r3, r3, r2
 80048b0:	18ed      	addgt	r5, r5, r3
 80048b2:	2600      	movs	r6, #0
 80048b4:	341a      	adds	r4, #26
 80048b6:	42b5      	cmp	r5, r6
 80048b8:	d11a      	bne.n	80048f0 <_printf_common+0xc8>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e008      	b.n	80048d0 <_printf_common+0xa8>
 80048be:	2301      	movs	r3, #1
 80048c0:	4652      	mov	r2, sl
 80048c2:	4649      	mov	r1, r9
 80048c4:	4638      	mov	r0, r7
 80048c6:	47c0      	blx	r8
 80048c8:	3001      	adds	r0, #1
 80048ca:	d103      	bne.n	80048d4 <_printf_common+0xac>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	3501      	adds	r5, #1
 80048d6:	e7c6      	b.n	8004866 <_printf_common+0x3e>
 80048d8:	18e1      	adds	r1, r4, r3
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	2030      	movs	r0, #48	; 0x30
 80048de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e2:	4422      	add	r2, r4
 80048e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ec:	3302      	adds	r3, #2
 80048ee:	e7c7      	b.n	8004880 <_printf_common+0x58>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4622      	mov	r2, r4
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0e6      	beq.n	80048cc <_printf_common+0xa4>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7d9      	b.n	80048b6 <_printf_common+0x8e>
	...

08004904 <_printf_i>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	460c      	mov	r4, r1
 800490a:	4691      	mov	r9, r2
 800490c:	7e27      	ldrb	r7, [r4, #24]
 800490e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004910:	2f78      	cmp	r7, #120	; 0x78
 8004912:	4680      	mov	r8, r0
 8004914:	469a      	mov	sl, r3
 8004916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800491a:	d807      	bhi.n	800492c <_printf_i+0x28>
 800491c:	2f62      	cmp	r7, #98	; 0x62
 800491e:	d80a      	bhi.n	8004936 <_printf_i+0x32>
 8004920:	2f00      	cmp	r7, #0
 8004922:	f000 80d8 	beq.w	8004ad6 <_printf_i+0x1d2>
 8004926:	2f58      	cmp	r7, #88	; 0x58
 8004928:	f000 80a3 	beq.w	8004a72 <_printf_i+0x16e>
 800492c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004934:	e03a      	b.n	80049ac <_printf_i+0xa8>
 8004936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800493a:	2b15      	cmp	r3, #21
 800493c:	d8f6      	bhi.n	800492c <_printf_i+0x28>
 800493e:	a001      	add	r0, pc, #4	; (adr r0, 8004944 <_printf_i+0x40>)
 8004940:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004944:	0800499d 	.word	0x0800499d
 8004948:	080049b1 	.word	0x080049b1
 800494c:	0800492d 	.word	0x0800492d
 8004950:	0800492d 	.word	0x0800492d
 8004954:	0800492d 	.word	0x0800492d
 8004958:	0800492d 	.word	0x0800492d
 800495c:	080049b1 	.word	0x080049b1
 8004960:	0800492d 	.word	0x0800492d
 8004964:	0800492d 	.word	0x0800492d
 8004968:	0800492d 	.word	0x0800492d
 800496c:	0800492d 	.word	0x0800492d
 8004970:	08004abd 	.word	0x08004abd
 8004974:	080049e1 	.word	0x080049e1
 8004978:	08004a9f 	.word	0x08004a9f
 800497c:	0800492d 	.word	0x0800492d
 8004980:	0800492d 	.word	0x0800492d
 8004984:	08004adf 	.word	0x08004adf
 8004988:	0800492d 	.word	0x0800492d
 800498c:	080049e1 	.word	0x080049e1
 8004990:	0800492d 	.word	0x0800492d
 8004994:	0800492d 	.word	0x0800492d
 8004998:	08004aa7 	.word	0x08004aa7
 800499c:	680b      	ldr	r3, [r1, #0]
 800499e:	1d1a      	adds	r2, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	600a      	str	r2, [r1, #0]
 80049a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0a3      	b.n	8004af8 <_printf_i+0x1f4>
 80049b0:	6825      	ldr	r5, [r4, #0]
 80049b2:	6808      	ldr	r0, [r1, #0]
 80049b4:	062e      	lsls	r6, r5, #24
 80049b6:	f100 0304 	add.w	r3, r0, #4
 80049ba:	d50a      	bpl.n	80049d2 <_printf_i+0xce>
 80049bc:	6805      	ldr	r5, [r0, #0]
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	da03      	bge.n	80049cc <_printf_i+0xc8>
 80049c4:	232d      	movs	r3, #45	; 0x2d
 80049c6:	426d      	negs	r5, r5
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049cc:	485e      	ldr	r0, [pc, #376]	; (8004b48 <_printf_i+0x244>)
 80049ce:	230a      	movs	r3, #10
 80049d0:	e019      	b.n	8004a06 <_printf_i+0x102>
 80049d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049d6:	6805      	ldr	r5, [r0, #0]
 80049d8:	600b      	str	r3, [r1, #0]
 80049da:	bf18      	it	ne
 80049dc:	b22d      	sxthne	r5, r5
 80049de:	e7ef      	b.n	80049c0 <_printf_i+0xbc>
 80049e0:	680b      	ldr	r3, [r1, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	1d18      	adds	r0, r3, #4
 80049e6:	6008      	str	r0, [r1, #0]
 80049e8:	0628      	lsls	r0, r5, #24
 80049ea:	d501      	bpl.n	80049f0 <_printf_i+0xec>
 80049ec:	681d      	ldr	r5, [r3, #0]
 80049ee:	e002      	b.n	80049f6 <_printf_i+0xf2>
 80049f0:	0669      	lsls	r1, r5, #25
 80049f2:	d5fb      	bpl.n	80049ec <_printf_i+0xe8>
 80049f4:	881d      	ldrh	r5, [r3, #0]
 80049f6:	4854      	ldr	r0, [pc, #336]	; (8004b48 <_printf_i+0x244>)
 80049f8:	2f6f      	cmp	r7, #111	; 0x6f
 80049fa:	bf0c      	ite	eq
 80049fc:	2308      	moveq	r3, #8
 80049fe:	230a      	movne	r3, #10
 8004a00:	2100      	movs	r1, #0
 8004a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a06:	6866      	ldr	r6, [r4, #4]
 8004a08:	60a6      	str	r6, [r4, #8]
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	bfa2      	ittt	ge
 8004a0e:	6821      	ldrge	r1, [r4, #0]
 8004a10:	f021 0104 	bicge.w	r1, r1, #4
 8004a14:	6021      	strge	r1, [r4, #0]
 8004a16:	b90d      	cbnz	r5, 8004a1c <_printf_i+0x118>
 8004a18:	2e00      	cmp	r6, #0
 8004a1a:	d04d      	beq.n	8004ab8 <_printf_i+0x1b4>
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a22:	fb03 5711 	mls	r7, r3, r1, r5
 8004a26:	5dc7      	ldrb	r7, [r0, r7]
 8004a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a2c:	462f      	mov	r7, r5
 8004a2e:	42bb      	cmp	r3, r7
 8004a30:	460d      	mov	r5, r1
 8004a32:	d9f4      	bls.n	8004a1e <_printf_i+0x11a>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d10b      	bne.n	8004a50 <_printf_i+0x14c>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	07df      	lsls	r7, r3, #31
 8004a3c:	d508      	bpl.n	8004a50 <_printf_i+0x14c>
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	6861      	ldr	r1, [r4, #4]
 8004a42:	4299      	cmp	r1, r3
 8004a44:	bfde      	ittt	le
 8004a46:	2330      	movle	r3, #48	; 0x30
 8004a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a4c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004a50:	1b92      	subs	r2, r2, r6
 8004a52:	6122      	str	r2, [r4, #16]
 8004a54:	f8cd a000 	str.w	sl, [sp]
 8004a58:	464b      	mov	r3, r9
 8004a5a:	aa03      	add	r2, sp, #12
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f7ff fee2 	bl	8004828 <_printf_common>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d14c      	bne.n	8004b02 <_printf_i+0x1fe>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a6c:	b004      	add	sp, #16
 8004a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a72:	4835      	ldr	r0, [pc, #212]	; (8004b48 <_printf_i+0x244>)
 8004a74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	680e      	ldr	r6, [r1, #0]
 8004a7c:	061f      	lsls	r7, r3, #24
 8004a7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a82:	600e      	str	r6, [r1, #0]
 8004a84:	d514      	bpl.n	8004ab0 <_printf_i+0x1ac>
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	bf44      	itt	mi
 8004a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a8e:	6023      	strmi	r3, [r4, #0]
 8004a90:	b91d      	cbnz	r5, 8004a9a <_printf_i+0x196>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	f023 0320 	bic.w	r3, r3, #32
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	e7b0      	b.n	8004a00 <_printf_i+0xfc>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f043 0320 	orr.w	r3, r3, #32
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	2378      	movs	r3, #120	; 0x78
 8004aa8:	4828      	ldr	r0, [pc, #160]	; (8004b4c <_printf_i+0x248>)
 8004aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aae:	e7e3      	b.n	8004a78 <_printf_i+0x174>
 8004ab0:	065e      	lsls	r6, r3, #25
 8004ab2:	bf48      	it	mi
 8004ab4:	b2ad      	uxthmi	r5, r5
 8004ab6:	e7e6      	b.n	8004a86 <_printf_i+0x182>
 8004ab8:	4616      	mov	r6, r2
 8004aba:	e7bb      	b.n	8004a34 <_printf_i+0x130>
 8004abc:	680b      	ldr	r3, [r1, #0]
 8004abe:	6826      	ldr	r6, [r4, #0]
 8004ac0:	6960      	ldr	r0, [r4, #20]
 8004ac2:	1d1d      	adds	r5, r3, #4
 8004ac4:	600d      	str	r5, [r1, #0]
 8004ac6:	0635      	lsls	r5, r6, #24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0x1cc>
 8004acc:	6018      	str	r0, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0x1d2>
 8004ad0:	0671      	lsls	r1, r6, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0x1c8>
 8004ad4:	8018      	strh	r0, [r3, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	4616      	mov	r6, r2
 8004adc:	e7ba      	b.n	8004a54 <_printf_i+0x150>
 8004ade:	680b      	ldr	r3, [r1, #0]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	600a      	str	r2, [r1, #0]
 8004ae4:	681e      	ldr	r6, [r3, #0]
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7fb fb70 	bl	80001d0 <memchr>
 8004af0:	b108      	cbz	r0, 8004af6 <_printf_i+0x1f2>
 8004af2:	1b80      	subs	r0, r0, r6
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	2300      	movs	r3, #0
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	e7a8      	b.n	8004a54 <_printf_i+0x150>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	4632      	mov	r2, r6
 8004b06:	4649      	mov	r1, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	47d0      	blx	sl
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d0ab      	beq.n	8004a68 <_printf_i+0x164>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	d413      	bmi.n	8004b3e <_printf_i+0x23a>
 8004b16:	68e0      	ldr	r0, [r4, #12]
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	4298      	cmp	r0, r3
 8004b1c:	bfb8      	it	lt
 8004b1e:	4618      	movlt	r0, r3
 8004b20:	e7a4      	b.n	8004a6c <_printf_i+0x168>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d09b      	beq.n	8004a68 <_printf_i+0x164>
 8004b30:	3501      	adds	r5, #1
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	9903      	ldr	r1, [sp, #12]
 8004b36:	1a5b      	subs	r3, r3, r1
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dcf2      	bgt.n	8004b22 <_printf_i+0x21e>
 8004b3c:	e7eb      	b.n	8004b16 <_printf_i+0x212>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	f104 0619 	add.w	r6, r4, #25
 8004b44:	e7f5      	b.n	8004b32 <_printf_i+0x22e>
 8004b46:	bf00      	nop
 8004b48:	08005661 	.word	0x08005661
 8004b4c:	08005672 	.word	0x08005672

08004b50 <__swbuf_r>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	460e      	mov	r6, r1
 8004b54:	4614      	mov	r4, r2
 8004b56:	4605      	mov	r5, r0
 8004b58:	b118      	cbz	r0, 8004b62 <__swbuf_r+0x12>
 8004b5a:	6983      	ldr	r3, [r0, #24]
 8004b5c:	b90b      	cbnz	r3, 8004b62 <__swbuf_r+0x12>
 8004b5e:	f000 f9d9 	bl	8004f14 <__sinit>
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <__swbuf_r+0x98>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d12b      	bne.n	8004bc0 <__swbuf_r+0x70>
 8004b68:	686c      	ldr	r4, [r5, #4]
 8004b6a:	69a3      	ldr	r3, [r4, #24]
 8004b6c:	60a3      	str	r3, [r4, #8]
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	071a      	lsls	r2, r3, #28
 8004b72:	d52f      	bpl.n	8004bd4 <__swbuf_r+0x84>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	b36b      	cbz	r3, 8004bd4 <__swbuf_r+0x84>
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1ac0      	subs	r0, r0, r3
 8004b7e:	6963      	ldr	r3, [r4, #20]
 8004b80:	b2f6      	uxtb	r6, r6
 8004b82:	4283      	cmp	r3, r0
 8004b84:	4637      	mov	r7, r6
 8004b86:	dc04      	bgt.n	8004b92 <__swbuf_r+0x42>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f92e 	bl	8004dec <_fflush_r>
 8004b90:	bb30      	cbnz	r0, 8004be0 <__swbuf_r+0x90>
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	60a3      	str	r3, [r4, #8]
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	6022      	str	r2, [r4, #0]
 8004b9e:	701e      	strb	r6, [r3, #0]
 8004ba0:	6963      	ldr	r3, [r4, #20]
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	4283      	cmp	r3, r0
 8004ba6:	d004      	beq.n	8004bb2 <__swbuf_r+0x62>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	07db      	lsls	r3, r3, #31
 8004bac:	d506      	bpl.n	8004bbc <__swbuf_r+0x6c>
 8004bae:	2e0a      	cmp	r6, #10
 8004bb0:	d104      	bne.n	8004bbc <__swbuf_r+0x6c>
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f919 	bl	8004dec <_fflush_r>
 8004bba:	b988      	cbnz	r0, 8004be0 <__swbuf_r+0x90>
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <__swbuf_r+0x9c>)
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d101      	bne.n	8004bca <__swbuf_r+0x7a>
 8004bc6:	68ac      	ldr	r4, [r5, #8]
 8004bc8:	e7cf      	b.n	8004b6a <__swbuf_r+0x1a>
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <__swbuf_r+0xa0>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	bf08      	it	eq
 8004bd0:	68ec      	ldreq	r4, [r5, #12]
 8004bd2:	e7ca      	b.n	8004b6a <__swbuf_r+0x1a>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 f80c 	bl	8004bf4 <__swsetup_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d0cb      	beq.n	8004b78 <__swbuf_r+0x28>
 8004be0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004be4:	e7ea      	b.n	8004bbc <__swbuf_r+0x6c>
 8004be6:	bf00      	nop
 8004be8:	080056a4 	.word	0x080056a4
 8004bec:	080056c4 	.word	0x080056c4
 8004bf0:	08005684 	.word	0x08005684

08004bf4 <__swsetup_r>:
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <__swsetup_r+0xcc>)
 8004bf6:	b570      	push	{r4, r5, r6, lr}
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	b125      	cbz	r5, 8004c0a <__swsetup_r+0x16>
 8004c00:	69ab      	ldr	r3, [r5, #24]
 8004c02:	b913      	cbnz	r3, 8004c0a <__swsetup_r+0x16>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f985 	bl	8004f14 <__sinit>
 8004c0a:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <__swsetup_r+0xd0>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d10f      	bne.n	8004c30 <__swsetup_r+0x3c>
 8004c10:	686c      	ldr	r4, [r5, #4]
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c18:	0719      	lsls	r1, r3, #28
 8004c1a:	d42c      	bmi.n	8004c76 <__swsetup_r+0x82>
 8004c1c:	06dd      	lsls	r5, r3, #27
 8004c1e:	d411      	bmi.n	8004c44 <__swsetup_r+0x50>
 8004c20:	2309      	movs	r3, #9
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c2e:	e03e      	b.n	8004cae <__swsetup_r+0xba>
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <__swsetup_r+0xd4>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d101      	bne.n	8004c3a <__swsetup_r+0x46>
 8004c36:	68ac      	ldr	r4, [r5, #8]
 8004c38:	e7eb      	b.n	8004c12 <__swsetup_r+0x1e>
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <__swsetup_r+0xd8>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	bf08      	it	eq
 8004c40:	68ec      	ldreq	r4, [r5, #12]
 8004c42:	e7e6      	b.n	8004c12 <__swsetup_r+0x1e>
 8004c44:	0758      	lsls	r0, r3, #29
 8004c46:	d512      	bpl.n	8004c6e <__swsetup_r+0x7a>
 8004c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4a:	b141      	cbz	r1, 8004c5e <__swsetup_r+0x6a>
 8004c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d002      	beq.n	8004c5a <__swsetup_r+0x66>
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 fa61 	bl	800511c <_free_r>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0308 	orr.w	r3, r3, #8
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	b94b      	cbnz	r3, 8004c8e <__swsetup_r+0x9a>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d003      	beq.n	8004c8e <__swsetup_r+0x9a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 fa07 	bl	800509c <__smakebuf_r>
 8004c8e:	89a0      	ldrh	r0, [r4, #12]
 8004c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c94:	f010 0301 	ands.w	r3, r0, #1
 8004c98:	d00a      	beq.n	8004cb0 <__swsetup_r+0xbc>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60a3      	str	r3, [r4, #8]
 8004c9e:	6963      	ldr	r3, [r4, #20]
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	61a3      	str	r3, [r4, #24]
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	b943      	cbnz	r3, 8004cba <__swsetup_r+0xc6>
 8004ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cac:	d1ba      	bne.n	8004c24 <__swsetup_r+0x30>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	0781      	lsls	r1, r0, #30
 8004cb2:	bf58      	it	pl
 8004cb4:	6963      	ldrpl	r3, [r4, #20]
 8004cb6:	60a3      	str	r3, [r4, #8]
 8004cb8:	e7f4      	b.n	8004ca4 <__swsetup_r+0xb0>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e7f7      	b.n	8004cae <__swsetup_r+0xba>
 8004cbe:	bf00      	nop
 8004cc0:	2000000c 	.word	0x2000000c
 8004cc4:	080056a4 	.word	0x080056a4
 8004cc8:	080056c4 	.word	0x080056c4
 8004ccc:	08005684 	.word	0x08005684

08004cd0 <abort>:
 8004cd0:	b508      	push	{r3, lr}
 8004cd2:	2006      	movs	r0, #6
 8004cd4:	f000 fb04 	bl	80052e0 <raise>
 8004cd8:	2001      	movs	r0, #1
 8004cda:	f7fc f851 	bl	8000d80 <_exit>
	...

08004ce0 <__sflush_r>:
 8004ce0:	898a      	ldrh	r2, [r1, #12]
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	0710      	lsls	r0, r2, #28
 8004cea:	460c      	mov	r4, r1
 8004cec:	d458      	bmi.n	8004da0 <__sflush_r+0xc0>
 8004cee:	684b      	ldr	r3, [r1, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc05      	bgt.n	8004d00 <__sflush_r+0x20>
 8004cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dc02      	bgt.n	8004d00 <__sflush_r+0x20>
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d0f9      	beq.n	8004cfa <__sflush_r+0x1a>
 8004d06:	2300      	movs	r3, #0
 8004d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d0c:	682f      	ldr	r7, [r5, #0]
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	d032      	beq.n	8004d78 <__sflush_r+0x98>
 8004d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	075a      	lsls	r2, r3, #29
 8004d18:	d505      	bpl.n	8004d26 <__sflush_r+0x46>
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	1ac0      	subs	r0, r0, r3
 8004d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d20:	b10b      	cbz	r3, 8004d26 <__sflush_r+0x46>
 8004d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d24:	1ac0      	subs	r0, r0, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b0      	blx	r6
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	d106      	bne.n	8004d46 <__sflush_r+0x66>
 8004d38:	6829      	ldr	r1, [r5, #0]
 8004d3a:	291d      	cmp	r1, #29
 8004d3c:	d82c      	bhi.n	8004d98 <__sflush_r+0xb8>
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <__sflush_r+0x108>)
 8004d40:	40ca      	lsrs	r2, r1
 8004d42:	07d6      	lsls	r6, r2, #31
 8004d44:	d528      	bpl.n	8004d98 <__sflush_r+0xb8>
 8004d46:	2200      	movs	r2, #0
 8004d48:	6062      	str	r2, [r4, #4]
 8004d4a:	04d9      	lsls	r1, r3, #19
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	6022      	str	r2, [r4, #0]
 8004d50:	d504      	bpl.n	8004d5c <__sflush_r+0x7c>
 8004d52:	1c42      	adds	r2, r0, #1
 8004d54:	d101      	bne.n	8004d5a <__sflush_r+0x7a>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	b903      	cbnz	r3, 8004d5c <__sflush_r+0x7c>
 8004d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5e:	602f      	str	r7, [r5, #0]
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d0ca      	beq.n	8004cfa <__sflush_r+0x1a>
 8004d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d68:	4299      	cmp	r1, r3
 8004d6a:	d002      	beq.n	8004d72 <__sflush_r+0x92>
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f9d5 	bl	800511c <_free_r>
 8004d72:	2000      	movs	r0, #0
 8004d74:	6360      	str	r0, [r4, #52]	; 0x34
 8004d76:	e7c1      	b.n	8004cfc <__sflush_r+0x1c>
 8004d78:	6a21      	ldr	r1, [r4, #32]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	1c41      	adds	r1, r0, #1
 8004d82:	d1c7      	bne.n	8004d14 <__sflush_r+0x34>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0c4      	beq.n	8004d14 <__sflush_r+0x34>
 8004d8a:	2b1d      	cmp	r3, #29
 8004d8c:	d001      	beq.n	8004d92 <__sflush_r+0xb2>
 8004d8e:	2b16      	cmp	r3, #22
 8004d90:	d101      	bne.n	8004d96 <__sflush_r+0xb6>
 8004d92:	602f      	str	r7, [r5, #0]
 8004d94:	e7b1      	b.n	8004cfa <__sflush_r+0x1a>
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	e7ad      	b.n	8004cfc <__sflush_r+0x1c>
 8004da0:	690f      	ldr	r7, [r1, #16]
 8004da2:	2f00      	cmp	r7, #0
 8004da4:	d0a9      	beq.n	8004cfa <__sflush_r+0x1a>
 8004da6:	0793      	lsls	r3, r2, #30
 8004da8:	680e      	ldr	r6, [r1, #0]
 8004daa:	bf08      	it	eq
 8004dac:	694b      	ldreq	r3, [r1, #20]
 8004dae:	600f      	str	r7, [r1, #0]
 8004db0:	bf18      	it	ne
 8004db2:	2300      	movne	r3, #0
 8004db4:	eba6 0807 	sub.w	r8, r6, r7
 8004db8:	608b      	str	r3, [r1, #8]
 8004dba:	f1b8 0f00 	cmp.w	r8, #0
 8004dbe:	dd9c      	ble.n	8004cfa <__sflush_r+0x1a>
 8004dc0:	6a21      	ldr	r1, [r4, #32]
 8004dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dc4:	4643      	mov	r3, r8
 8004dc6:	463a      	mov	r2, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	dc06      	bgt.n	8004dde <__sflush_r+0xfe>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ddc:	e78e      	b.n	8004cfc <__sflush_r+0x1c>
 8004dde:	4407      	add	r7, r0
 8004de0:	eba8 0800 	sub.w	r8, r8, r0
 8004de4:	e7e9      	b.n	8004dba <__sflush_r+0xda>
 8004de6:	bf00      	nop
 8004de8:	20400001 	.word	0x20400001

08004dec <_fflush_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	690b      	ldr	r3, [r1, #16]
 8004df0:	4605      	mov	r5, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b913      	cbnz	r3, 8004dfc <_fflush_r+0x10>
 8004df6:	2500      	movs	r5, #0
 8004df8:	4628      	mov	r0, r5
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	b118      	cbz	r0, 8004e06 <_fflush_r+0x1a>
 8004dfe:	6983      	ldr	r3, [r0, #24]
 8004e00:	b90b      	cbnz	r3, 8004e06 <_fflush_r+0x1a>
 8004e02:	f000 f887 	bl	8004f14 <__sinit>
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <_fflush_r+0x6c>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d11b      	bne.n	8004e44 <_fflush_r+0x58>
 8004e0c:	686c      	ldr	r4, [r5, #4]
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ef      	beq.n	8004df6 <_fflush_r+0xa>
 8004e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e18:	07d0      	lsls	r0, r2, #31
 8004e1a:	d404      	bmi.n	8004e26 <_fflush_r+0x3a>
 8004e1c:	0599      	lsls	r1, r3, #22
 8004e1e:	d402      	bmi.n	8004e26 <_fflush_r+0x3a>
 8004e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e22:	f000 f915 	bl	8005050 <__retarget_lock_acquire_recursive>
 8004e26:	4628      	mov	r0, r5
 8004e28:	4621      	mov	r1, r4
 8004e2a:	f7ff ff59 	bl	8004ce0 <__sflush_r>
 8004e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e30:	07da      	lsls	r2, r3, #31
 8004e32:	4605      	mov	r5, r0
 8004e34:	d4e0      	bmi.n	8004df8 <_fflush_r+0xc>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	059b      	lsls	r3, r3, #22
 8004e3a:	d4dd      	bmi.n	8004df8 <_fflush_r+0xc>
 8004e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3e:	f000 f908 	bl	8005052 <__retarget_lock_release_recursive>
 8004e42:	e7d9      	b.n	8004df8 <_fflush_r+0xc>
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <_fflush_r+0x70>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d101      	bne.n	8004e4e <_fflush_r+0x62>
 8004e4a:	68ac      	ldr	r4, [r5, #8]
 8004e4c:	e7df      	b.n	8004e0e <_fflush_r+0x22>
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <_fflush_r+0x74>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	bf08      	it	eq
 8004e54:	68ec      	ldreq	r4, [r5, #12]
 8004e56:	e7da      	b.n	8004e0e <_fflush_r+0x22>
 8004e58:	080056a4 	.word	0x080056a4
 8004e5c:	080056c4 	.word	0x080056c4
 8004e60:	08005684 	.word	0x08005684

08004e64 <std>:
 8004e64:	2300      	movs	r3, #0
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e72:	6083      	str	r3, [r0, #8]
 8004e74:	8181      	strh	r1, [r0, #12]
 8004e76:	6643      	str	r3, [r0, #100]	; 0x64
 8004e78:	81c2      	strh	r2, [r0, #14]
 8004e7a:	6183      	str	r3, [r0, #24]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	2208      	movs	r2, #8
 8004e80:	305c      	adds	r0, #92	; 0x5c
 8004e82:	f7ff fb6f 	bl	8004564 <memset>
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x38>)
 8004e88:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x3c>)
 8004e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x40>)
 8004e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x44>)
 8004e94:	6224      	str	r4, [r4, #32]
 8004e96:	6323      	str	r3, [r4, #48]	; 0x30
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08005319 	.word	0x08005319
 8004ea0:	0800533b 	.word	0x0800533b
 8004ea4:	08005373 	.word	0x08005373
 8004ea8:	08005397 	.word	0x08005397

08004eac <_cleanup_r>:
 8004eac:	4901      	ldr	r1, [pc, #4]	; (8004eb4 <_cleanup_r+0x8>)
 8004eae:	f000 b8af 	b.w	8005010 <_fwalk_reent>
 8004eb2:	bf00      	nop
 8004eb4:	08004ded 	.word	0x08004ded

08004eb8 <__sfmoreglue>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	1e4a      	subs	r2, r1, #1
 8004ebc:	2568      	movs	r5, #104	; 0x68
 8004ebe:	4355      	muls	r5, r2
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ec6:	f000 f979 	bl	80051bc <_malloc_r>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	b140      	cbz	r0, 8004ee0 <__sfmoreglue+0x28>
 8004ece:	2100      	movs	r1, #0
 8004ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	60a0      	str	r0, [r4, #8]
 8004ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004edc:	f7ff fb42 	bl	8004564 <memset>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__sfp_lock_acquire>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sfp_lock_acquire+0x8>)
 8004ee6:	f000 b8b3 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000154 	.word	0x20000154

08004ef0 <__sfp_lock_release>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__sfp_lock_release+0x8>)
 8004ef2:	f000 b8ae 	b.w	8005052 <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000154 	.word	0x20000154

08004efc <__sinit_lock_acquire>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__sinit_lock_acquire+0x8>)
 8004efe:	f000 b8a7 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000014f 	.word	0x2000014f

08004f08 <__sinit_lock_release>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__sinit_lock_release+0x8>)
 8004f0a:	f000 b8a2 	b.w	8005052 <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000014f 	.word	0x2000014f

08004f14 <__sinit>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	f7ff fff0 	bl	8004efc <__sinit_lock_acquire>
 8004f1c:	69a3      	ldr	r3, [r4, #24]
 8004f1e:	b11b      	cbz	r3, 8004f28 <__sinit+0x14>
 8004f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f24:	f7ff bff0 	b.w	8004f08 <__sinit_lock_release>
 8004f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <__sinit+0x68>)
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <__sinit+0x6c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	bf04      	itt	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	61a3      	streq	r3, [r4, #24]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 f820 	bl	8004f84 <__sfp>
 8004f44:	6060      	str	r0, [r4, #4]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f81c 	bl	8004f84 <__sfp>
 8004f4c:	60a0      	str	r0, [r4, #8]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f818 	bl	8004f84 <__sfp>
 8004f54:	2200      	movs	r2, #0
 8004f56:	60e0      	str	r0, [r4, #12]
 8004f58:	2104      	movs	r1, #4
 8004f5a:	6860      	ldr	r0, [r4, #4]
 8004f5c:	f7ff ff82 	bl	8004e64 <std>
 8004f60:	68a0      	ldr	r0, [r4, #8]
 8004f62:	2201      	movs	r2, #1
 8004f64:	2109      	movs	r1, #9
 8004f66:	f7ff ff7d 	bl	8004e64 <std>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	2112      	movs	r1, #18
 8004f70:	f7ff ff78 	bl	8004e64 <std>
 8004f74:	2301      	movs	r3, #1
 8004f76:	61a3      	str	r3, [r4, #24]
 8004f78:	e7d2      	b.n	8004f20 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	0800564c 	.word	0x0800564c
 8004f80:	08004ead 	.word	0x08004ead

08004f84 <__sfp>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	4607      	mov	r7, r0
 8004f88:	f7ff ffac 	bl	8004ee4 <__sfp_lock_acquire>
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <__sfp+0x84>)
 8004f8e:	681e      	ldr	r6, [r3, #0]
 8004f90:	69b3      	ldr	r3, [r6, #24]
 8004f92:	b913      	cbnz	r3, 8004f9a <__sfp+0x16>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff ffbd 	bl	8004f14 <__sinit>
 8004f9a:	3648      	adds	r6, #72	; 0x48
 8004f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	d503      	bpl.n	8004fac <__sfp+0x28>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	b30b      	cbz	r3, 8004fec <__sfp+0x68>
 8004fa8:	6836      	ldr	r6, [r6, #0]
 8004faa:	e7f7      	b.n	8004f9c <__sfp+0x18>
 8004fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb0:	b9d5      	cbnz	r5, 8004fe8 <__sfp+0x64>
 8004fb2:	4b16      	ldr	r3, [pc, #88]	; (800500c <__sfp+0x88>)
 8004fb4:	60e3      	str	r3, [r4, #12]
 8004fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fba:	6665      	str	r5, [r4, #100]	; 0x64
 8004fbc:	f000 f847 	bl	800504e <__retarget_lock_init_recursive>
 8004fc0:	f7ff ff96 	bl	8004ef0 <__sfp_lock_release>
 8004fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fcc:	6025      	str	r5, [r4, #0]
 8004fce:	61a5      	str	r5, [r4, #24]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fd8:	f7ff fac4 	bl	8004564 <memset>
 8004fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe8:	3468      	adds	r4, #104	; 0x68
 8004fea:	e7d9      	b.n	8004fa0 <__sfp+0x1c>
 8004fec:	2104      	movs	r1, #4
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7ff ff62 	bl	8004eb8 <__sfmoreglue>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1d5      	bne.n	8004fa8 <__sfp+0x24>
 8004ffc:	f7ff ff78 	bl	8004ef0 <__sfp_lock_release>
 8005000:	230c      	movs	r3, #12
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	e7ee      	b.n	8004fe4 <__sfp+0x60>
 8005006:	bf00      	nop
 8005008:	0800564c 	.word	0x0800564c
 800500c:	ffff0001 	.word	0xffff0001

08005010 <_fwalk_reent>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	4606      	mov	r6, r0
 8005016:	4688      	mov	r8, r1
 8005018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800501c:	2700      	movs	r7, #0
 800501e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005022:	f1b9 0901 	subs.w	r9, r9, #1
 8005026:	d505      	bpl.n	8005034 <_fwalk_reent+0x24>
 8005028:	6824      	ldr	r4, [r4, #0]
 800502a:	2c00      	cmp	r4, #0
 800502c:	d1f7      	bne.n	800501e <_fwalk_reent+0xe>
 800502e:	4638      	mov	r0, r7
 8005030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005034:	89ab      	ldrh	r3, [r5, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d907      	bls.n	800504a <_fwalk_reent+0x3a>
 800503a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800503e:	3301      	adds	r3, #1
 8005040:	d003      	beq.n	800504a <_fwalk_reent+0x3a>
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	47c0      	blx	r8
 8005048:	4307      	orrs	r7, r0
 800504a:	3568      	adds	r5, #104	; 0x68
 800504c:	e7e9      	b.n	8005022 <_fwalk_reent+0x12>

0800504e <__retarget_lock_init_recursive>:
 800504e:	4770      	bx	lr

08005050 <__retarget_lock_acquire_recursive>:
 8005050:	4770      	bx	lr

08005052 <__retarget_lock_release_recursive>:
 8005052:	4770      	bx	lr

08005054 <__swhatbuf_r>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	460e      	mov	r6, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	2900      	cmp	r1, #0
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	da07      	bge.n	8005076 <__swhatbuf_r+0x22>
 8005066:	2300      	movs	r3, #0
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	89b3      	ldrh	r3, [r6, #12]
 800506c:	061a      	lsls	r2, r3, #24
 800506e:	d410      	bmi.n	8005092 <__swhatbuf_r+0x3e>
 8005070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005074:	e00e      	b.n	8005094 <__swhatbuf_r+0x40>
 8005076:	466a      	mov	r2, sp
 8005078:	f000 f9b4 	bl	80053e4 <_fstat_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	dbf2      	blt.n	8005066 <__swhatbuf_r+0x12>
 8005080:	9a01      	ldr	r2, [sp, #4]
 8005082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800508a:	425a      	negs	r2, r3
 800508c:	415a      	adcs	r2, r3
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	e7ee      	b.n	8005070 <__swhatbuf_r+0x1c>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	2000      	movs	r0, #0
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	b016      	add	sp, #88	; 0x58
 800509a:	bd70      	pop	{r4, r5, r6, pc}

0800509c <__smakebuf_r>:
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a0:	079d      	lsls	r5, r3, #30
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	d507      	bpl.n	80050b8 <__smakebuf_r+0x1c>
 80050a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2301      	movs	r3, #1
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	b002      	add	sp, #8
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	ab01      	add	r3, sp, #4
 80050ba:	466a      	mov	r2, sp
 80050bc:	f7ff ffca 	bl	8005054 <__swhatbuf_r>
 80050c0:	9900      	ldr	r1, [sp, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f879 	bl	80051bc <_malloc_r>
 80050ca:	b948      	cbnz	r0, 80050e0 <__smakebuf_r+0x44>
 80050cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d4ef      	bmi.n	80050b4 <__smakebuf_r+0x18>
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7e3      	b.n	80050a8 <__smakebuf_r+0xc>
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__smakebuf_r+0x7c>)
 80050e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6120      	str	r0, [r4, #16]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x74>
 80050f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f983 	bl	8005408 <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x74>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a0      	ldrh	r0, [r4, #12]
 8005112:	4305      	orrs	r5, r0
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cd      	b.n	80050b4 <__smakebuf_r+0x18>
 8005118:	08004ead 	.word	0x08004ead

0800511c <_free_r>:
 800511c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800511e:	2900      	cmp	r1, #0
 8005120:	d048      	beq.n	80051b4 <_free_r+0x98>
 8005122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005126:	9001      	str	r0, [sp, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f1a1 0404 	sub.w	r4, r1, #4
 800512e:	bfb8      	it	lt
 8005130:	18e4      	addlt	r4, r4, r3
 8005132:	f000 f98b 	bl	800544c <__malloc_lock>
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <_free_r+0x9c>)
 8005138:	9801      	ldr	r0, [sp, #4]
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	4615      	mov	r5, r2
 800513e:	b933      	cbnz	r3, 800514e <_free_r+0x32>
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	6014      	str	r4, [r2, #0]
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800514a:	f000 b985 	b.w	8005458 <__malloc_unlock>
 800514e:	42a3      	cmp	r3, r4
 8005150:	d90b      	bls.n	800516a <_free_r+0x4e>
 8005152:	6821      	ldr	r1, [r4, #0]
 8005154:	1862      	adds	r2, r4, r1
 8005156:	4293      	cmp	r3, r2
 8005158:	bf04      	itt	eq
 800515a:	681a      	ldreq	r2, [r3, #0]
 800515c:	685b      	ldreq	r3, [r3, #4]
 800515e:	6063      	str	r3, [r4, #4]
 8005160:	bf04      	itt	eq
 8005162:	1852      	addeq	r2, r2, r1
 8005164:	6022      	streq	r2, [r4, #0]
 8005166:	602c      	str	r4, [r5, #0]
 8005168:	e7ec      	b.n	8005144 <_free_r+0x28>
 800516a:	461a      	mov	r2, r3
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b10b      	cbz	r3, 8005174 <_free_r+0x58>
 8005170:	42a3      	cmp	r3, r4
 8005172:	d9fa      	bls.n	800516a <_free_r+0x4e>
 8005174:	6811      	ldr	r1, [r2, #0]
 8005176:	1855      	adds	r5, r2, r1
 8005178:	42a5      	cmp	r5, r4
 800517a:	d10b      	bne.n	8005194 <_free_r+0x78>
 800517c:	6824      	ldr	r4, [r4, #0]
 800517e:	4421      	add	r1, r4
 8005180:	1854      	adds	r4, r2, r1
 8005182:	42a3      	cmp	r3, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	d1dd      	bne.n	8005144 <_free_r+0x28>
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	4421      	add	r1, r4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	e7d7      	b.n	8005144 <_free_r+0x28>
 8005194:	d902      	bls.n	800519c <_free_r+0x80>
 8005196:	230c      	movs	r3, #12
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	e7d3      	b.n	8005144 <_free_r+0x28>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf04      	itt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	bf04      	itt	eq
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	6054      	str	r4, [r2, #4]
 80051b2:	e7c7      	b.n	8005144 <_free_r+0x28>
 80051b4:	b003      	add	sp, #12
 80051b6:	bd30      	pop	{r4, r5, pc}
 80051b8:	20000090 	.word	0x20000090

080051bc <_malloc_r>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	1ccd      	adds	r5, r1, #3
 80051c0:	f025 0503 	bic.w	r5, r5, #3
 80051c4:	3508      	adds	r5, #8
 80051c6:	2d0c      	cmp	r5, #12
 80051c8:	bf38      	it	cc
 80051ca:	250c      	movcc	r5, #12
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	4606      	mov	r6, r0
 80051d0:	db01      	blt.n	80051d6 <_malloc_r+0x1a>
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	d903      	bls.n	80051de <_malloc_r+0x22>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	2000      	movs	r0, #0
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051de:	f000 f935 	bl	800544c <__malloc_lock>
 80051e2:	4921      	ldr	r1, [pc, #132]	; (8005268 <_malloc_r+0xac>)
 80051e4:	680a      	ldr	r2, [r1, #0]
 80051e6:	4614      	mov	r4, r2
 80051e8:	b99c      	cbnz	r4, 8005212 <_malloc_r+0x56>
 80051ea:	4f20      	ldr	r7, [pc, #128]	; (800526c <_malloc_r+0xb0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b923      	cbnz	r3, 80051fa <_malloc_r+0x3e>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f83c 	bl	8005270 <_sbrk_r>
 80051f8:	6038      	str	r0, [r7, #0]
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 f837 	bl	8005270 <_sbrk_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d123      	bne.n	800524e <_malloc_r+0x92>
 8005206:	230c      	movs	r3, #12
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	4630      	mov	r0, r6
 800520c:	f000 f924 	bl	8005458 <__malloc_unlock>
 8005210:	e7e3      	b.n	80051da <_malloc_r+0x1e>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1b5b      	subs	r3, r3, r5
 8005216:	d417      	bmi.n	8005248 <_malloc_r+0x8c>
 8005218:	2b0b      	cmp	r3, #11
 800521a:	d903      	bls.n	8005224 <_malloc_r+0x68>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	441c      	add	r4, r3
 8005220:	6025      	str	r5, [r4, #0]
 8005222:	e004      	b.n	800522e <_malloc_r+0x72>
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	42a2      	cmp	r2, r4
 8005228:	bf0c      	ite	eq
 800522a:	600b      	streq	r3, [r1, #0]
 800522c:	6053      	strne	r3, [r2, #4]
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f912 	bl	8005458 <__malloc_unlock>
 8005234:	f104 000b 	add.w	r0, r4, #11
 8005238:	1d23      	adds	r3, r4, #4
 800523a:	f020 0007 	bic.w	r0, r0, #7
 800523e:	1ac2      	subs	r2, r0, r3
 8005240:	d0cc      	beq.n	80051dc <_malloc_r+0x20>
 8005242:	1a1b      	subs	r3, r3, r0
 8005244:	50a3      	str	r3, [r4, r2]
 8005246:	e7c9      	b.n	80051dc <_malloc_r+0x20>
 8005248:	4622      	mov	r2, r4
 800524a:	6864      	ldr	r4, [r4, #4]
 800524c:	e7cc      	b.n	80051e8 <_malloc_r+0x2c>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d0e3      	beq.n	8005220 <_malloc_r+0x64>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f808 	bl	8005270 <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d1dd      	bne.n	8005220 <_malloc_r+0x64>
 8005264:	e7cf      	b.n	8005206 <_malloc_r+0x4a>
 8005266:	bf00      	nop
 8005268:	20000090 	.word	0x20000090
 800526c:	20000094 	.word	0x20000094

08005270 <_sbrk_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d06      	ldr	r5, [pc, #24]	; (800528c <_sbrk_r+0x1c>)
 8005274:	2300      	movs	r3, #0
 8005276:	4604      	mov	r4, r0
 8005278:	4608      	mov	r0, r1
 800527a:	602b      	str	r3, [r5, #0]
 800527c:	f7fb fdf8 	bl	8000e70 <_sbrk>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_sbrk_r+0x1a>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_sbrk_r+0x1a>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	20000158 	.word	0x20000158

08005290 <_raise_r>:
 8005290:	291f      	cmp	r1, #31
 8005292:	b538      	push	{r3, r4, r5, lr}
 8005294:	4604      	mov	r4, r0
 8005296:	460d      	mov	r5, r1
 8005298:	d904      	bls.n	80052a4 <_raise_r+0x14>
 800529a:	2316      	movs	r3, #22
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052a6:	b112      	cbz	r2, 80052ae <_raise_r+0x1e>
 80052a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052ac:	b94b      	cbnz	r3, 80052c2 <_raise_r+0x32>
 80052ae:	4620      	mov	r0, r4
 80052b0:	f000 f830 	bl	8005314 <_getpid_r>
 80052b4:	462a      	mov	r2, r5
 80052b6:	4601      	mov	r1, r0
 80052b8:	4620      	mov	r0, r4
 80052ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052be:	f000 b817 	b.w	80052f0 <_kill_r>
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d00a      	beq.n	80052dc <_raise_r+0x4c>
 80052c6:	1c59      	adds	r1, r3, #1
 80052c8:	d103      	bne.n	80052d2 <_raise_r+0x42>
 80052ca:	2316      	movs	r3, #22
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	2001      	movs	r0, #1
 80052d0:	e7e7      	b.n	80052a2 <_raise_r+0x12>
 80052d2:	2400      	movs	r4, #0
 80052d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052d8:	4628      	mov	r0, r5
 80052da:	4798      	blx	r3
 80052dc:	2000      	movs	r0, #0
 80052de:	e7e0      	b.n	80052a2 <_raise_r+0x12>

080052e0 <raise>:
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <raise+0xc>)
 80052e2:	4601      	mov	r1, r0
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f7ff bfd3 	b.w	8005290 <_raise_r>
 80052ea:	bf00      	nop
 80052ec:	2000000c 	.word	0x2000000c

080052f0 <_kill_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_kill_r+0x20>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f7fb fd2f 	bl	8000d60 <_kill>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d102      	bne.n	800530c <_kill_r+0x1c>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b103      	cbz	r3, 800530c <_kill_r+0x1c>
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	bf00      	nop
 8005310:	20000158 	.word	0x20000158

08005314 <_getpid_r>:
 8005314:	f7fb bd1c 	b.w	8000d50 <_getpid>

08005318 <__sread>:
 8005318:	b510      	push	{r4, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	f000 f8a0 	bl	8005464 <_read_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	bfab      	itete	ge
 8005328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800532a:	89a3      	ldrhlt	r3, [r4, #12]
 800532c:	181b      	addge	r3, r3, r0
 800532e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005332:	bfac      	ite	ge
 8005334:	6563      	strge	r3, [r4, #84]	; 0x54
 8005336:	81a3      	strhlt	r3, [r4, #12]
 8005338:	bd10      	pop	{r4, pc}

0800533a <__swrite>:
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	461f      	mov	r7, r3
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	05db      	lsls	r3, r3, #23
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4616      	mov	r6, r2
 800534a:	d505      	bpl.n	8005358 <__swrite+0x1e>
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f868 	bl	8005428 <_lseek_r>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	4628      	mov	r0, r5
 800536a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	f000 b817 	b.w	80053a0 <_write_r>

08005372 <__sseek>:
 8005372:	b510      	push	{r4, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 f855 	bl	8005428 <_lseek_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	bf15      	itete	ne
 8005384:	6560      	strne	r0, [r4, #84]	; 0x54
 8005386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800538a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800538e:	81a3      	strheq	r3, [r4, #12]
 8005390:	bf18      	it	ne
 8005392:	81a3      	strhne	r3, [r4, #12]
 8005394:	bd10      	pop	{r4, pc}

08005396 <__sclose>:
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 b813 	b.w	80053c4 <_close_r>
	...

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fd0d 	bl	8000dce <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000158 	.word	0x20000158

080053c4 <_close_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d06      	ldr	r5, [pc, #24]	; (80053e0 <_close_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb fd19 	bl	8000e06 <_close>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_close_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_close_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000158 	.word	0x20000158

080053e4 <_fstat_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_fstat_r+0x20>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	f7fb fd14 	bl	8000e1e <_fstat>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d102      	bne.n	8005400 <_fstat_r+0x1c>
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	b103      	cbz	r3, 8005400 <_fstat_r+0x1c>
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	bd38      	pop	{r3, r4, r5, pc}
 8005402:	bf00      	nop
 8005404:	20000158 	.word	0x20000158

08005408 <_isatty_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d06      	ldr	r5, [pc, #24]	; (8005424 <_isatty_r+0x1c>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fb fd13 	bl	8000e3e <_isatty>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_isatty_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_isatty_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000158 	.word	0x20000158

08005428 <_lseek_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	; (8005448 <_lseek_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fb fd0c 	bl	8000e54 <_lseek>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_lseek_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_lseek_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000158 	.word	0x20000158

0800544c <__malloc_lock>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__malloc_lock+0x8>)
 800544e:	f7ff bdff 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	20000150 	.word	0x20000150

08005458 <__malloc_unlock>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__malloc_unlock+0x8>)
 800545a:	f7ff bdfa 	b.w	8005052 <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	20000150 	.word	0x20000150

08005464 <_read_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	; (8005484 <_read_r+0x20>)
 8005468:	4604      	mov	r4, r0
 800546a:	4608      	mov	r0, r1
 800546c:	4611      	mov	r1, r2
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fc8e 	bl	8000d94 <_read>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_read_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_read_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000158 	.word	0x20000158

08005488 <floor>:
 8005488:	ec51 0b10 	vmov	r0, r1, d0
 800548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005490:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005494:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005498:	2e13      	cmp	r6, #19
 800549a:	ee10 5a10 	vmov	r5, s0
 800549e:	ee10 8a10 	vmov	r8, s0
 80054a2:	460c      	mov	r4, r1
 80054a4:	dc32      	bgt.n	800550c <floor+0x84>
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	da14      	bge.n	80054d4 <floor+0x4c>
 80054aa:	a333      	add	r3, pc, #204	; (adr r3, 8005578 <floor+0xf0>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa fee4 	bl	800027c <__adddf3>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f7fb f914 	bl	80006e4 <__aeabi_dcmpgt>
 80054bc:	b138      	cbz	r0, 80054ce <floor+0x46>
 80054be:	2c00      	cmp	r4, #0
 80054c0:	da57      	bge.n	8005572 <floor+0xea>
 80054c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80054c6:	431d      	orrs	r5, r3
 80054c8:	d001      	beq.n	80054ce <floor+0x46>
 80054ca:	4c2d      	ldr	r4, [pc, #180]	; (8005580 <floor+0xf8>)
 80054cc:	2500      	movs	r5, #0
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	e025      	b.n	8005520 <floor+0x98>
 80054d4:	4f2b      	ldr	r7, [pc, #172]	; (8005584 <floor+0xfc>)
 80054d6:	4137      	asrs	r7, r6
 80054d8:	ea01 0307 	and.w	r3, r1, r7
 80054dc:	4303      	orrs	r3, r0
 80054de:	d01f      	beq.n	8005520 <floor+0x98>
 80054e0:	a325      	add	r3, pc, #148	; (adr r3, 8005578 <floor+0xf0>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fec9 	bl	800027c <__adddf3>
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	f7fb f8f9 	bl	80006e4 <__aeabi_dcmpgt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0eb      	beq.n	80054ce <floor+0x46>
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	bfbe      	ittt	lt
 80054fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80054fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8005502:	19a4      	addlt	r4, r4, r6
 8005504:	ea24 0407 	bic.w	r4, r4, r7
 8005508:	2500      	movs	r5, #0
 800550a:	e7e0      	b.n	80054ce <floor+0x46>
 800550c:	2e33      	cmp	r6, #51	; 0x33
 800550e:	dd0b      	ble.n	8005528 <floor+0xa0>
 8005510:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005514:	d104      	bne.n	8005520 <floor+0x98>
 8005516:	ee10 2a10 	vmov	r2, s0
 800551a:	460b      	mov	r3, r1
 800551c:	f7fa feae 	bl	800027c <__adddf3>
 8005520:	ec41 0b10 	vmov	d0, r0, r1
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800552c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005530:	fa23 f707 	lsr.w	r7, r3, r7
 8005534:	4207      	tst	r7, r0
 8005536:	d0f3      	beq.n	8005520 <floor+0x98>
 8005538:	a30f      	add	r3, pc, #60	; (adr r3, 8005578 <floor+0xf0>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fa fe9d 	bl	800027c <__adddf3>
 8005542:	2200      	movs	r2, #0
 8005544:	2300      	movs	r3, #0
 8005546:	f7fb f8cd 	bl	80006e4 <__aeabi_dcmpgt>
 800554a:	2800      	cmp	r0, #0
 800554c:	d0bf      	beq.n	80054ce <floor+0x46>
 800554e:	2c00      	cmp	r4, #0
 8005550:	da02      	bge.n	8005558 <floor+0xd0>
 8005552:	2e14      	cmp	r6, #20
 8005554:	d103      	bne.n	800555e <floor+0xd6>
 8005556:	3401      	adds	r4, #1
 8005558:	ea25 0507 	bic.w	r5, r5, r7
 800555c:	e7b7      	b.n	80054ce <floor+0x46>
 800555e:	2301      	movs	r3, #1
 8005560:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005564:	fa03 f606 	lsl.w	r6, r3, r6
 8005568:	4435      	add	r5, r6
 800556a:	4545      	cmp	r5, r8
 800556c:	bf38      	it	cc
 800556e:	18e4      	addcc	r4, r4, r3
 8005570:	e7f2      	b.n	8005558 <floor+0xd0>
 8005572:	2500      	movs	r5, #0
 8005574:	462c      	mov	r4, r5
 8005576:	e7aa      	b.n	80054ce <floor+0x46>
 8005578:	8800759c 	.word	0x8800759c
 800557c:	7e37e43c 	.word	0x7e37e43c
 8005580:	bff00000 	.word	0xbff00000
 8005584:	000fffff 	.word	0x000fffff

08005588 <_init>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr

08005594 <_fini>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr
