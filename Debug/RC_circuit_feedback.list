
RC_circuit_feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009280  08009280  00019280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d0  080097d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d90  200001dc  080099b4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  080099b4  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019834  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdf  00000000  00000000  00039a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1a5  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001580c  00000000  00000000  0005cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfdd4  00000000  00000000  00072559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013232d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006444  00000000  00000000  00132380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009268 	.word	0x08009268

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009268 	.word	0x08009268

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fe8c 	bl	8001c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f855 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fa11 	bl	8001314 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ef2:	f000 f8ad 	bl	8001050 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ef6:	f000 f921 	bl	800113c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f9db 	bl	80012b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize data structures in the ADC module
  adc_init_adc_module();
 8000efe:	f000 fdbb 	bl	8001a78 <adc_init_adc_module>

  // Start PWM
  HAL_StatusTypeDef status = HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000f02:	2100      	movs	r1, #0
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <main+0x98>)
 8000f06:	f003 fe65 	bl	8004bd4 <HAL_TIM_PWM_Start>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  assert( HAL_OK == status );
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <main+0x40>
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <main+0x9c>)
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <main+0xa0>)
 8000f18:	21bd      	movs	r1, #189	; 0xbd
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <main+0xa4>)
 8000f1c:	f005 fa5c 	bl	80063d8 <__assert_func>

#ifdef TEST_MODE
  TIM1->CCR1 = pwm_calculate_CCRx( PWM_DUTY_CYCLE, PWM_ARRX );
 8000f20:	4c19      	ldr	r4, [pc, #100]	; (8000f88 <main+0xa8>)
 8000f22:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8000f8c <main+0xac>
 8000f26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000f2a:	f000 fe1f 	bl	8001b6c <pwm_calculate_CCRx>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6363      	str	r3, [r4, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if( data_to_process )
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <main+0xb0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d009      	beq.n	8000f4e <main+0x6e>
	{
		// Sampling
		process_adc_output_codes();
 8000f3a:	f000 fb33 	bl	80015a4 <process_adc_output_codes>
		data_to_process = false;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <main+0xb0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
		adjusted_duty_cycle = calculate_duty_cycle_from_error( composite );
		TIM1->CCR1 = pwm_calculate_CCRx( adjusted_duty_cycle, PWM_ARRX );
#endif

		// Data transfer
		convert_data_to_messages_and_queue();
 8000f44:	f000 fb5c 	bl	8001600 <convert_data_to_messages_and_queue>
		queue_is_loaded = true;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <main+0xb4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	}

	if( queue_is_loaded )
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <main+0xb4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <main+0x80>
	{
		empty_queue();
 8000f56:	f000 fa7f 	bl	8001458 <empty_queue>
		queue_is_loaded = false;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <main+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
	}

	uint16_t conversion_result = poll_adc();
 8000f60:	f000 fab8 	bl	80014d4 <poll_adc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	80bb      	strh	r3, [r7, #4]
	add_to_adc_buffer( conversion_result );
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 faec 	bl	8001548 <add_to_adc_buffer>
	HAL_Delay( SAMPLE_PERIOD_MS );
 8000f70:	200a      	movs	r0, #10
 8000f72:	f000 febb 	bl	8001cec <HAL_Delay>
  {
 8000f76:	e7dc      	b.n	8000f32 <main+0x52>
 8000f78:	20000e88 	.word	0x20000e88
 8000f7c:	08009280 	.word	0x08009280
 8000f80:	08009344 	.word	0x08009344
 8000f84:	08009294 	.word	0x08009294
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	477fff00 	.word	0x477fff00
 8000f90:	20000e08 	.word	0x20000e08
 8000f94:	200007fd 	.word	0x200007fd

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a4      	sub	sp, #144	; 0x90
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa2:	2244      	movs	r2, #68	; 0x44
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fa7e 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fa70 	bl	80064a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fcc:	f002 fce8 	bl	80039a0 <HAL_PWREx_ControlVoltageScaling>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000fd6:	f000 fb39 	bl	800164c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fd2a 	bl	8003a4c <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ffe:	f000 fb25 	bl	800164c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 f977 	bl	8004310 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 fb10 	bl	800164c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800102c:	f244 0302 	movw	r3, #16386	; 0x4002
 8001030:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fb8d 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001044:	f000 fb02 	bl	800164c <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3790      	adds	r7, #144	; 0x90
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <MX_ADC1_Init+0xe0>)
 8001074:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <MX_ADC1_Init+0xe4>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <MX_ADC1_Init+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC1_Init+0xe0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <MX_ADC1_Init+0xe0>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC1_Init+0xe0>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_ADC1_Init+0xe0>)
 8001092:	2204      	movs	r2, #4
 8001094:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xe0>)
 8001098:	2200      	movs	r2, #0
 800109a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_ADC1_Init+0xe0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010d4:	f001 f872 	bl	80021bc <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010de:	f000 fab5 	bl	800164c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <MX_ADC1_Init+0xe0>)
 80010ee:	f002 f94d 	bl	800338c <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010f8:	f000 faa8 	bl	800164c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_ADC1_Init+0xe8>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0xe0>)
 800111a:	f001 fb73 	bl	8002804 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001124:	f000 fa92 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000e24 	.word	0x20000e24
 8001134:	50040000 	.word	0x50040000
 8001138:	14f00020 	.word	0x14f00020

0800113c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09a      	sub	sp, #104	; 0x68
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	222c      	movs	r2, #44	; 0x2c
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 f996 	bl	80064a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  uint32_t prescaler = pwm_calculate_prescaler( PWM_CLOCK_FREQUENCY_HZ, PWM_PULSE_FREQUENCY_HZ, PWM_ARRX );
 800117c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80012a0 <MX_TIM1_Init+0x164>
 8001180:	eddf 0a48 	vldr	s1, [pc, #288]	; 80012a4 <MX_TIM1_Init+0x168>
 8001184:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80012a8 <MX_TIM1_Init+0x16c>
 8001188:	f000 fcba 	bl	8001b00 <pwm_calculate_prescaler>
 800118c:	6678      	str	r0, [r7, #100]	; 0x64
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <MX_TIM1_Init+0x170>)
 8001190:	4a47      	ldr	r2, [pc, #284]	; (80012b0 <MX_TIM1_Init+0x174>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <MX_TIM1_Init+0x170>)
 8001196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001198:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <MX_TIM1_Init+0x170>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a0:	4b42      	ldr	r3, [pc, #264]	; (80012ac <MX_TIM1_Init+0x170>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <MX_TIM1_Init+0x170>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <MX_TIM1_Init+0x170>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b4:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <MX_TIM1_Init+0x170>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	483c      	ldr	r0, [pc, #240]	; (80012ac <MX_TIM1_Init+0x170>)
 80011bc:	f003 fc52 	bl	8004a64 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f000 fa41 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d4:	4619      	mov	r1, r3
 80011d6:	4835      	ldr	r0, [pc, #212]	; (80012ac <MX_TIM1_Init+0x170>)
 80011d8:	f003 feee 	bl	8004fb8 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80011e2:	f000 fa33 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e6:	4831      	ldr	r0, [pc, #196]	; (80012ac <MX_TIM1_Init+0x170>)
 80011e8:	f003 fc93 	bl	8004b12 <HAL_TIM_PWM_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80011f2:	f000 fa2b 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001206:	4619      	mov	r1, r3
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <MX_TIM1_Init+0x170>)
 800120a:	f004 fb41 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001214:	f000 fa1a 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	481b      	ldr	r0, [pc, #108]	; (80012ac <MX_TIM1_Init+0x170>)
 800123e:	f003 fda7 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001248:	f000 fa00 	bl	800164c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800126e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001272:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <MX_TIM1_Init+0x170>)
 8001282:	f004 fb6b 	bl	800595c <HAL_TIMEx_ConfigBreakDeadTime>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 800128c:	f000 f9de 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM1_Init+0x170>)
 8001292:	f000 fa63 	bl	800175c <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3768      	adds	r7, #104	; 0x68
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	477fff00 	.word	0x477fff00
 80012a4:	3dcccccd 	.word	0x3dcccccd
 80012a8:	4a742400 	.word	0x4a742400
 80012ac:	20000e88 	.word	0x20000e88
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <MX_USART2_UART_Init+0x5c>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x58>)
 80012f8:	f004 fba8 	bl	8005a4c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 f9a3 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000ed4 	.word	0x20000ed4
 8001310:	40004400 	.word	0x40004400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_GPIO_Init+0x2c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <MX_GPIO_Init+0x2c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_GPIO_Init+0x2c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <prepare_message>:
 * HUART2
 */


static void prepare_message(char* message, uint32_t message_length, float data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Only accept values below 10.0f
	float dividend = data / ( 10.0f );
 8001352:	ed97 7a01 	vldr	s14, [r7, #4]
 8001356:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	edc7 7a05 	vstr	s15, [r7, #20]
	assert( dividend < 10.0f );
 8001362:	edd7 7a05 	vldr	s15, [r7, #20]
 8001366:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	d406      	bmi.n	8001382 <prepare_message+0x3e>
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <prepare_message+0x70>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <prepare_message+0x74>)
 8001378:	f240 11ed 	movw	r1, #493	; 0x1ed
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <prepare_message+0x78>)
 800137e:	f005 f82b 	bl	80063d8 <__assert_func>

	// Copy the data
	int sprintf_return = sprintf(message, "%.3f,", data);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <prepare_message+0x7c>)
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f005 fe56 	bl	8007040 <siprintf>
 8001394:	6138      	str	r0, [r7, #16]
	assert(sprintf_return == message_length);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	429a      	cmp	r2, r3
 800139c:	d006      	beq.n	80013ac <prepare_message+0x68>
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <prepare_message+0x80>)
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <prepare_message+0x74>)
 80013a2:	f240 11f1 	movw	r1, #497	; 0x1f1
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <prepare_message+0x78>)
 80013a8:	f005 f816 	bl	80063d8 <__assert_func>
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	080092a8 	.word	0x080092a8
 80013b8:	0800934c 	.word	0x0800934c
 80013bc:	08009294 	.word	0x08009294
 80013c0:	080092bc 	.word	0x080092bc
 80013c4:	080092c4 	.word	0x080092c4

080013c8 <queue_message>:


static void queue_message(char* message, uint32_t message_length)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	 * If the queue is not emptied before adding more messages, a Hard Fault will occur.
	 * Therefore, queue_is_full was added.
	 * If the queue_is_full, another message cannot be added.
	 * queue_is_full will be reset the next time that the queue is emptied.
	 */
	if( !queue_is_full )
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <queue_message+0x54>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f083 0301 	eor.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d011      	beq.n	8001404 <queue_message+0x3c>
	{
		memcpy(message_queue[message_queue_length], message, message_length);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <queue_message+0x58>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <queue_message+0x5c>)
 80013ee:	4413      	add	r3, r2
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 f849 	bl	800648c <memcpy>
		message_queue_length++;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <queue_message+0x58>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <queue_message+0x58>)
 8001402:	6013      	str	r3, [r2, #0]
	}

	if( message_queue_length == ( MESSAGE_QUEUE_LENGTH - 1 ) )
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <queue_message+0x58>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2bff      	cmp	r3, #255	; 0xff
 800140a:	d102      	bne.n	8001412 <queue_message+0x4a>
	{
		queue_is_full = true;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <queue_message+0x54>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
	}
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200007fc 	.word	0x200007fc
 8001420:	200007f8 	.word	0x200007f8
 8001424:	200001f8 	.word	0x200001f8

08001428 <dispatch_message_from_huart2>:


static HAL_StatusTypeDef dispatch_message_from_huart2(char* message, uint32_t message_length)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
	status = HAL_UART_Transmit(&huart2, (uint8_t*) message, message_length, USART2_TIMEOUT_MS);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b29a      	uxth	r2, r3
 800143a:	f242 7310 	movw	r3, #10000	; 0x2710
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <dispatch_message_from_huart2+0x2c>)
 8001442:	f004 fb51 	bl	8005ae8 <HAL_UART_Transmit>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
	return status;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000ed4 	.word	0x20000ed4

08001458 <empty_queue>:


static void empty_queue(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	70fb      	strb	r3, [r7, #3]
	for( uint32_t i = 0u; i < message_queue_length; i++ )
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	e019      	b.n	800149c <empty_queue+0x44>
	{
		status = dispatch_message_from_huart2(message_queue[i], MESSAGE_LENGTH);
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <empty_queue+0x64>)
 8001474:	4413      	add	r3, r2
 8001476:	2106      	movs	r1, #6
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffd5 	bl	8001428 <dispatch_message_from_huart2>
 800147e:	4603      	mov	r3, r0
 8001480:	70fb      	strb	r3, [r7, #3]
		assert( HAL_OK == status );
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <empty_queue+0x3e>
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <empty_queue+0x68>)
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <empty_queue+0x6c>)
 800148c:	f240 2119 	movw	r1, #537	; 0x219
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <empty_queue+0x70>)
 8001492:	f004 ffa1 	bl	80063d8 <__assert_func>
	for( uint32_t i = 0u; i < message_queue_length; i++ )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <empty_queue+0x74>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3e0      	bcc.n	8001468 <empty_queue+0x10>
	}

	// Reset message queue
	message_queue_length = 0u;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <empty_queue+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
	queue_is_full = false;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <empty_queue+0x78>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001f8 	.word	0x200001f8
 80014c0:	08009280 	.word	0x08009280
 80014c4:	0800935c 	.word	0x0800935c
 80014c8:	08009294 	.word	0x08009294
 80014cc:	200007f8 	.word	0x200007f8
 80014d0:	200007fc 	.word	0x200007fc

080014d4 <poll_adc>:
 * ADC1
 */


static uint16_t poll_adc(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_ADC_Start( &hadc1 );
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <poll_adc+0x64>)
 80014dc:	f000 ffbe 	bl	800245c <HAL_ADC_Start>
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
	assert( HAL_OK == status );
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <poll_adc+0x24>
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <poll_adc+0x68>)
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <poll_adc+0x6c>)
 80014ee:	f240 212a 	movw	r1, #554	; 0x22a
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <poll_adc+0x70>)
 80014f4:	f004 ff70 	bl	80063d8 <__assert_func>
	status = HAL_ADC_PollForConversion( &hadc1, ADC_TIMEOUT_MS );
 80014f8:	2101      	movs	r1, #1
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <poll_adc+0x64>)
 80014fc:	f001 f89c 	bl	8002638 <HAL_ADC_PollForConversion>
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
	assert( HAL_OK == status );
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <poll_adc+0x44>
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <poll_adc+0x68>)
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <poll_adc+0x6c>)
 800150e:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <poll_adc+0x70>)
 8001514:	f004 ff60 	bl	80063d8 <__assert_func>
	uint16_t conversion_result = ( uint16_t ) HAL_ADC_GetValue( &hadc1 );
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <poll_adc+0x64>)
 800151a:	f001 f965 	bl	80027e8 <HAL_ADC_GetValue>
 800151e:	4603      	mov	r3, r0
 8001520:	80bb      	strh	r3, [r7, #4]
	status = HAL_ADC_Stop( &hadc1 );
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <poll_adc+0x64>)
 8001524:	f001 f854 	bl	80025d0 <HAL_ADC_Stop>
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
	return conversion_result;
 800152c:	88bb      	ldrh	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000e24 	.word	0x20000e24
 800153c:	08009280 	.word	0x08009280
 8001540:	08009368 	.word	0x08009368
 8001544:	08009294 	.word	0x08009294

08001548 <add_to_adc_buffer>:


static void add_to_adc_buffer(uint16_t conversion_result)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	if ( !adc1_buffer_is_full )
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <add_to_adc_buffer+0x4c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <add_to_adc_buffer+0x2a>
	{
	    adc1_buffer[adc1_buffer_idx++] = conversion_result;
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <add_to_adc_buffer+0x50>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <add_to_adc_buffer+0x50>)
 8001568:	600a      	str	r2, [r1, #0]
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <add_to_adc_buffer+0x54>)
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	if ( ADC_BUFFER_LENGTH == adc1_buffer_idx )
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <add_to_adc_buffer+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157a:	d105      	bne.n	8001588 <add_to_adc_buffer+0x40>
	{
		adc1_buffer_is_full = true;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <add_to_adc_buffer+0x4c>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
		data_to_process = true;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <add_to_adc_buffer+0x58>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
	}
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	20000a04 	.word	0x20000a04
 8001598:	20000a00 	.word	0x20000a00
 800159c:	20000800 	.word	0x20000800
 80015a0:	20000e08 	.word	0x20000e08

080015a4 <process_adc_output_codes>:


static void process_adc_output_codes(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	for( uint32_t i = 0u; i < ADC_BUFFER_LENGTH; i++ )
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e011      	b.n	80015d4 <process_adc_output_codes+0x30>
	{
		adc1_voltage[i] = adc_calculate_voltage_from_output_code( (uint32_t) adc1_buffer[i] );
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <process_adc_output_codes+0x4c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fa75 	bl	8001aa8 <adc_calculate_voltage_from_output_code>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <process_adc_output_codes+0x50>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	edc3 7a00 	vstr	s15, [r3]
	for( uint32_t i = 0u; i < ADC_BUFFER_LENGTH; i++ )
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d9ea      	bls.n	80015b0 <process_adc_output_codes+0xc>
	}

	// Reset adc1_buffer
	adc1_buffer_idx = 0u;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <process_adc_output_codes+0x54>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	adc1_buffer_is_full = false;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <process_adc_output_codes+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000800 	.word	0x20000800
 80015f4:	20000a08 	.word	0x20000a08
 80015f8:	20000a00 	.word	0x20000a00
 80015fc:	20000a04 	.word	0x20000a04

08001600 <convert_data_to_messages_and_queue>:


static void convert_data_to_messages_and_queue(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
	char message[MESSAGE_LENGTH];
	for( uint32_t i = 0u; i < MESSAGE_QUEUE_LENGTH; i++ )
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	e014      	b.n	8001636 <convert_data_to_messages_and_queue+0x36>
	{
		prepare_message(message, MESSAGE_LENGTH, adc1_voltage[i]);
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <convert_data_to_messages_and_queue+0x48>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	2106      	movs	r1, #6
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe8f 	bl	8001344 <prepare_message>
		queue_message(message, MESSAGE_LENGTH);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2106      	movs	r1, #6
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fecc 	bl	80013c8 <queue_message>
	for( uint32_t i = 0u; i < MESSAGE_QUEUE_LENGTH; i++ )
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d9e7      	bls.n	800160c <convert_data_to_messages_and_queue+0xc>
	}
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000a08 	.word	0x20000a08

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_MspInit+0x44>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6613      	str	r3, [r2, #96]	; 0x60
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_MspInit+0x44>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x44>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x44>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <HAL_ADC_MspInit+0x74>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d124      	bne.n	800170c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_ADC_MspInit+0x78>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-CK_IN     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016f6:	230b      	movs	r3, #11
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f001 ffca 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	50040000 	.word	0x50040000
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_TIM_Base_MspInit+0x38>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10b      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 8001734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001738:	6613      	str	r3, [r2, #96]	; 0x60
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40012c00 	.word	0x40012c00
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_TIM_MspPostInit+0x68>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d11d      	bne.n	80017ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f001 ff73 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012c00 	.word	0x40012c00
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_UART_MspInit+0xa0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d13a      	bne.n	8001864 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_UART_MspInit+0xa4>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_UART_MspInit+0xa4>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_UART_MspInit+0xa4>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_UART_MspInit+0xa4>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_UART_MspInit+0xa4>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0xa4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800181e:	2304      	movs	r3, #4
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182e:	2307      	movs	r3, #7
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f001 ff30 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001852:	2303      	movs	r3, #3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 ff1e 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	40021000 	.word	0x40021000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f9f4 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e2:	f004 fd97 	bl	8006414 <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
	return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
	}

return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
	}
	return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f004 fcfc 	bl	8006414 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000a000 	.word	0x2000a000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	20000e0c 	.word	0x20000e0c
 8001a50:	20000f70 	.word	0x20000f70

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <adc_init_adc_module>:

adc_t adc_1 = {0};


void adc_init_adc_module( void )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	adc_1.reference_voltage = VREF;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <adc_init_adc_module+0x24>)
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <adc_init_adc_module+0x28>)
 8001a80:	601a      	str	r2, [r3, #0]
	adc_1.output_code_range = OUTPUT_CODE_RANGE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <adc_init_adc_module+0x24>)
 8001a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a88:	605a      	str	r2, [r3, #4]
	adc_1.single_lsb = SINGLE_LSB;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <adc_init_adc_module+0x24>)
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <adc_init_adc_module+0x2c>)
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000e10 	.word	0x20000e10
 8001aa0:	40666666 	.word	0x40666666
 8001aa4:	3a666666 	.word	0x3a666666

08001aa8 <adc_calculate_voltage_from_output_code>:


float adc_calculate_voltage_from_output_code( uint32_t output_code )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	// It is not necessary to check that the output code is non-negative because it is an unsigned integer
	assert(output_code <= adc_1.output_code_range);
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <adc_calculate_voltage_from_output_code+0x48>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d905      	bls.n	8001ac6 <adc_calculate_voltage_from_output_code+0x1e>
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <adc_calculate_voltage_from_output_code+0x4c>)
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <adc_calculate_voltage_from_output_code+0x50>)
 8001abe:	211a      	movs	r1, #26
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <adc_calculate_voltage_from_output_code+0x54>)
 8001ac2:	f004 fc89 	bl	80063d8 <__assert_func>
	float voltage = adc_1.single_lsb * (float) output_code;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <adc_calculate_voltage_from_output_code+0x48>)
 8001ac8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a03 	vstr	s15, [r7, #12]
	return voltage;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ee07 3a90 	vmov	s15, r3
}
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000e10 	.word	0x20000e10
 8001af4:	080092fc 	.word	0x080092fc
 8001af8:	080093bc 	.word	0x080093bc
 8001afc:	08009324 	.word	0x08009324

08001b00 <pwm_calculate_prescaler>:
* F_PWM = ( F_CLK )/( ( ARR + 1 ) * ( PSC + 1 ) )
* ( ARR + 1 ) * ( PSC + 1 ) = ( F_CLK ) / ( F_PWM )
* PSC = ( ( F_CLK ) / ( ( F_PWM ) * ( ARR + 1 ) ) ) - 1
*/
uint32_t pwm_calculate_prescaler(float clock_frequency_Hz, float pulse_frequency_Hz, float auto_reload)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b0e:	ed87 1a01 	vstr	s2, [r7, #4]
	return floor( ( clock_frequency_Hz ) / ( ( pulse_frequency_Hz ) * ( auto_reload + 1 ) ) ) - 1u;
 8001b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b2e:	ee16 0a90 	vmov	r0, s13
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ec43 2b10 	vmov	d0, r2, r3
 8001b3e:	f007 fb13 	bl	8009168 <floor>
 8001b42:	ec51 0b10 	vmov	r0, r1, d0
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <pwm_calculate_prescaler+0x68>)
 8001b4c:	f7fe fb9c 	bl	8000288 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f826 	bl	8000ba8 <__aeabi_d2uiz>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	3ff00000 	.word	0x3ff00000

08001b6c <pwm_calculate_CCRx>:
* Calculate CCRx
* DUTY_CYCLE = ( CCRx ) / ( ARRx )
* CCRx = ( DUTY_CYCLE ) * ( ARRx )
*/
uint32_t pwm_calculate_CCRx(float duty_cycle, float auto_reload)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b76:	edc7 0a00 	vstr	s1, [r7]
	return floor( duty_cycle * auto_reload );
 8001b7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b7e:	edd7 7a00 	vldr	s15, [r7]
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	ee17 0a90 	vmov	r0, s15
 8001b8a:	f7fe fcdd 	bl	8000548 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	ec43 2b10 	vmov	d0, r2, r3
 8001b96:	f007 fae7 	bl	8009168 <floor>
 8001b9a:	ec53 2b10 	vmov	r2, r3, d0
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f801 	bl	8000ba8 <__aeabi_d2uiz>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb4:	f7ff ff4e 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f004 fc31 	bl	8006444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff f97d 	bl	8000ee0 <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bf4:	080097d8 	.word	0x080097d8
  ldr r2, =_sbss
 8001bf8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bfc:	20000f6c 	.word	0x20000f6c

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>

08001c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f001 fd13 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f80e 	bl	8001c34 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	e001      	b.n	8001c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c24:	f7ff fd18 	bl	8001658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_InitTick+0x6c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d023      	beq.n	8001c90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_InitTick+0x70>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_InitTick+0x6c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fd11 	bl	8003686 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10f      	bne.n	8001c8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d809      	bhi.n	8001c84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f001 fce9 	bl	800364e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_InitTick+0x74>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e007      	b.n	8001c94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e004      	b.n	8001c94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e001      	b.n	8001c94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000f58 	.word	0x20000f58

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000f58 	.word	0x20000f58

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ffee 	bl	8001cd4 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3360      	adds	r3, #96	; 0x60
 8001dae:	461a      	mov	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <LL_ADC_SetOffset+0x44>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	03fff000 	.word	0x03fff000

08001de4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3360      	adds	r3, #96	; 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3360      	adds	r3, #96	; 0x60
 8001e20:	461a      	mov	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3330      	adds	r3, #48	; 0x30
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	211f      	movs	r1, #31
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	f003 011f 	and.w	r1, r3, #31
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3314      	adds	r3, #20
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	0e5b      	lsrs	r3, r3, #25
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	0d1b      	lsrs	r3, r3, #20
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2107      	movs	r1, #7
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0d1b      	lsrs	r3, r3, #20
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0318 	and.w	r3, r3, #24
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f64:	40d9      	lsrs	r1, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	400b      	ands	r3, r1
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	0007ffff 	.word	0x0007ffff

08001f88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 031f 	and.w	r3, r3, #31
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6093      	str	r3, [r2, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <LL_ADC_IsEnabled+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_IsEnabled+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDisableOngoing+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDisableOngoing+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d101      	bne.n	8002160 <LL_ADC_REG_IsConversionOngoing+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800217e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d101      	bne.n	80021ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e131      	b.n	800243a <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fa5b 	bl	80016a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fef1 	bl	8001fe4 <LL_ADC_IsDeepPowerDownEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fed7 	bl	8001fc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff0c 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fef0 	bl	800200c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222c:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_ADC_Init+0x288>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	4a85      	ldr	r2, [pc, #532]	; (8002448 <HAL_ADC_Init+0x28c>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002240:	e002      	b.n	8002248 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3b01      	subs	r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff feee 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10d      	bne.n	800227a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff62 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 8002284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 80ca 	bne.w	8002428 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80c6 	bne.w	8002428 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fefb 	bl	80020ac <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d110      	bne.n	80022de <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022bc:	4863      	ldr	r0, [pc, #396]	; (800244c <HAL_ADC_Init+0x290>)
 80022be:	f7ff fef5 	bl	80020ac <LL_ADC_IsEnabled>
 80022c2:	4604      	mov	r4, r0
 80022c4:	4862      	ldr	r0, [pc, #392]	; (8002450 <HAL_ADC_Init+0x294>)
 80022c6:	f7ff fef1 	bl	80020ac <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4323      	orrs	r3, r4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4619      	mov	r1, r3
 80022d8:	485e      	ldr	r0, [pc, #376]	; (8002454 <HAL_ADC_Init+0x298>)
 80022da:	f7ff fd2b 	bl	8001d34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7e5b      	ldrb	r3, [r3, #25]
 80022e2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022ee:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022f4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	3b01      	subs	r3, #1
 8002312:	045b      	lsls	r3, r3, #17
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_ADC_Init+0x29c>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	69b9      	ldr	r1, [r7, #24]
 8002346:	430b      	orrs	r3, r1
 8002348:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fefa 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 8002354:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff1b 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 8002360:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d13d      	bne.n	80023e4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d13a      	bne.n	80023e4 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002372:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800237a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d118      	bne.n	80023d4 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023c4:	430a      	orrs	r2, r1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e007      	b.n	80023e4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10c      	bne.n	8002406 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f023 010f 	bic.w	r1, r3, #15
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	1e5a      	subs	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
 8002404:	e007      	b.n	8002416 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020f 	bic.w	r2, r2, #15
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
 8002426:	e007      	b.n	8002438 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002438:	7ffb      	ldrb	r3, [r7, #31]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000
 8002448:	053e2d63 	.word	0x053e2d63
 800244c:	50040000 	.word	0x50040000
 8002450:	50040100 	.word	0x50040100
 8002454:	50040300 	.word	0x50040300
 8002458:	fff0c007 	.word	0xfff0c007

0800245c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002464:	4857      	ldr	r0, [pc, #348]	; (80025c4 <HAL_ADC_Start+0x168>)
 8002466:	f7ff fd8f 	bl	8001f88 <LL_ADC_GetMultimode>
 800246a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fe69 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 809c 	bne.w	80025b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_ADC_Start+0x30>
 8002488:	2302      	movs	r3, #2
 800248a:	e097      	b.n	80025bc <HAL_ADC_Start+0x160>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fe6d 	bl	8003174 <ADC_Enable>
 800249a:	4603      	mov	r3, r0
 800249c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8083 	bne.w	80025ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_ADC_Start+0x16c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d002      	beq.n	80024ca <HAL_ADC_Start+0x6e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e000      	b.n	80024cc <HAL_ADC_Start+0x70>
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_ADC_Start+0x170>)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d002      	beq.n	80024da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d106      	bne.n	8002502 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f023 0206 	bic.w	r2, r3, #6
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002500:	e002      	b.n	8002508 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	221c      	movs	r2, #28
 800250e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_ADC_Start+0x16c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d002      	beq.n	8002528 <HAL_ADC_Start+0xcc>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e000      	b.n	800252a <HAL_ADC_Start+0xce>
 8002528:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_ADC_Start+0x170>)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4293      	cmp	r3, r2
 8002530:	d008      	beq.n	8002544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d002      	beq.n	8002544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b09      	cmp	r3, #9
 8002542:	d114      	bne.n	800256e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800255a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fdc6 	bl	80020f8 <LL_ADC_REG_StartConversion>
 800256c:	e025      	b.n	80025ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_ADC_Start+0x16c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d002      	beq.n	800258a <HAL_ADC_Start+0x12e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	e000      	b.n	800258c <HAL_ADC_Start+0x130>
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_ADC_Start+0x170>)
 800258c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00f      	beq.n	80025ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
 80025aa:	e006      	b.n	80025ba <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025b4:	e001      	b.n	80025ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	50040300 	.word	0x50040300
 80025c8:	50040100 	.word	0x50040100
 80025cc:	50040000 	.word	0x50040000

080025d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Stop+0x16>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e023      	b.n	800262e <HAL_ADC_Stop+0x5e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80025ee:	2103      	movs	r1, #3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fd03 	bl	8002ffc <ADC_ConversionStop>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fe3d 	bl	8003280 <ADC_Disable>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002642:	4866      	ldr	r0, [pc, #408]	; (80027dc <HAL_ADC_PollForConversion+0x1a4>)
 8002644:	f7ff fca0 	bl	8001f88 <LL_ADC_GetMultimode>
 8002648:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b08      	cmp	r3, #8
 8002650:	d102      	bne.n	8002658 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002652:	2308      	movs	r3, #8
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e02a      	b.n	80026ae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d002      	beq.n	800266a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d111      	bne.n	800268e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0a4      	b.n	80027d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002688:	2304      	movs	r3, #4
 800268a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800268c:	e00f      	b.n	80026ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800268e:	4853      	ldr	r0, [pc, #332]	; (80027dc <HAL_ADC_PollForConversion+0x1a4>)
 8002690:	f7ff fc88 	bl	8001fa4 <LL_ADC_GetMultiDMATransfer>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e093      	b.n	80027d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026aa:	2304      	movs	r3, #4
 80026ac:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ae:	f7ff fb11 	bl	8001cd4 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b4:	e021      	b.n	80026fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026bc:	d01d      	beq.n	80026fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026be:	f7ff fb09 	bl	8001cd4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <HAL_ADC_PollForConversion+0x9c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d112      	bne.n	80026fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e06b      	b.n	80027d2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0d6      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fba7 	bl	8001e6c <LL_ADC_REG_IsTriggerSourceSWStart>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e5b      	ldrb	r3, [r3, #25]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d118      	bne.n	800275e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d111      	bne.n	800275e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d002      	beq.n	800276e <HAL_ADC_PollForConversion+0x136>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e000      	b.n	8002770 <HAL_ADC_PollForConversion+0x138>
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_ADC_PollForConversion+0x1ac>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4293      	cmp	r3, r2
 8002776:	d008      	beq.n	800278a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d002      	beq.n	800278a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b09      	cmp	r3, #9
 8002788:	d104      	bne.n	8002794 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e00c      	b.n	80027ae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_PollForConversion+0x1a8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x16c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_PollForConversion+0x16e>
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_ADC_PollForConversion+0x1ac>)
 80027a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d104      	bne.n	80027be <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e008      	b.n	80027d0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	220c      	movs	r2, #12
 80027ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	50040300 	.word	0x50040300
 80027e0:	50040100 	.word	0x50040100
 80027e4:	50040000 	.word	0x50040000

080027e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0b6      	sub	sp, #216	; 0xd8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x22>
 8002822:	2302      	movs	r3, #2
 8002824:	e3d5      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x7ce>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc88 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 83ba 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d824      	bhi.n	8002892 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	3b02      	subs	r3, #2
 800284e:	2b03      	cmp	r3, #3
 8002850:	d81b      	bhi.n	800288a <HAL_ADC_ConfigChannel+0x86>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_ADC_ConfigChannel+0x54>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002869 	.word	0x08002869
 800285c:	08002871 	.word	0x08002871
 8002860:	08002879 	.word	0x08002879
 8002864:	08002881 	.word	0x08002881
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	220c      	movs	r2, #12
 800286c:	605a      	str	r2, [r3, #4]
          break;
 800286e:	e011      	b.n	8002894 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2212      	movs	r2, #18
 8002874:	605a      	str	r2, [r3, #4]
          break;
 8002876:	e00d      	b.n	8002894 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2218      	movs	r2, #24
 800287c:	605a      	str	r2, [r3, #4]
          break;
 800287e:	e009      	b.n	8002894 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002886:	605a      	str	r2, [r3, #4]
          break;
 8002888:	e004      	b.n	8002894 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2206      	movs	r2, #6
 800288e:	605a      	str	r2, [r3, #4]
          break;
 8002890:	e000      	b.n	8002894 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002892:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f7ff faf6 	bl	8001e92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fc4c 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 80028b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fc6c 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 80028be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 81c1 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 81bc 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028de:	d10f      	bne.n	8002900 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7ff fafd 	bl	8001eea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff faa4 	bl	8001e46 <LL_ADC_SetSamplingTimeCommonConfig>
 80028fe:	e00e      	b.n	800291e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	461a      	mov	r2, r3
 800290e:	f7ff faec 	bl	8001eea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fa94 	bl	8001e46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d00a      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002950:	f7ff fa24 	bl	8001d9c <LL_ADC_SetOffset>
 8002954:	e17b      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fa41 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x17e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fa36 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1bc>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fa2b 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80029b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1d4>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x206>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f9fa 	bl	8001e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f9de 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x244>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f9d3 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	e01e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x282>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f9c8 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x29a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e018      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2cc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f997 	bl	8001e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f97b 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x30a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f970 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	e01e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x348>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f965 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e004      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x360>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	e016      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x38e>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f936 	bl	8001e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff f91a 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x3cc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f90f 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e017      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x3fc>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f904 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x414>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	e011      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x438>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f8e1 	bl	8001e10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fa2a 	bl	80020ac <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8140 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff f967 	bl	8001f40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a8f      	ldr	r2, [pc, #572]	; (8002eb4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f040 8131 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4a2>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	bf94      	ite	ls
 8002c9e:	2301      	movls	r3, #1
 8002ca0:	2300      	movhi	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e019      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4d6>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d079      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4f6>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf8:	e015      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x522>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x542>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	e017      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x572>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x598>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	e018      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5ca>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	e081      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x5ea>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	3301      	adds	r3, #1
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dec:	e015      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x616>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	069b      	lsls	r3, r3, #26
 8002e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x636>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	e017      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x666>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
  return result;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x692>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 021f 	and.w	r2, r3, #31
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	051b      	lsls	r3, r3, #20
 8002e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e94:	e01e      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x6d0>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	613b      	str	r3, [r7, #16]
  return result;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e006      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x6bc>
 8002eb2:	bf00      	nop
 8002eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	051b      	lsls	r3, r3, #20
 8002ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7ff f805 	bl	8001eea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_ADC_ConfigChannel+0x7d8>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d06c      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eec:	483c      	ldr	r0, [pc, #240]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002eee:	f7fe ff47 	bl	8001d80 <LL_ADC_GetCommonPathInternalCh>
 8002ef2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d127      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d121      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d157      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f1e:	4619      	mov	r1, r3
 8002f20:	482f      	ldr	r0, [pc, #188]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f22:	f7fe ff1a 	bl	8001d5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_ADC_ConfigChannel+0x7e8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x77e>
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d12a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f7c:	f7fe feed 	bl	8001d5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f80:	e021      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d11c      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002faa:	4619      	mov	r1, r3
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fae:	f7fe fed4 	bl	8001d5a <LL_ADC_SetCommonPathInternalCh>
 8002fb2:	e008      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	37d8      	adds	r7, #216	; 0xd8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	80080000 	.word	0x80080000
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	c7520000 	.word	0xc7520000
 8002fe8:	50040000 	.word	0x50040000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	053e2d63 	.word	0x053e2d63
 8002ff4:	cb840000 	.word	0xcb840000
 8002ff8:	80000001 	.word	0x80000001

08002ffc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f898 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 8003018:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f8b9 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 8003024:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8098 	beq.w	8003164 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02a      	beq.n	8003098 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7e5b      	ldrb	r3, [r3, #25]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d126      	bne.n	8003098 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7e1b      	ldrb	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d122      	bne.n	8003098 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003056:	e014      	b.n	8003082 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4a45      	ldr	r2, [pc, #276]	; (8003170 <ADC_ConversionStop+0x174>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d90d      	bls.n	800307c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e074      	b.n	8003166 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d1e3      	bne.n	8003058 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d014      	beq.n	80030c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff f850 	bl	8002148 <LL_ADC_REG_IsConversionOngoing>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f80d 	bl	80020d2 <LL_ADC_IsDisableOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f82c 	bl	8002120 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d014      	beq.n	80030f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f85f 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fff5 	bl	80020d2 <LL_ADC_IsDisableOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f83b 	bl	800216e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d005      	beq.n	800310a <ADC_ConversionStop+0x10e>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d105      	bne.n	8003110 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003104:	230c      	movs	r3, #12
 8003106:	617b      	str	r3, [r7, #20]
        break;
 8003108:	e005      	b.n	8003116 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800310a:	2308      	movs	r3, #8
 800310c:	617b      	str	r3, [r7, #20]
        break;
 800310e:	e002      	b.n	8003116 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003110:	2304      	movs	r3, #4
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003116:	f7fe fddd 	bl	8001cd4 <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800311c:	e01b      	b.n	8003156 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800311e:	f7fe fdd9 	bl	8001cd4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b05      	cmp	r3, #5
 800312a:	d914      	bls.n	8003156 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0210 	orr.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1dc      	bne.n	800311e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	a33fffff 	.word	0xa33fffff

08003174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe ff91 	bl	80020ac <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d169      	bne.n	8003264 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <ADC_Enable+0xfc>)
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e055      	b.n	8003266 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe ff4c 	bl	800205c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031c4:	482b      	ldr	r0, [pc, #172]	; (8003274 <ADC_Enable+0x100>)
 80031c6:	f7fe fddb 	bl	8001d80 <LL_ADC_GetCommonPathInternalCh>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <ADC_Enable+0x104>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <ADC_Enable+0x108>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ee:	e002      	b.n	80031f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fd6a 	bl	8001cd4 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003202:	e028      	b.n	8003256 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe ff4f 	bl	80020ac <LL_ADC_IsEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe ff1f 	bl	800205c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321e:	f7fe fd59 	bl	8001cd4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d914      	bls.n	8003256 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00d      	beq.n	8003256 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d1cf      	bne.n	8003204 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	8000003f 	.word	0x8000003f
 8003274:	50040300 	.word	0x50040300
 8003278:	20000000 	.word	0x20000000
 800327c:	053e2d63 	.word	0x053e2d63

08003280 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ff20 	bl	80020d2 <LL_ADC_IsDisableOngoing>
 8003292:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe ff07 	bl	80020ac <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d047      	beq.n	8003334 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d144      	bne.n	8003334 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030d 	and.w	r3, r3, #13
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10c      	bne.n	80032d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fee1 	bl	8002084 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2203      	movs	r2, #3
 80032c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ca:	f7fe fd03 	bl	8001cd4 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032d0:	e029      	b.n	8003326 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ee:	f7fe fcf1 	bl	8001cd4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d914      	bls.n	8003326 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e007      	b.n	8003336 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1dc      	bne.n	80032ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <LL_ADC_IsEnabled>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <LL_ADC_IsEnabled+0x18>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_ADC_IsEnabled+0x1a>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_REG_IsConversionOngoing>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d101      	bne.n	800337c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b09f      	sub	sp, #124	; 0x7c
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e089      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033b2:	2300      	movs	r3, #0
 80033b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033b6:	2300      	movs	r3, #0
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a42      	ldr	r2, [pc, #264]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	e001      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e068      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ffb8 	bl	8003364 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ffb2 	bl	8003364 <LL_ADC_REG_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d14a      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003408:	2b00      	cmp	r3, #0
 800340a:	d147      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800340e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d027      	beq.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342a:	035b      	lsls	r3, r3, #13
 800342c:	430b      	orrs	r3, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003434:	4824      	ldr	r0, [pc, #144]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003436:	f7ff ff82 	bl	800333e <LL_ADC_IsEnabled>
 800343a:	4604      	mov	r4, r0
 800343c:	4823      	ldr	r0, [pc, #140]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800343e:	f7ff ff7e 	bl	800333e <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	4323      	orrs	r3, r4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d132      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003452:	f023 030f 	bic.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	6811      	ldr	r1, [r2, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	430a      	orrs	r2, r1
 8003460:	431a      	orrs	r2, r3
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003466:	e023      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003476:	f7ff ff62 	bl	800333e <LL_ADC_IsEnabled>
 800347a:	4604      	mov	r4, r0
 800347c:	4813      	ldr	r0, [pc, #76]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800347e:	f7ff ff5e 	bl	800333e <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	4323      	orrs	r3, r4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d112      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003492:	f023 030f 	bic.w	r3, r3, #15
 8003496:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003498:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800349a:	e009      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034ae:	e000      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034be:	4618      	mov	r0, r3
 80034c0:	377c      	adds	r7, #124	; 0x7c
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	50040000 	.word	0x50040000
 80034cc:	50040100 	.word	0x50040100
 80034d0:	50040300 	.word	0x50040300

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff47 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff5c 	bl	800351c <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff8e 	bl	800358c <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5d 	bl	8003538 <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ffb0 	bl	80035f4 <SysTick_Config>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ae:	e14e      	b.n	800394e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8140 	beq.w	8003948 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_GPIO_Init+0x40>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d130      	bne.n	8003742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003716:	2201      	movs	r2, #1
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0201 	and.w	r2, r3, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d017      	beq.n	800377e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d123      	bne.n	80037d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	6939      	ldr	r1, [r7, #16]
 80037ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 809a 	beq.w	8003948 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_GPIO_Init+0x2cc>)
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	4a54      	ldr	r2, [pc, #336]	; (800396c <HAL_GPIO_Init+0x2cc>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6613      	str	r3, [r2, #96]	; 0x60
 8003820:	4b52      	ldr	r3, [pc, #328]	; (800396c <HAL_GPIO_Init+0x2cc>)
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800382c:	4a50      	ldr	r2, [pc, #320]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003856:	d013      	beq.n	8003880 <HAL_GPIO_Init+0x1e0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <HAL_GPIO_Init+0x2d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00d      	beq.n	800387c <HAL_GPIO_Init+0x1dc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a45      	ldr	r2, [pc, #276]	; (8003978 <HAL_GPIO_Init+0x2d8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <HAL_GPIO_Init+0x1d8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a44      	ldr	r2, [pc, #272]	; (800397c <HAL_GPIO_Init+0x2dc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_GPIO_Init+0x1d4>
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x1e2>
 8003874:	2307      	movs	r3, #7
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x1e2>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x1e2>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x1e2>
 8003880:	2300      	movs	r3, #0
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a0:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c4:	4a2e      	ldr	r2, [pc, #184]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038f4:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f aea9 	bne.w	80036b0 <HAL_GPIO_Init+0x10>
  }
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	48000400 	.word	0x48000400
 8003978:	48000800 	.word	0x48000800
 800397c:	48000c00 	.word	0x48000c00
 8003980:	40010400 	.word	0x40010400

08003984 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_PWREx_GetVoltageRange+0x18>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40007000 	.word	0x40007000

080039a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d130      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d038      	beq.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2232      	movs	r2, #50	; 0x32
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9b      	lsrs	r3, r3, #18
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e4:	e002      	b.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f8:	d102      	bne.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f2      	bne.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0c:	d110      	bne.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00f      	b.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d007      	beq.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007000 	.word	0x40007000
 8003a44:	20000000 	.word	0x20000000
 8003a48:	431bde83 	.word	0x431bde83

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f000 bc52 	b.w	8004304 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a60:	4ba1      	ldr	r3, [pc, #644]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a6a:	4b9f      	ldr	r3, [pc, #636]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80e6 	beq.w	8003c4e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4c>
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	f040 808d 	bne.w	8003baa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 8089 	bne.w	8003baa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a98:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x66>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f000 bc29 	b.w	8004304 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCC_OscConfig+0x80>
 8003ac2:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aca:	e005      	b.n	8003ad8 <HAL_RCC_OscConfig+0x8c>
 8003acc:	4b86      	ldr	r3, [pc, #536]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d224      	bcs.n	8003b26 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fdd9 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f000 bc09 	b.w	8004304 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	4977      	ldr	r1, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b10:	4b75      	ldr	r3, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	4972      	ldr	r1, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	e025      	b.n	8003b72 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b26:	4b70      	ldr	r3, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6f      	ldr	r2, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	496a      	ldr	r1, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b44:	4b68      	ldr	r3, [pc, #416]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	4965      	ldr	r1, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fd98 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e3c8      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b72:	f000 fccd 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	495a      	ldr	r1, [pc, #360]	; (8003cec <HAL_RCC_OscConfig+0x2a0>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_OscConfig+0x2a4>)
 8003b90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b92:	4b58      	ldr	r3, [pc, #352]	; (8003cf4 <HAL_RCC_OscConfig+0x2a8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe f84c 	bl	8001c34 <HAL_InitTick>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d052      	beq.n	8003c4c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	e3ac      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d032      	beq.n	8003c18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4c      	ldr	r2, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f889 	bl	8001cd4 <HAL_GetTick>
 8003bc2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc6:	f7fe f885 	bl	8001cd4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e395      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	493a      	ldr	r1, [pc, #232]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	4935      	ldr	r1, [pc, #212]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	e01a      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c18:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a32      	ldr	r2, [pc, #200]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c24:	f7fe f856 	bl	8001cd4 <HAL_GetTick>
 8003c28:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c2c:	f7fe f852 	bl	8001cd4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e362      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x1e0>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d073      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x220>
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d10e      	bne.n	8003c84 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d063      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2f4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d15f      	bne.n	8003d40 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e33f      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x250>
 8003c8e:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x28c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x274>
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x28c>
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_RCC_OscConfig+0x29c>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fff8 	bl	8001cd4 <HAL_GetTick>
 8003ce4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce6:	e010      	b.n	8003d0a <HAL_RCC_OscConfig+0x2be>
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08009374 	.word	0x08009374
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd ffec 	bl	8001cd4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e2fc      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0a:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x2ac>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd ffdc 	bl	8001cd4 <HAL_GetTick>
 8003d1c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd ffd8 	bl	8001cd4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e2e8      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d32:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x2d4>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d060      	beq.n	8003e10 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x314>
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d119      	bne.n	8003d8e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d116      	bne.n	8003d8e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	4b8a      	ldr	r3, [pc, #552]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_OscConfig+0x32c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e2c5      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	4981      	ldr	r1, [pc, #516]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d8c:	e040      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d023      	beq.n	8003dde <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d96:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd ff97 	bl	8001cd4 <HAL_GetTick>
 8003da6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fd ff93 	bl	8001cd4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e2a3      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dbc:	4b73      	ldr	r3, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	496d      	ldr	r1, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
 8003ddc:	e018      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dde:	4b6b      	ldr	r3, [pc, #428]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6a      	ldr	r2, [pc, #424]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd ff73 	bl	8001cd4 <HAL_GetTick>
 8003dee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fd ff6f 	bl	8001cd4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e27f      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d07f      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05f      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d037      	beq.n	8003eaa <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e258      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003e5c:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e6c:	f7fd ff32 	bl	8001cd4 <HAL_GetTick>
 8003e70:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd ff2e 	bl	8001cd4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b11      	cmp	r3, #17
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e23e      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003e94:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9a:	f023 0210 	bic.w	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	493a      	ldr	r1, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb0:	4a36      	ldr	r2, [pc, #216]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd ff0b 	bl	8001cd4 <HAL_GetTick>
 8003ebe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fd ff07 	bl	8001cd4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b11      	cmp	r3, #17
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e217      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ef      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x476>
 8003ee2:	e01b      	b.n	8003f1c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eea:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd feee 	bl	8001cd4 <HAL_GetTick>
 8003ef8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fd feea 	bl	8001cd4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b11      	cmp	r3, #17
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e1fa      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ef      	bne.n	8003efc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80c1 	beq.w	80040ac <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10e      	bne.n	8003f5a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6593      	str	r3, [r2, #88]	; 0x58
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0x540>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <HAL_RCC_OscConfig+0x544>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_RCC_OscConfig+0x544>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x544>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fd feaf 	bl	8001cd4 <HAL_GetTick>
 8003f76:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	e00c      	b.n	8003f94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fd feab 	bl	8001cd4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d905      	bls.n	8003f94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1bb      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f94:	4bb1      	ldr	r3, [pc, #708]	; (800425c <HAL_RCC_OscConfig+0x810>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ec      	beq.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02c      	beq.n	8004006 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003fac:	4bac      	ldr	r3, [pc, #688]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	49a8      	ldr	r1, [pc, #672]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fd2:	4ba3      	ldr	r3, [pc, #652]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	4aa1      	ldr	r2, [pc, #644]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fda:	f043 0304 	orr.w	r3, r3, #4
 8003fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fe2:	4b9f      	ldr	r3, [pc, #636]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a9d      	ldr	r2, [pc, #628]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff2:	e018      	b.n	8004026 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ff4:	4b9a      	ldr	r3, [pc, #616]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	4a99      	ldr	r2, [pc, #612]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004004:	e00f      	b.n	8004026 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004006:	4b96      	ldr	r3, [pc, #600]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	4a94      	ldr	r2, [pc, #592]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004016:	4b92      	ldr	r3, [pc, #584]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	4a90      	ldr	r2, [pc, #576]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800401e:	f023 0304 	bic.w	r3, r3, #4
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd fe51 	bl	8001cd4 <HAL_GetTick>
 8004032:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fd fe4d 	bl	8001cd4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e15b      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404c:	4b84      	ldr	r3, [pc, #528]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ed      	beq.n	8004036 <HAL_RCC_OscConfig+0x5ea>
 800405a:	e01d      	b.n	8004098 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd fe3a 	bl	8001cd4 <HAL_GetTick>
 8004060:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd fe36 	bl	8001cd4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e144      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800407a:	4b79      	ldr	r3, [pc, #484]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ed      	bne.n	8004064 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004088:	4b75      	ldr	r3, [pc, #468]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	4a74      	ldr	r2, [pc, #464]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03c      	beq.n	8004132 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c0:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c6:	4a66      	ldr	r2, [pc, #408]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fe00 	bl	8001cd4 <HAL_GetTick>
 80040d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d8:	f7fd fdfc 	bl	8001cd4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e10c      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ea:	4b5d      	ldr	r3, [pc, #372]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCC_OscConfig+0x68c>
 80040f8:	e01b      	b.n	8004132 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040fa:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80040fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004100:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd fde3 	bl	8001cd4 <HAL_GetTick>
 800410e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004112:	f7fd fddf 	bl	8001cd4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0ef      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004124:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80e3 	beq.w	8004302 <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2b02      	cmp	r3, #2
 8004142:	f040 80b7 	bne.w	80042b4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004146:	4b46      	ldr	r3, [pc, #280]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f003 0203 	and.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	429a      	cmp	r2, r3
 8004158:	d124      	bne.n	80041a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	3b01      	subs	r3, #1
 8004166:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d11b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d113      	bne.n	80041a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d109      	bne.n	80041a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	3b01      	subs	r3, #1
 800419e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d061      	beq.n	8004268 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d056      	beq.n	8004258 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80041b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b6:	f7fd fd8d 	bl	8001cd4 <HAL_GetTick>
 80041ba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fd fd89 	bl	8001cd4 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e099      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041dc:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_OscConfig+0x818>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f6:	0212      	lsls	r2, r2, #8
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fe:	0852      	lsrs	r2, r2, #1
 8004200:	3a01      	subs	r2, #1
 8004202:	0552      	lsls	r2, r2, #21
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0652      	lsls	r2, r2, #25
 8004210:	430a      	orrs	r2, r1
 8004212:	4913      	ldr	r1, [pc, #76]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a10      	ldr	r2, [pc, #64]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800422a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004230:	f7fd fd50 	bl	8001cd4 <HAL_GetTick>
 8004234:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd fd4c 	bl	8001cd4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e05c      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_OscConfig+0x814>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004256:	e054      	b.n	8004302 <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e053      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
 800425c:	40007000 	.word	0x40007000
 8004260:	40021000 	.word	0x40021000
 8004264:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004268:	4b28      	ldr	r3, [pc, #160]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d146      	bne.n	8004302 <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800428c:	f7fd fd22 	bl	8001cd4 <HAL_GetTick>
 8004290:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fd1e 	bl	8001cd4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e02e      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x848>
 80042b2:	e026      	b.n	8004302 <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d021      	beq.n	80042fe <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fd05 	bl	8001cd4 <HAL_GetTick>
 80042ca:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd fd01 	bl	8001cd4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e011      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <HAL_RCC_OscConfig+0x8c0>)
 80042f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	e001      	b.n	8004302 <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0e7      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b75      	ldr	r3, [pc, #468]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b72      	ldr	r3, [pc, #456]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 0207 	bic.w	r2, r3, #7
 800433a:	4970      	ldr	r1, [pc, #448]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b6e      	ldr	r3, [pc, #440]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cf      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	429a      	cmp	r2, r3
 800436e:	d908      	bls.n	8004382 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4960      	ldr	r1, [pc, #384]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04c      	beq.n	8004428 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d121      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a6      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d115      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e09a      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e08e      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e086      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4943      	ldr	r1, [pc, #268]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fd fc6c 	bl	8001cd4 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fd fc68 	bl	8001cd4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e06e      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	429a      	cmp	r2, r3
 8004442:	d208      	bcs.n	8004456 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	492b      	ldr	r1, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d210      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 0207 	bic.w	r2, r3, #7
 800446c:	4923      	ldr	r1, [pc, #140]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e036      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4918      	ldr	r1, [pc, #96]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4910      	ldr	r1, [pc, #64]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c4:	f000 f824 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	490b      	ldr	r1, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1f4>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1f8>)
 80044e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1fc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fba3 	bl	8001c34 <HAL_InitTick>
 80044ee:	4603      	mov	r3, r0
 80044f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80044f2:	7afb      	ldrb	r3, [r7, #11]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40022000 	.word	0x40022000
 8004500:	40021000 	.word	0x40021000
 8004504:	08009374 	.word	0x08009374
 8004508:	20000000 	.word	0x20000000
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d121      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d11e      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004544:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e005      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800456c:	4a2b      	ldr	r2, [pc, #172]	; (800461c <HAL_RCC_GetSysClockFreq+0x10c>)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10d      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d102      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_GetSysClockFreq+0x110>)
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e004      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d101      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004594:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_RCC_GetSysClockFreq+0x114>)
 8004596:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d134      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d003      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0xac>
 80045b4:	e005      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_GetSysClockFreq+0x110>)
 80045b8:	617b      	str	r3, [r7, #20]
      break;
 80045ba:	e005      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_RCC_GetSysClockFreq+0x114>)
 80045be:	617b      	str	r3, [r7, #20]
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	617b      	str	r3, [r7, #20]
      break;
 80045c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	fb02 f203 	mul.w	r2, r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	0e5b      	lsrs	r3, r3, #25
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	3301      	adds	r3, #1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004608:	69bb      	ldr	r3, [r7, #24]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	0800938c 	.word	0x0800938c
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200

08004628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4904      	ldr	r1, [pc, #16]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	08009384 	.word	0x08009384

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004670:	f7ff ffda 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0adb      	lsrs	r3, r3, #11
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4904      	ldr	r1, [pc, #16]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000
 8004694:	08009384 	.word	0x08009384

08004698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f968 	bl	8003984 <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
 80046b6:	e014      	b.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046d0:	f7ff f958 	bl	8003984 <HAL_PWREx_GetVoltageRange>
 80046d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d10b      	bne.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d919      	bls.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2ba0      	cmp	r3, #160	; 0xa0
 80046f4:	d902      	bls.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f6:	2302      	movs	r3, #2
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e013      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e010      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d902      	bls.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004708:	2303      	movs	r3, #3
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e00a      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d102      	bne.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004714:	2302      	movs	r3, #2
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e004      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b70      	cmp	r3, #112	; 0x70
 800471e:	d101      	bne.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004720:	2301      	movs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	4909      	ldr	r1, [pc, #36]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	40022000 	.word	0x40022000

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 809e 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800477a:	4b46      	ldr	r3, [pc, #280]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800478a:	2300      	movs	r3, #0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	4b40      	ldr	r3, [pc, #256]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	6593      	str	r3, [r2, #88]	; 0x58
 800479c:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a8:	2301      	movs	r3, #1
 80047aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a39      	ldr	r2, [pc, #228]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047b8:	f7fd fa8c 	bl	8001cd4 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047be:	e009      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c0:	f7fd fa88 	bl	8001cd4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	74fb      	strb	r3, [r7, #19]
        break;
 80047d2:	e005      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047d4:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ef      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d15a      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047e6:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d019      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800481e:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800482e:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d016      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fd fa48 	bl	8001cd4 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004846:	e00b      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd fa44 	bl	8001cd4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d902      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	74fb      	strb	r3, [r7, #19]
            break;
 800485e:	e006      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ec      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4904      	ldr	r1, [pc, #16]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800488a:	e009      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a0:	7c7b      	ldrb	r3, [r7, #17]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b6e      	ldr	r3, [pc, #440]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4a6d      	ldr	r2, [pc, #436]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048be:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4964      	ldr	r1, [pc, #400]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e0:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f023 020c 	bic.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	495c      	ldr	r1, [pc, #368]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004902:	4b57      	ldr	r3, [pc, #348]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4953      	ldr	r1, [pc, #332]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	494b      	ldr	r1, [pc, #300]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4942      	ldr	r1, [pc, #264]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004968:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	493a      	ldr	r1, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	4931      	ldr	r1, [pc, #196]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	4929      	ldr	r1, [pc, #164]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4920      	ldr	r1, [pc, #128]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	4918      	ldr	r1, [pc, #96]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a10:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a54:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e049      	b.n	8004b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fe46 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 fb52 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e049      	b.n	8004bb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f841 	bl	8004bc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 fafb 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x24>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e03c      	b.n	8004c72 <HAL_TIM_PWM_Start+0x9e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d109      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x3e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e02f      	b.n	8004c72 <HAL_TIM_PWM_Start+0x9e>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d109      	bne.n	8004c2c <HAL_TIM_PWM_Start+0x58>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e022      	b.n	8004c72 <HAL_TIM_PWM_Start+0x9e>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d109      	bne.n	8004c46 <HAL_TIM_PWM_Start+0x72>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	e015      	b.n	8004c72 <HAL_TIM_PWM_Start+0x9e>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d109      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x8c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e008      	b.n	8004c72 <HAL_TIM_PWM_Start+0x9e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07e      	b.n	8004d78 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0xb6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	e023      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xfe>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0xc6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	e01b      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xfe>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Start+0xd6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca8:	e013      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xfe>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PWM_Start+0xe6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb8:	e00b      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xfe>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Start+0xf6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	e003      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xfe>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fdb2 	bl	8005844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <HAL_TIM_PWM_Start+0x1ac>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_TIM_PWM_Start+0x12a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <HAL_TIM_PWM_Start+0x1b0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_TIM_PWM_Start+0x12a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a23      	ldr	r2, [pc, #140]	; (8004d88 <HAL_TIM_PWM_Start+0x1b4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_Start+0x12e>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_PWM_Start+0x130>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_TIM_PWM_Start+0x1ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x162>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x162>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <HAL_TIM_PWM_Start+0x1b0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d115      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <HAL_TIM_PWM_Start+0x1b8>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b06      	cmp	r3, #6
 8004d46:	d015      	beq.n	8004d74 <HAL_TIM_PWM_Start+0x1a0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d011      	beq.n	8004d74 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	e008      	b.n	8004d74 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e000      	b.n	8004d76 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	00010007 	.word	0x00010007

08004d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0ff      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b14      	cmp	r3, #20
 8004dba:	f200 80f0 	bhi.w	8004f9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004f9f 	.word	0x08004f9f
 8004dcc:	08004f9f 	.word	0x08004f9f
 8004dd0:	08004f9f 	.word	0x08004f9f
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004f9f 	.word	0x08004f9f
 8004ddc:	08004f9f 	.word	0x08004f9f
 8004de0:	08004f9f 	.word	0x08004f9f
 8004de4:	08004e9b 	.word	0x08004e9b
 8004de8:	08004f9f 	.word	0x08004f9f
 8004dec:	08004f9f 	.word	0x08004f9f
 8004df0:	08004f9f 	.word	0x08004f9f
 8004df4:	08004edb 	.word	0x08004edb
 8004df8:	08004f9f 	.word	0x08004f9f
 8004dfc:	08004f9f 	.word	0x08004f9f
 8004e00:	08004f9f 	.word	0x08004f9f
 8004e04:	08004f1d 	.word	0x08004f1d
 8004e08:	08004f9f 	.word	0x08004f9f
 8004e0c:	08004f9f 	.word	0x08004f9f
 8004e10:	08004f9f 	.word	0x08004f9f
 8004e14:	08004f5d 	.word	0x08004f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f9f8 	bl	8005214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0204 	bic.w	r2, r2, #4
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
      break;
 8004e56:	e0a5      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fa54 	bl	800530c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	021a      	lsls	r2, r3, #8
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
      break;
 8004e98:	e084      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 faad 	bl	8005400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0208 	orr.w	r2, r2, #8
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0204 	bic.w	r2, r2, #4
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
      break;
 8004ed8:	e064      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fb05 	bl	80054f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69d9      	ldr	r1, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	021a      	lsls	r2, r3, #8
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
      break;
 8004f1a:	e043      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fb42 	bl	80055ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f5a:	e023      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fb7a 	bl	800565c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f9c:	e002      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop

08004fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0b6      	b.n	8005142 <HAL_TIM_ConfigClockSource+0x18a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0xd8>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x170>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	f000 8086 	beq.w	800512e <HAL_TIM_ConfigClockSource+0x176>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xaa>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x11e>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xfe>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x13e>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15e>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15e>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15e>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15e>
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f000 fbc7 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04f      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f000 fbb0 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fb24 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	; 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fb7d 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fb43 	bl	800576e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	; 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb6d 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fb04 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb5d 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 8005114:	e00c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fb54 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 8005126:	e003      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800512e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x20>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a21      	ldr	r2, [pc, #132]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00b      	beq.n	800519e <TIM_Base_SetConfig+0x52>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d007      	beq.n	800519e <TIM_Base_SetConfig+0x52>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1e      	ldr	r2, [pc, #120]	; (800520c <TIM_Base_SetConfig+0xc0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_Base_SetConfig+0x52>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <TIM_Base_SetConfig+0xc4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d108      	bne.n	80051b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0xa0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0b      	ldr	r2, [pc, #44]	; (800520c <TIM_Base_SetConfig+0xc0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xa0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <TIM_Base_SetConfig+0xc4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400

08005214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0302 	bic.w	r3, r3, #2
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a24      	ldr	r2, [pc, #144]	; (8005300 <TIM_OC1_SetConfig+0xec>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d007      	beq.n	8005284 <TIM_OC1_SetConfig+0x70>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a23      	ldr	r2, [pc, #140]	; (8005304 <TIM_OC1_SetConfig+0xf0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_OC1_SetConfig+0x70>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a22      	ldr	r2, [pc, #136]	; (8005308 <TIM_OC1_SetConfig+0xf4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10c      	bne.n	800529e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0308 	bic.w	r3, r3, #8
 800528a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <TIM_OC1_SetConfig+0xec>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_OC1_SetConfig+0xa2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a16      	ldr	r2, [pc, #88]	; (8005304 <TIM_OC1_SetConfig+0xf0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC1_SetConfig+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <TIM_OC1_SetConfig+0xf4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400

0800530c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0210 	bic.w	r2, r3, #16
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0320 	bic.w	r3, r3, #32
 800535a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_OC2_SetConfig+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10d      	bne.n	800538c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_OC2_SetConfig+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC2_SetConfig+0x98>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <TIM_OC2_SetConfig+0xec>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC2_SetConfig+0x98>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <TIM_OC2_SetConfig+0xf0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d113      	bne.n	80053cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400

08005400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_OC3_SetConfig+0x96>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <TIM_OC3_SetConfig+0xe8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3_SetConfig+0x96>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a16      	ldr	r2, [pc, #88]	; (80054ec <TIM_OC3_SetConfig+0xec>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d113      	bne.n	80054be <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400

080054f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <TIM_OC4_SetConfig+0xb0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <TIM_OC4_SetConfig+0xb4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a12      	ldr	r2, [pc, #72]	; (80055a8 <TIM_OC4_SetConfig+0xb8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d109      	bne.n	8005578 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40012c00 	.word	0x40012c00
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400

080055ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <TIM_OC5_SetConfig+0xa4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_OC5_SetConfig+0x6a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <TIM_OC5_SetConfig+0xa8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_OC5_SetConfig+0x6a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <TIM_OC5_SetConfig+0xac>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d109      	bne.n	800562a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400

0800565c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	051b      	lsls	r3, r3, #20
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a14      	ldr	r2, [pc, #80]	; (8005704 <TIM_OC6_SetConfig+0xa8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_OC6_SetConfig+0x6c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <TIM_OC6_SetConfig+0xac>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC6_SetConfig+0x6c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	; (800570c <TIM_OC6_SetConfig+0xb0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400

08005710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 030a 	bic.w	r3, r3, #10
 800574c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0210 	bic.w	r2, r3, #16
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	031b      	lsls	r3, r3, #12
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f043 0307 	orr.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2201      	movs	r2, #1
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	43db      	mvns	r3, r3
 8005866:	401a      	ands	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e04f      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a21      	ldr	r2, [pc, #132]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a14      	ldr	r2, [pc, #80]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40014000 	.word	0x40014000

0800595c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005974:	2302      	movs	r3, #2
 8005976:	e060      	b.n	8005a3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d115      	bne.n	8005a28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	051b      	lsls	r3, r3, #20
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00

08005a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e040      	b.n	8005ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fb feac 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2224      	movs	r2, #36	; 0x24
 8005a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8c0 	bl	8005c10 <UART_SetConfig>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e022      	b.n	8005ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fae8 	bl	8006078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb6f 	bl	80061bc <UART_CheckIdleState>
 8005ade:	4603      	mov	r3, r0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	f040 8082 	bne.w	8005c06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_UART_Transmit+0x26>
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e07a      	b.n	8005c08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_UART_Transmit+0x38>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e073      	b.n	8005c08 <HAL_UART_Transmit+0x120>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2221      	movs	r2, #33	; 0x21
 8005b34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b36:	f7fc f8cd 	bl	8001cd4 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b54:	d108      	bne.n	8005b68 <HAL_UART_Transmit+0x80>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e003      	b.n	8005b70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b78:	e02d      	b.n	8005bd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb62 	bl	800624e <UART_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e039      	b.n	8005c08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba6:	b292      	uxth	r2, r2
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3302      	adds	r3, #2
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e008      	b.n	8005bc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1cb      	bne.n	8005b7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2140      	movs	r1, #64	; 0x40
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb2e 	bl	800624e <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e005      	b.n	8005c08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4baa      	ldr	r3, [pc, #680]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a9f      	ldr	r2, [pc, #636]	; (8005ee8 <UART_SetConfig+0x2d8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a96      	ldr	r2, [pc, #600]	; (8005eec <UART_SetConfig+0x2dc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d121      	bne.n	8005cda <UART_SetConfig+0xca>
 8005c96:	4b96      	ldr	r3, [pc, #600]	; (8005ef0 <UART_SetConfig+0x2e0>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d817      	bhi.n	8005cd4 <UART_SetConfig+0xc4>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0x9c>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cc9 	.word	0x08005cc9
 8005cb4:	08005cc3 	.word	0x08005cc3
 8005cb8:	08005ccf 	.word	0x08005ccf
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	76fb      	strb	r3, [r7, #27]
 8005cc0:	e096      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	76fb      	strb	r3, [r7, #27]
 8005cc6:	e093      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e090      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e08d      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	e08a      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a85      	ldr	r2, [pc, #532]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d132      	bne.n	8005d4a <UART_SetConfig+0x13a>
 8005ce4:	4b82      	ldr	r3, [pc, #520]	; (8005ef0 <UART_SetConfig+0x2e0>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d828      	bhi.n	8005d44 <UART_SetConfig+0x134>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0xe8>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d45 	.word	0x08005d45
 8005d04:	08005d45 	.word	0x08005d45
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d45 	.word	0x08005d45
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d45 	.word	0x08005d45
 8005d18:	08005d33 	.word	0x08005d33
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d45 	.word	0x08005d45
 8005d28:	08005d3f 	.word	0x08005d3f
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	e05e      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d32:	2302      	movs	r3, #2
 8005d34:	76fb      	strb	r3, [r7, #27]
 8005d36:	e05b      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	76fb      	strb	r3, [r7, #27]
 8005d3c:	e058      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	76fb      	strb	r3, [r7, #27]
 8005d42:	e055      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d44:	2310      	movs	r3, #16
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e052      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6a      	ldr	r2, [pc, #424]	; (8005ef8 <UART_SetConfig+0x2e8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d120      	bne.n	8005d96 <UART_SetConfig+0x186>
 8005d54:	4b66      	ldr	r3, [pc, #408]	; (8005ef0 <UART_SetConfig+0x2e0>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d5e:	2b30      	cmp	r3, #48	; 0x30
 8005d60:	d013      	beq.n	8005d8a <UART_SetConfig+0x17a>
 8005d62:	2b30      	cmp	r3, #48	; 0x30
 8005d64:	d814      	bhi.n	8005d90 <UART_SetConfig+0x180>
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d009      	beq.n	8005d7e <UART_SetConfig+0x16e>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d810      	bhi.n	8005d90 <UART_SetConfig+0x180>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <UART_SetConfig+0x168>
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d006      	beq.n	8005d84 <UART_SetConfig+0x174>
 8005d76:	e00b      	b.n	8005d90 <UART_SetConfig+0x180>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	e038      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	76fb      	strb	r3, [r7, #27]
 8005d82:	e035      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d84:	2304      	movs	r3, #4
 8005d86:	76fb      	strb	r3, [r7, #27]
 8005d88:	e032      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	76fb      	strb	r3, [r7, #27]
 8005d8e:	e02f      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d90:	2310      	movs	r3, #16
 8005d92:	76fb      	strb	r3, [r7, #27]
 8005d94:	e02c      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a53      	ldr	r2, [pc, #332]	; (8005ee8 <UART_SetConfig+0x2d8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d125      	bne.n	8005dec <UART_SetConfig+0x1dc>
 8005da0:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <UART_SetConfig+0x2e0>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dae:	d017      	beq.n	8005de0 <UART_SetConfig+0x1d0>
 8005db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005db4:	d817      	bhi.n	8005de6 <UART_SetConfig+0x1d6>
 8005db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dba:	d00b      	beq.n	8005dd4 <UART_SetConfig+0x1c4>
 8005dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc0:	d811      	bhi.n	8005de6 <UART_SetConfig+0x1d6>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <UART_SetConfig+0x1be>
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dca:	d006      	beq.n	8005dda <UART_SetConfig+0x1ca>
 8005dcc:	e00b      	b.n	8005de6 <UART_SetConfig+0x1d6>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	76fb      	strb	r3, [r7, #27]
 8005dd2:	e00d      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	76fb      	strb	r3, [r7, #27]
 8005dd8:	e00a      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	76fb      	strb	r3, [r7, #27]
 8005dde:	e007      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005de0:	2308      	movs	r3, #8
 8005de2:	76fb      	strb	r3, [r7, #27]
 8005de4:	e004      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005de6:	2310      	movs	r3, #16
 8005de8:	76fb      	strb	r3, [r7, #27]
 8005dea:	e001      	b.n	8005df0 <UART_SetConfig+0x1e0>
 8005dec:	2310      	movs	r3, #16
 8005dee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <UART_SetConfig+0x2d8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f040 8082 	bne.w	8005f00 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dfc:	7efb      	ldrb	r3, [r7, #27]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d823      	bhi.n	8005e4a <UART_SetConfig+0x23a>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x1f8>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e4b 	.word	0x08005e4b
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e4b 	.word	0x08005e4b
 8005e18:	08005e3b 	.word	0x08005e3b
 8005e1c:	08005e4b 	.word	0x08005e4b
 8005e20:	08005e4b 	.word	0x08005e4b
 8005e24:	08005e4b 	.word	0x08005e4b
 8005e28:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fe fc08 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005e30:	6178      	str	r0, [r7, #20]
        break;
 8005e32:	e00f      	b.n	8005e54 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b31      	ldr	r3, [pc, #196]	; (8005efc <UART_SetConfig+0x2ec>)
 8005e36:	617b      	str	r3, [r7, #20]
        break;
 8005e38:	e00c      	b.n	8005e54 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fe fb69 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005e3e:	6178      	str	r0, [r7, #20]
        break;
 8005e40:	e008      	b.n	8005e54 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e46:	617b      	str	r3, [r7, #20]
        break;
 8005e48:	e004      	b.n	8005e54 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	76bb      	strb	r3, [r7, #26]
        break;
 8005e52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8100 	beq.w	800605c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d305      	bcc.n	8005e78 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d902      	bls.n	8005e7e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	76bb      	strb	r3, [r7, #26]
 8005e7c:	e0ee      	b.n	800605c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	020b      	lsls	r3, r1, #8
 8005e90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e94:	0202      	lsls	r2, r0, #8
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	6849      	ldr	r1, [r1, #4]
 8005e9a:	0849      	lsrs	r1, r1, #1
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	f04f 0100 	mov.w	r1, #0
 8005ea2:	1814      	adds	r4, r2, r0
 8005ea4:	eb43 0501 	adc.w	r5, r3, r1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f7fa fe97 	bl	8000be8 <__aeabi_uldivmod>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec8:	d308      	bcc.n	8005edc <UART_SetConfig+0x2cc>
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed0:	d204      	bcs.n	8005edc <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	e0bf      	b.n	800605c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	76bb      	strb	r3, [r7, #26]
 8005ee0:	e0bc      	b.n	800605c <UART_SetConfig+0x44c>
 8005ee2:	bf00      	nop
 8005ee4:	efff69f3 	.word	0xefff69f3
 8005ee8:	40008000 	.word	0x40008000
 8005eec:	40013800 	.word	0x40013800
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40004400 	.word	0x40004400
 8005ef8:	40004800 	.word	0x40004800
 8005efc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f08:	d15b      	bne.n	8005fc2 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8005f0a:	7efb      	ldrb	r3, [r7, #27]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d828      	bhi.n	8005f62 <UART_SetConfig+0x352>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x308>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f63 	.word	0x08005f63
 8005f28:	08005f53 	.word	0x08005f53
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f63 	.word	0x08005f63
 8005f34:	08005f63 	.word	0x08005f63
 8005f38:	08005f5b 	.word	0x08005f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7fe fb80 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005f40:	6178      	str	r0, [r7, #20]
        break;
 8005f42:	e013      	b.n	8005f6c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7fe fb92 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005f48:	6178      	str	r0, [r7, #20]
        break;
 8005f4a:	e00f      	b.n	8005f6c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f4c:	4b49      	ldr	r3, [pc, #292]	; (8006074 <UART_SetConfig+0x464>)
 8005f4e:	617b      	str	r3, [r7, #20]
        break;
 8005f50:	e00c      	b.n	8005f6c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f52:	f7fe fadd 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005f56:	6178      	str	r0, [r7, #20]
        break;
 8005f58:	e008      	b.n	8005f6c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5e:	617b      	str	r3, [r7, #20]
        break;
 8005f60:	e004      	b.n	8005f6c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	76bb      	strb	r3, [r7, #26]
        break;
 8005f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d074      	beq.n	800605c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	005a      	lsls	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d916      	bls.n	8005fbc <UART_SetConfig+0x3ac>
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d212      	bcs.n	8005fbc <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f023 030f 	bic.w	r3, r3, #15
 8005f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	89fa      	ldrh	r2, [r7, #14]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e04f      	b.n	800605c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	76bb      	strb	r3, [r7, #26]
 8005fc0:	e04c      	b.n	800605c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fc2:	7efb      	ldrb	r3, [r7, #27]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d828      	bhi.n	800601a <UART_SetConfig+0x40a>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x3c0>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	0800601b 	.word	0x0800601b
 8005fe0:	0800600b 	.word	0x0800600b
 8005fe4:	0800601b 	.word	0x0800601b
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	0800601b 	.word	0x0800601b
 8005ff0:	08006013 	.word	0x08006013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe fb24 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6178      	str	r0, [r7, #20]
        break;
 8005ffa:	e013      	b.n	8006024 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7fe fb36 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8006000:	6178      	str	r0, [r7, #20]
        break;
 8006002:	e00f      	b.n	8006024 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006004:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <UART_SetConfig+0x464>)
 8006006:	617b      	str	r3, [r7, #20]
        break;
 8006008:	e00c      	b.n	8006024 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600a:	f7fe fa81 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 800600e:	6178      	str	r0, [r7, #20]
        break;
 8006010:	e008      	b.n	8006024 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006016:	617b      	str	r3, [r7, #20]
        break;
 8006018:	e004      	b.n	8006024 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	76bb      	strb	r3, [r7, #26]
        break;
 8006022:	bf00      	nop
    }

    if (pclk != 0U)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	085a      	lsrs	r2, r3, #1
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	fbb2 f3f3 	udiv	r3, r2, r3
 800603c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b0f      	cmp	r3, #15
 8006042:	d909      	bls.n	8006058 <UART_SetConfig+0x448>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604a:	d205      	bcs.n	8006058 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e001      	b.n	800605c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006068:	7ebb      	ldrb	r3, [r7, #26]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bdb0      	pop	{r4, r5, r7, pc}
 8006072:	bf00      	nop
 8006074:	00f42400 	.word	0x00f42400

08006078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006176:	d10a      	bne.n	800618e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061cc:	f7fb fd82 	bl	8001cd4 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10e      	bne.n	80061fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f82d 	bl	800624e <UART_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e023      	b.n	8006246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d10e      	bne.n	800622a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f817 	bl	800624e <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e00d      	b.n	8006246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b09c      	sub	sp, #112	; 0x70
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4613      	mov	r3, r2
 800625c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625e:	e0a5      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006266:	f000 80a1 	beq.w	80063ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626a:	f7fb fd33 	bl	8001cd4 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <UART_WaitOnFlagUntilTimeout+0x32>
 800627a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627c:	2b00      	cmp	r3, #0
 800627e:	d13e      	bne.n	80062fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006294:	667b      	str	r3, [r7, #100]	; 0x64
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e6      	bne.n	8006280 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	663b      	str	r3, [r7, #96]	; 0x60
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e067      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d04f      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631a:	d147      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006324:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800633a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800634a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e6      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	613b      	str	r3, [r7, #16]
   return(result);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 0301 	bic.w	r3, r3, #1
 800636e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006378:	623a      	str	r2, [r7, #32]
 800637a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	61bb      	str	r3, [r7, #24]
   return(result);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e5      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e010      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f43f af4a 	beq.w	8006260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3770      	adds	r7, #112	; 0x70
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <__assert_func>:
 80063d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063da:	4614      	mov	r4, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <__assert_func+0x2c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4605      	mov	r5, r0
 80063e4:	68d8      	ldr	r0, [r3, #12]
 80063e6:	b14c      	cbz	r4, 80063fc <__assert_func+0x24>
 80063e8:	4b07      	ldr	r3, [pc, #28]	; (8006408 <__assert_func+0x30>)
 80063ea:	9100      	str	r1, [sp, #0]
 80063ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063f0:	4906      	ldr	r1, [pc, #24]	; (800640c <__assert_func+0x34>)
 80063f2:	462b      	mov	r3, r5
 80063f4:	f000 f814 	bl	8006420 <fiprintf>
 80063f8:	f000 ff02 	bl	8007200 <abort>
 80063fc:	4b04      	ldr	r3, [pc, #16]	; (8006410 <__assert_func+0x38>)
 80063fe:	461c      	mov	r4, r3
 8006400:	e7f3      	b.n	80063ea <__assert_func+0x12>
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
 8006408:	080093e3 	.word	0x080093e3
 800640c:	080093f0 	.word	0x080093f0
 8006410:	0800941e 	.word	0x0800941e

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	2000000c 	.word	0x2000000c

08006420 <fiprintf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	b503      	push	{r0, r1, lr}
 8006424:	4601      	mov	r1, r0
 8006426:	ab03      	add	r3, sp, #12
 8006428:	4805      	ldr	r0, [pc, #20]	; (8006440 <fiprintf+0x20>)
 800642a:	f853 2b04 	ldr.w	r2, [r3], #4
 800642e:	6800      	ldr	r0, [r0, #0]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	f000 f86b 	bl	800650c <_vfiprintf_r>
 8006436:	b002      	add	sp, #8
 8006438:	f85d eb04 	ldr.w	lr, [sp], #4
 800643c:	b003      	add	sp, #12
 800643e:	4770      	bx	lr
 8006440:	2000000c 	.word	0x2000000c

08006444 <__libc_init_array>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4d0d      	ldr	r5, [pc, #52]	; (800647c <__libc_init_array+0x38>)
 8006448:	4c0d      	ldr	r4, [pc, #52]	; (8006480 <__libc_init_array+0x3c>)
 800644a:	1b64      	subs	r4, r4, r5
 800644c:	10a4      	asrs	r4, r4, #2
 800644e:	2600      	movs	r6, #0
 8006450:	42a6      	cmp	r6, r4
 8006452:	d109      	bne.n	8006468 <__libc_init_array+0x24>
 8006454:	4d0b      	ldr	r5, [pc, #44]	; (8006484 <__libc_init_array+0x40>)
 8006456:	4c0c      	ldr	r4, [pc, #48]	; (8006488 <__libc_init_array+0x44>)
 8006458:	f002 ff06 	bl	8009268 <_init>
 800645c:	1b64      	subs	r4, r4, r5
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	2600      	movs	r6, #0
 8006462:	42a6      	cmp	r6, r4
 8006464:	d105      	bne.n	8006472 <__libc_init_array+0x2e>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	f855 3b04 	ldr.w	r3, [r5], #4
 800646c:	4798      	blx	r3
 800646e:	3601      	adds	r6, #1
 8006470:	e7ee      	b.n	8006450 <__libc_init_array+0xc>
 8006472:	f855 3b04 	ldr.w	r3, [r5], #4
 8006476:	4798      	blx	r3
 8006478:	3601      	adds	r6, #1
 800647a:	e7f2      	b.n	8006462 <__libc_init_array+0x1e>
 800647c:	080097d0 	.word	0x080097d0
 8006480:	080097d0 	.word	0x080097d0
 8006484:	080097d0 	.word	0x080097d0
 8006488:	080097d4 	.word	0x080097d4

0800648c <memcpy>:
 800648c:	440a      	add	r2, r1
 800648e:	4291      	cmp	r1, r2
 8006490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006494:	d100      	bne.n	8006498 <memcpy+0xc>
 8006496:	4770      	bx	lr
 8006498:	b510      	push	{r4, lr}
 800649a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a2:	4291      	cmp	r1, r2
 80064a4:	d1f9      	bne.n	800649a <memcpy+0xe>
 80064a6:	bd10      	pop	{r4, pc}

080064a8 <memset>:
 80064a8:	4402      	add	r2, r0
 80064aa:	4603      	mov	r3, r0
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	f803 1b01 	strb.w	r1, [r3], #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <__sfputc_r>:
 80064b8:	6893      	ldr	r3, [r2, #8]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	b410      	push	{r4}
 80064c0:	6093      	str	r3, [r2, #8]
 80064c2:	da08      	bge.n	80064d6 <__sfputc_r+0x1e>
 80064c4:	6994      	ldr	r4, [r2, #24]
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	db01      	blt.n	80064ce <__sfputc_r+0x16>
 80064ca:	290a      	cmp	r1, #10
 80064cc:	d103      	bne.n	80064d6 <__sfputc_r+0x1e>
 80064ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d2:	f000 bdd5 	b.w	8007080 <__swbuf_r>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	1c58      	adds	r0, r3, #1
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	7019      	strb	r1, [r3, #0]
 80064de:	4608      	mov	r0, r1
 80064e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <__sfputs_r>:
 80064e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e8:	4606      	mov	r6, r0
 80064ea:	460f      	mov	r7, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	18d5      	adds	r5, r2, r3
 80064f0:	42ac      	cmp	r4, r5
 80064f2:	d101      	bne.n	80064f8 <__sfputs_r+0x12>
 80064f4:	2000      	movs	r0, #0
 80064f6:	e007      	b.n	8006508 <__sfputs_r+0x22>
 80064f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fc:	463a      	mov	r2, r7
 80064fe:	4630      	mov	r0, r6
 8006500:	f7ff ffda 	bl	80064b8 <__sfputc_r>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d1f3      	bne.n	80064f0 <__sfputs_r+0xa>
 8006508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800650c <_vfiprintf_r>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	460d      	mov	r5, r1
 8006512:	b09d      	sub	sp, #116	; 0x74
 8006514:	4614      	mov	r4, r2
 8006516:	4698      	mov	r8, r3
 8006518:	4606      	mov	r6, r0
 800651a:	b118      	cbz	r0, 8006524 <_vfiprintf_r+0x18>
 800651c:	6983      	ldr	r3, [r0, #24]
 800651e:	b90b      	cbnz	r3, 8006524 <_vfiprintf_r+0x18>
 8006520:	f001 fe08 	bl	8008134 <__sinit>
 8006524:	4b89      	ldr	r3, [pc, #548]	; (800674c <_vfiprintf_r+0x240>)
 8006526:	429d      	cmp	r5, r3
 8006528:	d11b      	bne.n	8006562 <_vfiprintf_r+0x56>
 800652a:	6875      	ldr	r5, [r6, #4]
 800652c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652e:	07d9      	lsls	r1, r3, #31
 8006530:	d405      	bmi.n	800653e <_vfiprintf_r+0x32>
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	059a      	lsls	r2, r3, #22
 8006536:	d402      	bmi.n	800653e <_vfiprintf_r+0x32>
 8006538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800653a:	f001 fe9e 	bl	800827a <__retarget_lock_acquire_recursive>
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	071b      	lsls	r3, r3, #28
 8006542:	d501      	bpl.n	8006548 <_vfiprintf_r+0x3c>
 8006544:	692b      	ldr	r3, [r5, #16]
 8006546:	b9eb      	cbnz	r3, 8006584 <_vfiprintf_r+0x78>
 8006548:	4629      	mov	r1, r5
 800654a:	4630      	mov	r0, r6
 800654c:	f000 fdea 	bl	8007124 <__swsetup_r>
 8006550:	b1c0      	cbz	r0, 8006584 <_vfiprintf_r+0x78>
 8006552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006554:	07dc      	lsls	r4, r3, #31
 8006556:	d50e      	bpl.n	8006576 <_vfiprintf_r+0x6a>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655c:	b01d      	add	sp, #116	; 0x74
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	4b7b      	ldr	r3, [pc, #492]	; (8006750 <_vfiprintf_r+0x244>)
 8006564:	429d      	cmp	r5, r3
 8006566:	d101      	bne.n	800656c <_vfiprintf_r+0x60>
 8006568:	68b5      	ldr	r5, [r6, #8]
 800656a:	e7df      	b.n	800652c <_vfiprintf_r+0x20>
 800656c:	4b79      	ldr	r3, [pc, #484]	; (8006754 <_vfiprintf_r+0x248>)
 800656e:	429d      	cmp	r5, r3
 8006570:	bf08      	it	eq
 8006572:	68f5      	ldreq	r5, [r6, #12]
 8006574:	e7da      	b.n	800652c <_vfiprintf_r+0x20>
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	0598      	lsls	r0, r3, #22
 800657a:	d4ed      	bmi.n	8006558 <_vfiprintf_r+0x4c>
 800657c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657e:	f001 fe7d 	bl	800827c <__retarget_lock_release_recursive>
 8006582:	e7e9      	b.n	8006558 <_vfiprintf_r+0x4c>
 8006584:	2300      	movs	r3, #0
 8006586:	9309      	str	r3, [sp, #36]	; 0x24
 8006588:	2320      	movs	r3, #32
 800658a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800658e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006592:	2330      	movs	r3, #48	; 0x30
 8006594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006758 <_vfiprintf_r+0x24c>
 8006598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800659c:	f04f 0901 	mov.w	r9, #1
 80065a0:	4623      	mov	r3, r4
 80065a2:	469a      	mov	sl, r3
 80065a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a8:	b10a      	cbz	r2, 80065ae <_vfiprintf_r+0xa2>
 80065aa:	2a25      	cmp	r2, #37	; 0x25
 80065ac:	d1f9      	bne.n	80065a2 <_vfiprintf_r+0x96>
 80065ae:	ebba 0b04 	subs.w	fp, sl, r4
 80065b2:	d00b      	beq.n	80065cc <_vfiprintf_r+0xc0>
 80065b4:	465b      	mov	r3, fp
 80065b6:	4622      	mov	r2, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ff93 	bl	80064e6 <__sfputs_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f000 80aa 	beq.w	800671a <_vfiprintf_r+0x20e>
 80065c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c8:	445a      	add	r2, fp
 80065ca:	9209      	str	r2, [sp, #36]	; 0x24
 80065cc:	f89a 3000 	ldrb.w	r3, [sl]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80a2 	beq.w	800671a <_vfiprintf_r+0x20e>
 80065d6:	2300      	movs	r3, #0
 80065d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e0:	f10a 0a01 	add.w	sl, sl, #1
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ec:	931a      	str	r3, [sp, #104]	; 0x68
 80065ee:	4654      	mov	r4, sl
 80065f0:	2205      	movs	r2, #5
 80065f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f6:	4858      	ldr	r0, [pc, #352]	; (8006758 <_vfiprintf_r+0x24c>)
 80065f8:	f7f9 fdf2 	bl	80001e0 <memchr>
 80065fc:	9a04      	ldr	r2, [sp, #16]
 80065fe:	b9d8      	cbnz	r0, 8006638 <_vfiprintf_r+0x12c>
 8006600:	06d1      	lsls	r1, r2, #27
 8006602:	bf44      	itt	mi
 8006604:	2320      	movmi	r3, #32
 8006606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800660a:	0713      	lsls	r3, r2, #28
 800660c:	bf44      	itt	mi
 800660e:	232b      	movmi	r3, #43	; 0x2b
 8006610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006614:	f89a 3000 	ldrb.w	r3, [sl]
 8006618:	2b2a      	cmp	r3, #42	; 0x2a
 800661a:	d015      	beq.n	8006648 <_vfiprintf_r+0x13c>
 800661c:	9a07      	ldr	r2, [sp, #28]
 800661e:	4654      	mov	r4, sl
 8006620:	2000      	movs	r0, #0
 8006622:	f04f 0c0a 	mov.w	ip, #10
 8006626:	4621      	mov	r1, r4
 8006628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662c:	3b30      	subs	r3, #48	; 0x30
 800662e:	2b09      	cmp	r3, #9
 8006630:	d94e      	bls.n	80066d0 <_vfiprintf_r+0x1c4>
 8006632:	b1b0      	cbz	r0, 8006662 <_vfiprintf_r+0x156>
 8006634:	9207      	str	r2, [sp, #28]
 8006636:	e014      	b.n	8006662 <_vfiprintf_r+0x156>
 8006638:	eba0 0308 	sub.w	r3, r0, r8
 800663c:	fa09 f303 	lsl.w	r3, r9, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	46a2      	mov	sl, r4
 8006646:	e7d2      	b.n	80065ee <_vfiprintf_r+0xe2>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	1d19      	adds	r1, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9103      	str	r1, [sp, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	bfbb      	ittet	lt
 8006654:	425b      	neglt	r3, r3
 8006656:	f042 0202 	orrlt.w	r2, r2, #2
 800665a:	9307      	strge	r3, [sp, #28]
 800665c:	9307      	strlt	r3, [sp, #28]
 800665e:	bfb8      	it	lt
 8006660:	9204      	strlt	r2, [sp, #16]
 8006662:	7823      	ldrb	r3, [r4, #0]
 8006664:	2b2e      	cmp	r3, #46	; 0x2e
 8006666:	d10c      	bne.n	8006682 <_vfiprintf_r+0x176>
 8006668:	7863      	ldrb	r3, [r4, #1]
 800666a:	2b2a      	cmp	r3, #42	; 0x2a
 800666c:	d135      	bne.n	80066da <_vfiprintf_r+0x1ce>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	9203      	str	r2, [sp, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfb8      	it	lt
 800667a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800667e:	3402      	adds	r4, #2
 8006680:	9305      	str	r3, [sp, #20]
 8006682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006768 <_vfiprintf_r+0x25c>
 8006686:	7821      	ldrb	r1, [r4, #0]
 8006688:	2203      	movs	r2, #3
 800668a:	4650      	mov	r0, sl
 800668c:	f7f9 fda8 	bl	80001e0 <memchr>
 8006690:	b140      	cbz	r0, 80066a4 <_vfiprintf_r+0x198>
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	eba0 000a 	sub.w	r0, r0, sl
 8006698:	fa03 f000 	lsl.w	r0, r3, r0
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	4303      	orrs	r3, r0
 80066a0:	3401      	adds	r4, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a8:	482c      	ldr	r0, [pc, #176]	; (800675c <_vfiprintf_r+0x250>)
 80066aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ae:	2206      	movs	r2, #6
 80066b0:	f7f9 fd96 	bl	80001e0 <memchr>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d03f      	beq.n	8006738 <_vfiprintf_r+0x22c>
 80066b8:	4b29      	ldr	r3, [pc, #164]	; (8006760 <_vfiprintf_r+0x254>)
 80066ba:	bb1b      	cbnz	r3, 8006704 <_vfiprintf_r+0x1f8>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	3307      	adds	r3, #7
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	3308      	adds	r3, #8
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ca:	443b      	add	r3, r7
 80066cc:	9309      	str	r3, [sp, #36]	; 0x24
 80066ce:	e767      	b.n	80065a0 <_vfiprintf_r+0x94>
 80066d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d4:	460c      	mov	r4, r1
 80066d6:	2001      	movs	r0, #1
 80066d8:	e7a5      	b.n	8006626 <_vfiprintf_r+0x11a>
 80066da:	2300      	movs	r3, #0
 80066dc:	3401      	adds	r4, #1
 80066de:	9305      	str	r3, [sp, #20]
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 0c0a 	mov.w	ip, #10
 80066e6:	4620      	mov	r0, r4
 80066e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ec:	3a30      	subs	r2, #48	; 0x30
 80066ee:	2a09      	cmp	r2, #9
 80066f0:	d903      	bls.n	80066fa <_vfiprintf_r+0x1ee>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0c5      	beq.n	8006682 <_vfiprintf_r+0x176>
 80066f6:	9105      	str	r1, [sp, #20]
 80066f8:	e7c3      	b.n	8006682 <_vfiprintf_r+0x176>
 80066fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80066fe:	4604      	mov	r4, r0
 8006700:	2301      	movs	r3, #1
 8006702:	e7f0      	b.n	80066e6 <_vfiprintf_r+0x1da>
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	462a      	mov	r2, r5
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <_vfiprintf_r+0x258>)
 800670c:	a904      	add	r1, sp, #16
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f8cc 	bl	80068ac <_printf_float>
 8006714:	4607      	mov	r7, r0
 8006716:	1c78      	adds	r0, r7, #1
 8006718:	d1d6      	bne.n	80066c8 <_vfiprintf_r+0x1bc>
 800671a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800671c:	07d9      	lsls	r1, r3, #31
 800671e:	d405      	bmi.n	800672c <_vfiprintf_r+0x220>
 8006720:	89ab      	ldrh	r3, [r5, #12]
 8006722:	059a      	lsls	r2, r3, #22
 8006724:	d402      	bmi.n	800672c <_vfiprintf_r+0x220>
 8006726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006728:	f001 fda8 	bl	800827c <__retarget_lock_release_recursive>
 800672c:	89ab      	ldrh	r3, [r5, #12]
 800672e:	065b      	lsls	r3, r3, #25
 8006730:	f53f af12 	bmi.w	8006558 <_vfiprintf_r+0x4c>
 8006734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006736:	e711      	b.n	800655c <_vfiprintf_r+0x50>
 8006738:	ab03      	add	r3, sp, #12
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	462a      	mov	r2, r5
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <_vfiprintf_r+0x258>)
 8006740:	a904      	add	r1, sp, #16
 8006742:	4630      	mov	r0, r6
 8006744:	f000 fb56 	bl	8006df4 <_printf_i>
 8006748:	e7e4      	b.n	8006714 <_vfiprintf_r+0x208>
 800674a:	bf00      	nop
 800674c:	08009520 	.word	0x08009520
 8006750:	08009540 	.word	0x08009540
 8006754:	08009500 	.word	0x08009500
 8006758:	08009424 	.word	0x08009424
 800675c:	0800942e 	.word	0x0800942e
 8006760:	080068ad 	.word	0x080068ad
 8006764:	080064e7 	.word	0x080064e7
 8006768:	0800942a 	.word	0x0800942a

0800676c <__cvt>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	ec55 4b10 	vmov	r4, r5, d0
 8006774:	2d00      	cmp	r5, #0
 8006776:	460e      	mov	r6, r1
 8006778:	4619      	mov	r1, r3
 800677a:	462b      	mov	r3, r5
 800677c:	bfbb      	ittet	lt
 800677e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006782:	461d      	movlt	r5, r3
 8006784:	2300      	movge	r3, #0
 8006786:	232d      	movlt	r3, #45	; 0x2d
 8006788:	700b      	strb	r3, [r1, #0]
 800678a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800678c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006790:	4691      	mov	r9, r2
 8006792:	f023 0820 	bic.w	r8, r3, #32
 8006796:	bfbc      	itt	lt
 8006798:	4622      	movlt	r2, r4
 800679a:	4614      	movlt	r4, r2
 800679c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067a0:	d005      	beq.n	80067ae <__cvt+0x42>
 80067a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067a6:	d100      	bne.n	80067aa <__cvt+0x3e>
 80067a8:	3601      	adds	r6, #1
 80067aa:	2102      	movs	r1, #2
 80067ac:	e000      	b.n	80067b0 <__cvt+0x44>
 80067ae:	2103      	movs	r1, #3
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	ab02      	add	r3, sp, #8
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	ec45 4b10 	vmov	d0, r4, r5
 80067bc:	4653      	mov	r3, sl
 80067be:	4632      	mov	r2, r6
 80067c0:	f000 fdb2 	bl	8007328 <_dtoa_r>
 80067c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067c8:	4607      	mov	r7, r0
 80067ca:	d102      	bne.n	80067d2 <__cvt+0x66>
 80067cc:	f019 0f01 	tst.w	r9, #1
 80067d0:	d022      	beq.n	8006818 <__cvt+0xac>
 80067d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067d6:	eb07 0906 	add.w	r9, r7, r6
 80067da:	d110      	bne.n	80067fe <__cvt+0x92>
 80067dc:	783b      	ldrb	r3, [r7, #0]
 80067de:	2b30      	cmp	r3, #48	; 0x30
 80067e0:	d10a      	bne.n	80067f8 <__cvt+0x8c>
 80067e2:	2200      	movs	r2, #0
 80067e4:	2300      	movs	r3, #0
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7fa f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ee:	b918      	cbnz	r0, 80067f8 <__cvt+0x8c>
 80067f0:	f1c6 0601 	rsb	r6, r6, #1
 80067f4:	f8ca 6000 	str.w	r6, [sl]
 80067f8:	f8da 3000 	ldr.w	r3, [sl]
 80067fc:	4499      	add	r9, r3
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f7fa f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800680a:	b108      	cbz	r0, 8006810 <__cvt+0xa4>
 800680c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006810:	2230      	movs	r2, #48	; 0x30
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	454b      	cmp	r3, r9
 8006816:	d307      	bcc.n	8006828 <__cvt+0xbc>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800681c:	1bdb      	subs	r3, r3, r7
 800681e:	4638      	mov	r0, r7
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	b004      	add	sp, #16
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	1c59      	adds	r1, r3, #1
 800682a:	9103      	str	r1, [sp, #12]
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e7f0      	b.n	8006812 <__cvt+0xa6>

08006830 <__exponent>:
 8006830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006832:	4603      	mov	r3, r0
 8006834:	2900      	cmp	r1, #0
 8006836:	bfb8      	it	lt
 8006838:	4249      	neglt	r1, r1
 800683a:	f803 2b02 	strb.w	r2, [r3], #2
 800683e:	bfb4      	ite	lt
 8006840:	222d      	movlt	r2, #45	; 0x2d
 8006842:	222b      	movge	r2, #43	; 0x2b
 8006844:	2909      	cmp	r1, #9
 8006846:	7042      	strb	r2, [r0, #1]
 8006848:	dd2a      	ble.n	80068a0 <__exponent+0x70>
 800684a:	f10d 0407 	add.w	r4, sp, #7
 800684e:	46a4      	mov	ip, r4
 8006850:	270a      	movs	r7, #10
 8006852:	46a6      	mov	lr, r4
 8006854:	460a      	mov	r2, r1
 8006856:	fb91 f6f7 	sdiv	r6, r1, r7
 800685a:	fb07 1516 	mls	r5, r7, r6, r1
 800685e:	3530      	adds	r5, #48	; 0x30
 8006860:	2a63      	cmp	r2, #99	; 0x63
 8006862:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006866:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800686a:	4631      	mov	r1, r6
 800686c:	dcf1      	bgt.n	8006852 <__exponent+0x22>
 800686e:	3130      	adds	r1, #48	; 0x30
 8006870:	f1ae 0502 	sub.w	r5, lr, #2
 8006874:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006878:	1c44      	adds	r4, r0, #1
 800687a:	4629      	mov	r1, r5
 800687c:	4561      	cmp	r1, ip
 800687e:	d30a      	bcc.n	8006896 <__exponent+0x66>
 8006880:	f10d 0209 	add.w	r2, sp, #9
 8006884:	eba2 020e 	sub.w	r2, r2, lr
 8006888:	4565      	cmp	r5, ip
 800688a:	bf88      	it	hi
 800688c:	2200      	movhi	r2, #0
 800688e:	4413      	add	r3, r2
 8006890:	1a18      	subs	r0, r3, r0
 8006892:	b003      	add	sp, #12
 8006894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800689a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800689e:	e7ed      	b.n	800687c <__exponent+0x4c>
 80068a0:	2330      	movs	r3, #48	; 0x30
 80068a2:	3130      	adds	r1, #48	; 0x30
 80068a4:	7083      	strb	r3, [r0, #2]
 80068a6:	70c1      	strb	r1, [r0, #3]
 80068a8:	1d03      	adds	r3, r0, #4
 80068aa:	e7f1      	b.n	8006890 <__exponent+0x60>

080068ac <_printf_float>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	ed2d 8b02 	vpush	{d8}
 80068b4:	b08d      	sub	sp, #52	; 0x34
 80068b6:	460c      	mov	r4, r1
 80068b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068bc:	4616      	mov	r6, r2
 80068be:	461f      	mov	r7, r3
 80068c0:	4605      	mov	r5, r0
 80068c2:	f001 fcd5 	bl	8008270 <_localeconv_r>
 80068c6:	f8d0 a000 	ldr.w	sl, [r0]
 80068ca:	4650      	mov	r0, sl
 80068cc:	f7f9 fc80 	bl	80001d0 <strlen>
 80068d0:	2300      	movs	r3, #0
 80068d2:	930a      	str	r3, [sp, #40]	; 0x28
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	f8d8 3000 	ldr.w	r3, [r8]
 80068dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068e0:	3307      	adds	r3, #7
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	f103 0208 	add.w	r2, r3, #8
 80068ea:	f8c8 2000 	str.w	r2, [r8]
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	f8cd 8018 	str.w	r8, [sp, #24]
 8006904:	ee08 0a10 	vmov	s16, r0
 8006908:	4b9f      	ldr	r3, [pc, #636]	; (8006b88 <_printf_float+0x2dc>)
 800690a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006912:	f7fa f90b 	bl	8000b2c <__aeabi_dcmpun>
 8006916:	bb88      	cbnz	r0, 800697c <_printf_float+0xd0>
 8006918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691c:	4b9a      	ldr	r3, [pc, #616]	; (8006b88 <_printf_float+0x2dc>)
 800691e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006922:	f7fa f8e5 	bl	8000af0 <__aeabi_dcmple>
 8006926:	bb48      	cbnz	r0, 800697c <_printf_float+0xd0>
 8006928:	2200      	movs	r2, #0
 800692a:	2300      	movs	r3, #0
 800692c:	4640      	mov	r0, r8
 800692e:	4649      	mov	r1, r9
 8006930:	f7fa f8d4 	bl	8000adc <__aeabi_dcmplt>
 8006934:	b110      	cbz	r0, 800693c <_printf_float+0x90>
 8006936:	232d      	movs	r3, #45	; 0x2d
 8006938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693c:	4b93      	ldr	r3, [pc, #588]	; (8006b8c <_printf_float+0x2e0>)
 800693e:	4894      	ldr	r0, [pc, #592]	; (8006b90 <_printf_float+0x2e4>)
 8006940:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006944:	bf94      	ite	ls
 8006946:	4698      	movls	r8, r3
 8006948:	4680      	movhi	r8, r0
 800694a:	2303      	movs	r3, #3
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	f023 0204 	bic.w	r2, r3, #4
 8006954:	6022      	str	r2, [r4, #0]
 8006956:	f04f 0900 	mov.w	r9, #0
 800695a:	9700      	str	r7, [sp, #0]
 800695c:	4633      	mov	r3, r6
 800695e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f9d8 	bl	8006d18 <_printf_common>
 8006968:	3001      	adds	r0, #1
 800696a:	f040 8090 	bne.w	8006a8e <_printf_float+0x1e2>
 800696e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006972:	b00d      	add	sp, #52	; 0x34
 8006974:	ecbd 8b02 	vpop	{d8}
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	4642      	mov	r2, r8
 800697e:	464b      	mov	r3, r9
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7fa f8d2 	bl	8000b2c <__aeabi_dcmpun>
 8006988:	b140      	cbz	r0, 800699c <_printf_float+0xf0>
 800698a:	464b      	mov	r3, r9
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfbc      	itt	lt
 8006990:	232d      	movlt	r3, #45	; 0x2d
 8006992:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006996:	487f      	ldr	r0, [pc, #508]	; (8006b94 <_printf_float+0x2e8>)
 8006998:	4b7f      	ldr	r3, [pc, #508]	; (8006b98 <_printf_float+0x2ec>)
 800699a:	e7d1      	b.n	8006940 <_printf_float+0x94>
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069a2:	9206      	str	r2, [sp, #24]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	d13f      	bne.n	8006a28 <_printf_float+0x17c>
 80069a8:	2306      	movs	r3, #6
 80069aa:	6063      	str	r3, [r4, #4]
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	6861      	ldr	r1, [r4, #4]
 80069b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069b4:	2300      	movs	r3, #0
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	ab0a      	add	r3, sp, #40	; 0x28
 80069ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069be:	ab09      	add	r3, sp, #36	; 0x24
 80069c0:	ec49 8b10 	vmov	d0, r8, r9
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7ff fecd 	bl	800676c <__cvt>
 80069d2:	9b06      	ldr	r3, [sp, #24]
 80069d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d6:	2b47      	cmp	r3, #71	; 0x47
 80069d8:	4680      	mov	r8, r0
 80069da:	d108      	bne.n	80069ee <_printf_float+0x142>
 80069dc:	1cc8      	adds	r0, r1, #3
 80069de:	db02      	blt.n	80069e6 <_printf_float+0x13a>
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	4299      	cmp	r1, r3
 80069e4:	dd41      	ble.n	8006a6a <_printf_float+0x1be>
 80069e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80069ea:	fa5f fb8b 	uxtb.w	fp, fp
 80069ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069f2:	d820      	bhi.n	8006a36 <_printf_float+0x18a>
 80069f4:	3901      	subs	r1, #1
 80069f6:	465a      	mov	r2, fp
 80069f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069fc:	9109      	str	r1, [sp, #36]	; 0x24
 80069fe:	f7ff ff17 	bl	8006830 <__exponent>
 8006a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a04:	1813      	adds	r3, r2, r0
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	4681      	mov	r9, r0
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	dc02      	bgt.n	8006a14 <_printf_float+0x168>
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	07d2      	lsls	r2, r2, #31
 8006a12:	d501      	bpl.n	8006a18 <_printf_float+0x16c>
 8006a14:	3301      	adds	r3, #1
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d09c      	beq.n	800695a <_printf_float+0xae>
 8006a20:	232d      	movs	r3, #45	; 0x2d
 8006a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a26:	e798      	b.n	800695a <_printf_float+0xae>
 8006a28:	9a06      	ldr	r2, [sp, #24]
 8006a2a:	2a47      	cmp	r2, #71	; 0x47
 8006a2c:	d1be      	bne.n	80069ac <_printf_float+0x100>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1bc      	bne.n	80069ac <_printf_float+0x100>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e7b9      	b.n	80069aa <_printf_float+0xfe>
 8006a36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a3a:	d118      	bne.n	8006a6e <_printf_float+0x1c2>
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	dd0b      	ble.n	8006a5a <_printf_float+0x1ae>
 8006a42:	6121      	str	r1, [r4, #16]
 8006a44:	b913      	cbnz	r3, 8006a4c <_printf_float+0x1a0>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	07d0      	lsls	r0, r2, #31
 8006a4a:	d502      	bpl.n	8006a52 <_printf_float+0x1a6>
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	440b      	add	r3, r1
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a54:	f04f 0900 	mov.w	r9, #0
 8006a58:	e7de      	b.n	8006a18 <_printf_float+0x16c>
 8006a5a:	b913      	cbnz	r3, 8006a62 <_printf_float+0x1b6>
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	07d2      	lsls	r2, r2, #31
 8006a60:	d501      	bpl.n	8006a66 <_printf_float+0x1ba>
 8006a62:	3302      	adds	r3, #2
 8006a64:	e7f4      	b.n	8006a50 <_printf_float+0x1a4>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e7f2      	b.n	8006a50 <_printf_float+0x1a4>
 8006a6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	4299      	cmp	r1, r3
 8006a72:	db05      	blt.n	8006a80 <_printf_float+0x1d4>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	6121      	str	r1, [r4, #16]
 8006a78:	07d8      	lsls	r0, r3, #31
 8006a7a:	d5ea      	bpl.n	8006a52 <_printf_float+0x1a6>
 8006a7c:	1c4b      	adds	r3, r1, #1
 8006a7e:	e7e7      	b.n	8006a50 <_printf_float+0x1a4>
 8006a80:	2900      	cmp	r1, #0
 8006a82:	bfd4      	ite	le
 8006a84:	f1c1 0202 	rsble	r2, r1, #2
 8006a88:	2201      	movgt	r2, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	e7e0      	b.n	8006a50 <_printf_float+0x1a4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	055a      	lsls	r2, r3, #21
 8006a92:	d407      	bmi.n	8006aa4 <_printf_float+0x1f8>
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	4642      	mov	r2, r8
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d12c      	bne.n	8006afc <_printf_float+0x250>
 8006aa2:	e764      	b.n	800696e <_printf_float+0xc2>
 8006aa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006aa8:	f240 80e0 	bls.w	8006c6c <_printf_float+0x3c0>
 8006aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f7fa f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d034      	beq.n	8006b26 <_printf_float+0x27a>
 8006abc:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <_printf_float+0x2f0>)
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f af51 	beq.w	800696e <_printf_float+0xc2>
 8006acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	db02      	blt.n	8006ada <_printf_float+0x22e>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07d8      	lsls	r0, r3, #31
 8006ad8:	d510      	bpl.n	8006afc <_printf_float+0x250>
 8006ada:	ee18 3a10 	vmov	r3, s16
 8006ade:	4652      	mov	r2, sl
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f af41 	beq.w	800696e <_printf_float+0xc2>
 8006aec:	f04f 0800 	mov.w	r8, #0
 8006af0:	f104 091a 	add.w	r9, r4, #26
 8006af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af6:	3b01      	subs	r3, #1
 8006af8:	4543      	cmp	r3, r8
 8006afa:	dc09      	bgt.n	8006b10 <_printf_float+0x264>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	f100 8105 	bmi.w	8006d0e <_printf_float+0x462>
 8006b04:	68e0      	ldr	r0, [r4, #12]
 8006b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b08:	4298      	cmp	r0, r3
 8006b0a:	bfb8      	it	lt
 8006b0c:	4618      	movlt	r0, r3
 8006b0e:	e730      	b.n	8006972 <_printf_float+0xc6>
 8006b10:	2301      	movs	r3, #1
 8006b12:	464a      	mov	r2, r9
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af27 	beq.w	800696e <_printf_float+0xc2>
 8006b20:	f108 0801 	add.w	r8, r8, #1
 8006b24:	e7e6      	b.n	8006af4 <_printf_float+0x248>
 8006b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dc39      	bgt.n	8006ba0 <_printf_float+0x2f4>
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <_printf_float+0x2f0>)
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f af19 	beq.w	800696e <_printf_float+0xc2>
 8006b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d102      	bne.n	8006b4a <_printf_float+0x29e>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	07d9      	lsls	r1, r3, #31
 8006b48:	d5d8      	bpl.n	8006afc <_printf_float+0x250>
 8006b4a:	ee18 3a10 	vmov	r3, s16
 8006b4e:	4652      	mov	r2, sl
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f af09 	beq.w	800696e <_printf_float+0xc2>
 8006b5c:	f04f 0900 	mov.w	r9, #0
 8006b60:	f104 0a1a 	add.w	sl, r4, #26
 8006b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b66:	425b      	negs	r3, r3
 8006b68:	454b      	cmp	r3, r9
 8006b6a:	dc01      	bgt.n	8006b70 <_printf_float+0x2c4>
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6e:	e792      	b.n	8006a96 <_printf_float+0x1ea>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4652      	mov	r2, sl
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f aef7 	beq.w	800696e <_printf_float+0xc2>
 8006b80:	f109 0901 	add.w	r9, r9, #1
 8006b84:	e7ee      	b.n	8006b64 <_printf_float+0x2b8>
 8006b86:	bf00      	nop
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	08009435 	.word	0x08009435
 8006b90:	08009439 	.word	0x08009439
 8006b94:	08009441 	.word	0x08009441
 8006b98:	0800943d 	.word	0x0800943d
 8006b9c:	08009445 	.word	0x08009445
 8006ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	bfa8      	it	ge
 8006ba8:	461a      	movge	r2, r3
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	4691      	mov	r9, r2
 8006bae:	dc37      	bgt.n	8006c20 <_printf_float+0x374>
 8006bb0:	f04f 0b00 	mov.w	fp, #0
 8006bb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bb8:	f104 021a 	add.w	r2, r4, #26
 8006bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	eba3 0309 	sub.w	r3, r3, r9
 8006bc4:	455b      	cmp	r3, fp
 8006bc6:	dc33      	bgt.n	8006c30 <_printf_float+0x384>
 8006bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	db3b      	blt.n	8006c48 <_printf_float+0x39c>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07da      	lsls	r2, r3, #31
 8006bd4:	d438      	bmi.n	8006c48 <_printf_float+0x39c>
 8006bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	eba2 0901 	sub.w	r9, r2, r1
 8006be2:	4599      	cmp	r9, r3
 8006be4:	bfa8      	it	ge
 8006be6:	4699      	movge	r9, r3
 8006be8:	f1b9 0f00 	cmp.w	r9, #0
 8006bec:	dc35      	bgt.n	8006c5a <_printf_float+0x3ae>
 8006bee:	f04f 0800 	mov.w	r8, #0
 8006bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bf6:	f104 0a1a 	add.w	sl, r4, #26
 8006bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	eba3 0309 	sub.w	r3, r3, r9
 8006c04:	4543      	cmp	r3, r8
 8006c06:	f77f af79 	ble.w	8006afc <_printf_float+0x250>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f aeaa 	beq.w	800696e <_printf_float+0xc2>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	e7ec      	b.n	8006bfa <_printf_float+0x34e>
 8006c20:	4613      	mov	r3, r2
 8006c22:	4631      	mov	r1, r6
 8006c24:	4642      	mov	r2, r8
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d1c0      	bne.n	8006bb0 <_printf_float+0x304>
 8006c2e:	e69e      	b.n	800696e <_printf_float+0xc2>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	9205      	str	r2, [sp, #20]
 8006c38:	47b8      	blx	r7
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f43f ae97 	beq.w	800696e <_printf_float+0xc2>
 8006c40:	9a05      	ldr	r2, [sp, #20]
 8006c42:	f10b 0b01 	add.w	fp, fp, #1
 8006c46:	e7b9      	b.n	8006bbc <_printf_float+0x310>
 8006c48:	ee18 3a10 	vmov	r3, s16
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	d1be      	bne.n	8006bd6 <_printf_float+0x32a>
 8006c58:	e689      	b.n	800696e <_printf_float+0xc2>
 8006c5a:	9a05      	ldr	r2, [sp, #20]
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	4442      	add	r2, r8
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	d1c1      	bne.n	8006bee <_printf_float+0x342>
 8006c6a:	e680      	b.n	800696e <_printf_float+0xc2>
 8006c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	dc01      	bgt.n	8006c76 <_printf_float+0x3ca>
 8006c72:	07db      	lsls	r3, r3, #31
 8006c74:	d538      	bpl.n	8006ce8 <_printf_float+0x43c>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4642      	mov	r2, r8
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f ae74 	beq.w	800696e <_printf_float+0xc2>
 8006c86:	ee18 3a10 	vmov	r3, s16
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f ae6b 	beq.w	800696e <_printf_float+0xc2>
 8006c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f7f9 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca4:	b9d8      	cbnz	r0, 8006cde <_printf_float+0x432>
 8006ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca8:	f108 0201 	add.w	r2, r8, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d10e      	bne.n	8006cd6 <_printf_float+0x42a>
 8006cb8:	e659      	b.n	800696e <_printf_float+0xc2>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4652      	mov	r2, sl
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f ae52 	beq.w	800696e <_printf_float+0xc2>
 8006cca:	f108 0801 	add.w	r8, r8, #1
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	4543      	cmp	r3, r8
 8006cd4:	dcf1      	bgt.n	8006cba <_printf_float+0x40e>
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cdc:	e6dc      	b.n	8006a98 <_printf_float+0x1ec>
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	f104 0a1a 	add.w	sl, r4, #26
 8006ce6:	e7f2      	b.n	8006cce <_printf_float+0x422>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4642      	mov	r2, r8
 8006cec:	e7df      	b.n	8006cae <_printf_float+0x402>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	464a      	mov	r2, r9
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae38 	beq.w	800696e <_printf_float+0xc2>
 8006cfe:	f108 0801 	add.w	r8, r8, #1
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d06:	1a5b      	subs	r3, r3, r1
 8006d08:	4543      	cmp	r3, r8
 8006d0a:	dcf0      	bgt.n	8006cee <_printf_float+0x442>
 8006d0c:	e6fa      	b.n	8006b04 <_printf_float+0x258>
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	f104 0919 	add.w	r9, r4, #25
 8006d16:	e7f4      	b.n	8006d02 <_printf_float+0x456>

08006d18 <_printf_common>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	4699      	mov	r9, r3
 8006d20:	688a      	ldr	r2, [r1, #8]
 8006d22:	690b      	ldr	r3, [r1, #16]
 8006d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	bfb8      	it	lt
 8006d2c:	4613      	movlt	r3, r2
 8006d2e:	6033      	str	r3, [r6, #0]
 8006d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d34:	4607      	mov	r7, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	b10a      	cbz	r2, 8006d3e <_printf_common+0x26>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	0699      	lsls	r1, r3, #26
 8006d42:	bf42      	ittt	mi
 8006d44:	6833      	ldrmi	r3, [r6, #0]
 8006d46:	3302      	addmi	r3, #2
 8006d48:	6033      	strmi	r3, [r6, #0]
 8006d4a:	6825      	ldr	r5, [r4, #0]
 8006d4c:	f015 0506 	ands.w	r5, r5, #6
 8006d50:	d106      	bne.n	8006d60 <_printf_common+0x48>
 8006d52:	f104 0a19 	add.w	sl, r4, #25
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	6832      	ldr	r2, [r6, #0]
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dc26      	bgt.n	8006dae <_printf_common+0x96>
 8006d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d64:	1e13      	subs	r3, r2, #0
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	bf18      	it	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	0692      	lsls	r2, r2, #26
 8006d6e:	d42b      	bmi.n	8006dc8 <_printf_common+0xb0>
 8006d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d74:	4649      	mov	r1, r9
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d01e      	beq.n	8006dbc <_printf_common+0xa4>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	68e5      	ldr	r5, [r4, #12]
 8006d82:	6832      	ldr	r2, [r6, #0]
 8006d84:	f003 0306 	and.w	r3, r3, #6
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	bf08      	it	eq
 8006d8c:	1aad      	subeq	r5, r5, r2
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	6922      	ldr	r2, [r4, #16]
 8006d92:	bf0c      	ite	eq
 8006d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d98:	2500      	movne	r5, #0
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	bfc4      	itt	gt
 8006d9e:	1a9b      	subgt	r3, r3, r2
 8006da0:	18ed      	addgt	r5, r5, r3
 8006da2:	2600      	movs	r6, #0
 8006da4:	341a      	adds	r4, #26
 8006da6:	42b5      	cmp	r5, r6
 8006da8:	d11a      	bne.n	8006de0 <_printf_common+0xc8>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e008      	b.n	8006dc0 <_printf_common+0xa8>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4652      	mov	r2, sl
 8006db2:	4649      	mov	r1, r9
 8006db4:	4638      	mov	r0, r7
 8006db6:	47c0      	blx	r8
 8006db8:	3001      	adds	r0, #1
 8006dba:	d103      	bne.n	8006dc4 <_printf_common+0xac>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	e7c6      	b.n	8006d56 <_printf_common+0x3e>
 8006dc8:	18e1      	adds	r1, r4, r3
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	2030      	movs	r0, #48	; 0x30
 8006dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd2:	4422      	add	r2, r4
 8006dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ddc:	3302      	adds	r3, #2
 8006dde:	e7c7      	b.n	8006d70 <_printf_common+0x58>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4622      	mov	r2, r4
 8006de4:	4649      	mov	r1, r9
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c0      	blx	r8
 8006dea:	3001      	adds	r0, #1
 8006dec:	d0e6      	beq.n	8006dbc <_printf_common+0xa4>
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7d9      	b.n	8006da6 <_printf_common+0x8e>
	...

08006df4 <_printf_i>:
 8006df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	460c      	mov	r4, r1
 8006dfa:	4691      	mov	r9, r2
 8006dfc:	7e27      	ldrb	r7, [r4, #24]
 8006dfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e00:	2f78      	cmp	r7, #120	; 0x78
 8006e02:	4680      	mov	r8, r0
 8006e04:	469a      	mov	sl, r3
 8006e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e0a:	d807      	bhi.n	8006e1c <_printf_i+0x28>
 8006e0c:	2f62      	cmp	r7, #98	; 0x62
 8006e0e:	d80a      	bhi.n	8006e26 <_printf_i+0x32>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f000 80d8 	beq.w	8006fc6 <_printf_i+0x1d2>
 8006e16:	2f58      	cmp	r7, #88	; 0x58
 8006e18:	f000 80a3 	beq.w	8006f62 <_printf_i+0x16e>
 8006e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e24:	e03a      	b.n	8006e9c <_printf_i+0xa8>
 8006e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e2a:	2b15      	cmp	r3, #21
 8006e2c:	d8f6      	bhi.n	8006e1c <_printf_i+0x28>
 8006e2e:	a001      	add	r0, pc, #4	; (adr r0, 8006e34 <_printf_i+0x40>)
 8006e30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e34:	08006e8d 	.word	0x08006e8d
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006e1d 	.word	0x08006e1d
 8006e40:	08006e1d 	.word	0x08006e1d
 8006e44:	08006e1d 	.word	0x08006e1d
 8006e48:	08006e1d 	.word	0x08006e1d
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006e1d 	.word	0x08006e1d
 8006e54:	08006e1d 	.word	0x08006e1d
 8006e58:	08006e1d 	.word	0x08006e1d
 8006e5c:	08006e1d 	.word	0x08006e1d
 8006e60:	08006fad 	.word	0x08006fad
 8006e64:	08006ed1 	.word	0x08006ed1
 8006e68:	08006f8f 	.word	0x08006f8f
 8006e6c:	08006e1d 	.word	0x08006e1d
 8006e70:	08006e1d 	.word	0x08006e1d
 8006e74:	08006fcf 	.word	0x08006fcf
 8006e78:	08006e1d 	.word	0x08006e1d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e1d 	.word	0x08006e1d
 8006e84:	08006e1d 	.word	0x08006e1d
 8006e88:	08006f97 	.word	0x08006f97
 8006e8c:	680b      	ldr	r3, [r1, #0]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	600a      	str	r2, [r1, #0]
 8006e94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0a3      	b.n	8006fe8 <_printf_i+0x1f4>
 8006ea0:	6825      	ldr	r5, [r4, #0]
 8006ea2:	6808      	ldr	r0, [r1, #0]
 8006ea4:	062e      	lsls	r6, r5, #24
 8006ea6:	f100 0304 	add.w	r3, r0, #4
 8006eaa:	d50a      	bpl.n	8006ec2 <_printf_i+0xce>
 8006eac:	6805      	ldr	r5, [r0, #0]
 8006eae:	600b      	str	r3, [r1, #0]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	da03      	bge.n	8006ebc <_printf_i+0xc8>
 8006eb4:	232d      	movs	r3, #45	; 0x2d
 8006eb6:	426d      	negs	r5, r5
 8006eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ebc:	485e      	ldr	r0, [pc, #376]	; (8007038 <_printf_i+0x244>)
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e019      	b.n	8006ef6 <_printf_i+0x102>
 8006ec2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ec6:	6805      	ldr	r5, [r0, #0]
 8006ec8:	600b      	str	r3, [r1, #0]
 8006eca:	bf18      	it	ne
 8006ecc:	b22d      	sxthne	r5, r5
 8006ece:	e7ef      	b.n	8006eb0 <_printf_i+0xbc>
 8006ed0:	680b      	ldr	r3, [r1, #0]
 8006ed2:	6825      	ldr	r5, [r4, #0]
 8006ed4:	1d18      	adds	r0, r3, #4
 8006ed6:	6008      	str	r0, [r1, #0]
 8006ed8:	0628      	lsls	r0, r5, #24
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0xec>
 8006edc:	681d      	ldr	r5, [r3, #0]
 8006ede:	e002      	b.n	8006ee6 <_printf_i+0xf2>
 8006ee0:	0669      	lsls	r1, r5, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0xe8>
 8006ee4:	881d      	ldrh	r5, [r3, #0]
 8006ee6:	4854      	ldr	r0, [pc, #336]	; (8007038 <_printf_i+0x244>)
 8006ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eea:	bf0c      	ite	eq
 8006eec:	2308      	moveq	r3, #8
 8006eee:	230a      	movne	r3, #10
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ef6:	6866      	ldr	r6, [r4, #4]
 8006ef8:	60a6      	str	r6, [r4, #8]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	bfa2      	ittt	ge
 8006efe:	6821      	ldrge	r1, [r4, #0]
 8006f00:	f021 0104 	bicge.w	r1, r1, #4
 8006f04:	6021      	strge	r1, [r4, #0]
 8006f06:	b90d      	cbnz	r5, 8006f0c <_printf_i+0x118>
 8006f08:	2e00      	cmp	r6, #0
 8006f0a:	d04d      	beq.n	8006fa8 <_printf_i+0x1b4>
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f12:	fb03 5711 	mls	r7, r3, r1, r5
 8006f16:	5dc7      	ldrb	r7, [r0, r7]
 8006f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f1c:	462f      	mov	r7, r5
 8006f1e:	42bb      	cmp	r3, r7
 8006f20:	460d      	mov	r5, r1
 8006f22:	d9f4      	bls.n	8006f0e <_printf_i+0x11a>
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d10b      	bne.n	8006f40 <_printf_i+0x14c>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	07df      	lsls	r7, r3, #31
 8006f2c:	d508      	bpl.n	8006f40 <_printf_i+0x14c>
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6861      	ldr	r1, [r4, #4]
 8006f32:	4299      	cmp	r1, r3
 8006f34:	bfde      	ittt	le
 8006f36:	2330      	movle	r3, #48	; 0x30
 8006f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006f40:	1b92      	subs	r2, r2, r6
 8006f42:	6122      	str	r2, [r4, #16]
 8006f44:	f8cd a000 	str.w	sl, [sp]
 8006f48:	464b      	mov	r3, r9
 8006f4a:	aa03      	add	r2, sp, #12
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4640      	mov	r0, r8
 8006f50:	f7ff fee2 	bl	8006d18 <_printf_common>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d14c      	bne.n	8006ff2 <_printf_i+0x1fe>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f5c:	b004      	add	sp, #16
 8006f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f62:	4835      	ldr	r0, [pc, #212]	; (8007038 <_printf_i+0x244>)
 8006f64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	680e      	ldr	r6, [r1, #0]
 8006f6c:	061f      	lsls	r7, r3, #24
 8006f6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f72:	600e      	str	r6, [r1, #0]
 8006f74:	d514      	bpl.n	8006fa0 <_printf_i+0x1ac>
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	bf44      	itt	mi
 8006f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7e:	6023      	strmi	r3, [r4, #0]
 8006f80:	b91d      	cbnz	r5, 8006f8a <_printf_i+0x196>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f023 0320 	bic.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	2310      	movs	r3, #16
 8006f8c:	e7b0      	b.n	8006ef0 <_printf_i+0xfc>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	f043 0320 	orr.w	r3, r3, #32
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	2378      	movs	r3, #120	; 0x78
 8006f98:	4828      	ldr	r0, [pc, #160]	; (800703c <_printf_i+0x248>)
 8006f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f9e:	e7e3      	b.n	8006f68 <_printf_i+0x174>
 8006fa0:	065e      	lsls	r6, r3, #25
 8006fa2:	bf48      	it	mi
 8006fa4:	b2ad      	uxthmi	r5, r5
 8006fa6:	e7e6      	b.n	8006f76 <_printf_i+0x182>
 8006fa8:	4616      	mov	r6, r2
 8006faa:	e7bb      	b.n	8006f24 <_printf_i+0x130>
 8006fac:	680b      	ldr	r3, [r1, #0]
 8006fae:	6826      	ldr	r6, [r4, #0]
 8006fb0:	6960      	ldr	r0, [r4, #20]
 8006fb2:	1d1d      	adds	r5, r3, #4
 8006fb4:	600d      	str	r5, [r1, #0]
 8006fb6:	0635      	lsls	r5, r6, #24
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	d501      	bpl.n	8006fc0 <_printf_i+0x1cc>
 8006fbc:	6018      	str	r0, [r3, #0]
 8006fbe:	e002      	b.n	8006fc6 <_printf_i+0x1d2>
 8006fc0:	0671      	lsls	r1, r6, #25
 8006fc2:	d5fb      	bpl.n	8006fbc <_printf_i+0x1c8>
 8006fc4:	8018      	strh	r0, [r3, #0]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	4616      	mov	r6, r2
 8006fcc:	e7ba      	b.n	8006f44 <_printf_i+0x150>
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	1d1a      	adds	r2, r3, #4
 8006fd2:	600a      	str	r2, [r1, #0]
 8006fd4:	681e      	ldr	r6, [r3, #0]
 8006fd6:	6862      	ldr	r2, [r4, #4]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7f9 f900 	bl	80001e0 <memchr>
 8006fe0:	b108      	cbz	r0, 8006fe6 <_printf_i+0x1f2>
 8006fe2:	1b80      	subs	r0, r0, r6
 8006fe4:	6060      	str	r0, [r4, #4]
 8006fe6:	6863      	ldr	r3, [r4, #4]
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	2300      	movs	r3, #0
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff0:	e7a8      	b.n	8006f44 <_printf_i+0x150>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	47d0      	blx	sl
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d0ab      	beq.n	8006f58 <_printf_i+0x164>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	079b      	lsls	r3, r3, #30
 8007004:	d413      	bmi.n	800702e <_printf_i+0x23a>
 8007006:	68e0      	ldr	r0, [r4, #12]
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	4298      	cmp	r0, r3
 800700c:	bfb8      	it	lt
 800700e:	4618      	movlt	r0, r3
 8007010:	e7a4      	b.n	8006f5c <_printf_i+0x168>
 8007012:	2301      	movs	r3, #1
 8007014:	4632      	mov	r2, r6
 8007016:	4649      	mov	r1, r9
 8007018:	4640      	mov	r0, r8
 800701a:	47d0      	blx	sl
 800701c:	3001      	adds	r0, #1
 800701e:	d09b      	beq.n	8006f58 <_printf_i+0x164>
 8007020:	3501      	adds	r5, #1
 8007022:	68e3      	ldr	r3, [r4, #12]
 8007024:	9903      	ldr	r1, [sp, #12]
 8007026:	1a5b      	subs	r3, r3, r1
 8007028:	42ab      	cmp	r3, r5
 800702a:	dcf2      	bgt.n	8007012 <_printf_i+0x21e>
 800702c:	e7eb      	b.n	8007006 <_printf_i+0x212>
 800702e:	2500      	movs	r5, #0
 8007030:	f104 0619 	add.w	r6, r4, #25
 8007034:	e7f5      	b.n	8007022 <_printf_i+0x22e>
 8007036:	bf00      	nop
 8007038:	08009447 	.word	0x08009447
 800703c:	08009458 	.word	0x08009458

08007040 <siprintf>:
 8007040:	b40e      	push	{r1, r2, r3}
 8007042:	b500      	push	{lr}
 8007044:	b09c      	sub	sp, #112	; 0x70
 8007046:	ab1d      	add	r3, sp, #116	; 0x74
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9006      	str	r0, [sp, #24]
 800704c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007050:	4809      	ldr	r0, [pc, #36]	; (8007078 <siprintf+0x38>)
 8007052:	9107      	str	r1, [sp, #28]
 8007054:	9104      	str	r1, [sp, #16]
 8007056:	4909      	ldr	r1, [pc, #36]	; (800707c <siprintf+0x3c>)
 8007058:	f853 2b04 	ldr.w	r2, [r3], #4
 800705c:	9105      	str	r1, [sp, #20]
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	a902      	add	r1, sp, #8
 8007064:	f001 fe4c 	bl	8008d00 <_svfiprintf_r>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	b01c      	add	sp, #112	; 0x70
 8007070:	f85d eb04 	ldr.w	lr, [sp], #4
 8007074:	b003      	add	sp, #12
 8007076:	4770      	bx	lr
 8007078:	2000000c 	.word	0x2000000c
 800707c:	ffff0208 	.word	0xffff0208

08007080 <__swbuf_r>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	460e      	mov	r6, r1
 8007084:	4614      	mov	r4, r2
 8007086:	4605      	mov	r5, r0
 8007088:	b118      	cbz	r0, 8007092 <__swbuf_r+0x12>
 800708a:	6983      	ldr	r3, [r0, #24]
 800708c:	b90b      	cbnz	r3, 8007092 <__swbuf_r+0x12>
 800708e:	f001 f851 	bl	8008134 <__sinit>
 8007092:	4b21      	ldr	r3, [pc, #132]	; (8007118 <__swbuf_r+0x98>)
 8007094:	429c      	cmp	r4, r3
 8007096:	d12b      	bne.n	80070f0 <__swbuf_r+0x70>
 8007098:	686c      	ldr	r4, [r5, #4]
 800709a:	69a3      	ldr	r3, [r4, #24]
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	071a      	lsls	r2, r3, #28
 80070a2:	d52f      	bpl.n	8007104 <__swbuf_r+0x84>
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	b36b      	cbz	r3, 8007104 <__swbuf_r+0x84>
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	6820      	ldr	r0, [r4, #0]
 80070ac:	1ac0      	subs	r0, r0, r3
 80070ae:	6963      	ldr	r3, [r4, #20]
 80070b0:	b2f6      	uxtb	r6, r6
 80070b2:	4283      	cmp	r3, r0
 80070b4:	4637      	mov	r7, r6
 80070b6:	dc04      	bgt.n	80070c2 <__swbuf_r+0x42>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 ffa6 	bl	800800c <_fflush_r>
 80070c0:	bb30      	cbnz	r0, 8007110 <__swbuf_r+0x90>
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	60a3      	str	r3, [r4, #8]
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	701e      	strb	r6, [r3, #0]
 80070d0:	6963      	ldr	r3, [r4, #20]
 80070d2:	3001      	adds	r0, #1
 80070d4:	4283      	cmp	r3, r0
 80070d6:	d004      	beq.n	80070e2 <__swbuf_r+0x62>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	07db      	lsls	r3, r3, #31
 80070dc:	d506      	bpl.n	80070ec <__swbuf_r+0x6c>
 80070de:	2e0a      	cmp	r6, #10
 80070e0:	d104      	bne.n	80070ec <__swbuf_r+0x6c>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 ff91 	bl	800800c <_fflush_r>
 80070ea:	b988      	cbnz	r0, 8007110 <__swbuf_r+0x90>
 80070ec:	4638      	mov	r0, r7
 80070ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <__swbuf_r+0x9c>)
 80070f2:	429c      	cmp	r4, r3
 80070f4:	d101      	bne.n	80070fa <__swbuf_r+0x7a>
 80070f6:	68ac      	ldr	r4, [r5, #8]
 80070f8:	e7cf      	b.n	800709a <__swbuf_r+0x1a>
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <__swbuf_r+0xa0>)
 80070fc:	429c      	cmp	r4, r3
 80070fe:	bf08      	it	eq
 8007100:	68ec      	ldreq	r4, [r5, #12]
 8007102:	e7ca      	b.n	800709a <__swbuf_r+0x1a>
 8007104:	4621      	mov	r1, r4
 8007106:	4628      	mov	r0, r5
 8007108:	f000 f80c 	bl	8007124 <__swsetup_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	d0cb      	beq.n	80070a8 <__swbuf_r+0x28>
 8007110:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007114:	e7ea      	b.n	80070ec <__swbuf_r+0x6c>
 8007116:	bf00      	nop
 8007118:	08009520 	.word	0x08009520
 800711c:	08009540 	.word	0x08009540
 8007120:	08009500 	.word	0x08009500

08007124 <__swsetup_r>:
 8007124:	4b32      	ldr	r3, [pc, #200]	; (80071f0 <__swsetup_r+0xcc>)
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	4606      	mov	r6, r0
 800712c:	460c      	mov	r4, r1
 800712e:	b125      	cbz	r5, 800713a <__swsetup_r+0x16>
 8007130:	69ab      	ldr	r3, [r5, #24]
 8007132:	b913      	cbnz	r3, 800713a <__swsetup_r+0x16>
 8007134:	4628      	mov	r0, r5
 8007136:	f000 fffd 	bl	8008134 <__sinit>
 800713a:	4b2e      	ldr	r3, [pc, #184]	; (80071f4 <__swsetup_r+0xd0>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d10f      	bne.n	8007160 <__swsetup_r+0x3c>
 8007140:	686c      	ldr	r4, [r5, #4]
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007148:	0719      	lsls	r1, r3, #28
 800714a:	d42c      	bmi.n	80071a6 <__swsetup_r+0x82>
 800714c:	06dd      	lsls	r5, r3, #27
 800714e:	d411      	bmi.n	8007174 <__swsetup_r+0x50>
 8007150:	2309      	movs	r3, #9
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800715e:	e03e      	b.n	80071de <__swsetup_r+0xba>
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <__swsetup_r+0xd4>)
 8007162:	429c      	cmp	r4, r3
 8007164:	d101      	bne.n	800716a <__swsetup_r+0x46>
 8007166:	68ac      	ldr	r4, [r5, #8]
 8007168:	e7eb      	b.n	8007142 <__swsetup_r+0x1e>
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <__swsetup_r+0xd8>)
 800716c:	429c      	cmp	r4, r3
 800716e:	bf08      	it	eq
 8007170:	68ec      	ldreq	r4, [r5, #12]
 8007172:	e7e6      	b.n	8007142 <__swsetup_r+0x1e>
 8007174:	0758      	lsls	r0, r3, #29
 8007176:	d512      	bpl.n	800719e <__swsetup_r+0x7a>
 8007178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717a:	b141      	cbz	r1, 800718e <__swsetup_r+0x6a>
 800717c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007180:	4299      	cmp	r1, r3
 8007182:	d002      	beq.n	800718a <__swsetup_r+0x66>
 8007184:	4630      	mov	r0, r6
 8007186:	f001 fc8f 	bl	8008aa8 <_free_r>
 800718a:	2300      	movs	r3, #0
 800718c:	6363      	str	r3, [r4, #52]	; 0x34
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	2300      	movs	r3, #0
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f043 0308 	orr.w	r3, r3, #8
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	b94b      	cbnz	r3, 80071be <__swsetup_r+0x9a>
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b4:	d003      	beq.n	80071be <__swsetup_r+0x9a>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4630      	mov	r0, r6
 80071ba:	f001 f885 	bl	80082c8 <__smakebuf_r>
 80071be:	89a0      	ldrh	r0, [r4, #12]
 80071c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071c4:	f010 0301 	ands.w	r3, r0, #1
 80071c8:	d00a      	beq.n	80071e0 <__swsetup_r+0xbc>
 80071ca:	2300      	movs	r3, #0
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	6963      	ldr	r3, [r4, #20]
 80071d0:	425b      	negs	r3, r3
 80071d2:	61a3      	str	r3, [r4, #24]
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	b943      	cbnz	r3, 80071ea <__swsetup_r+0xc6>
 80071d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071dc:	d1ba      	bne.n	8007154 <__swsetup_r+0x30>
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	0781      	lsls	r1, r0, #30
 80071e2:	bf58      	it	pl
 80071e4:	6963      	ldrpl	r3, [r4, #20]
 80071e6:	60a3      	str	r3, [r4, #8]
 80071e8:	e7f4      	b.n	80071d4 <__swsetup_r+0xb0>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e7f7      	b.n	80071de <__swsetup_r+0xba>
 80071ee:	bf00      	nop
 80071f0:	2000000c 	.word	0x2000000c
 80071f4:	08009520 	.word	0x08009520
 80071f8:	08009540 	.word	0x08009540
 80071fc:	08009500 	.word	0x08009500

08007200 <abort>:
 8007200:	b508      	push	{r3, lr}
 8007202:	2006      	movs	r0, #6
 8007204:	f001 feb4 	bl	8008f70 <raise>
 8007208:	2001      	movs	r0, #1
 800720a:	f7fa fb75 	bl	80018f8 <_exit>

0800720e <quorem>:
 800720e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007212:	6903      	ldr	r3, [r0, #16]
 8007214:	690c      	ldr	r4, [r1, #16]
 8007216:	42a3      	cmp	r3, r4
 8007218:	4607      	mov	r7, r0
 800721a:	f2c0 8081 	blt.w	8007320 <quorem+0x112>
 800721e:	3c01      	subs	r4, #1
 8007220:	f101 0814 	add.w	r8, r1, #20
 8007224:	f100 0514 	add.w	r5, r0, #20
 8007228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007236:	3301      	adds	r3, #1
 8007238:	429a      	cmp	r2, r3
 800723a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800723e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007242:	fbb2 f6f3 	udiv	r6, r2, r3
 8007246:	d331      	bcc.n	80072ac <quorem+0x9e>
 8007248:	f04f 0e00 	mov.w	lr, #0
 800724c:	4640      	mov	r0, r8
 800724e:	46ac      	mov	ip, r5
 8007250:	46f2      	mov	sl, lr
 8007252:	f850 2b04 	ldr.w	r2, [r0], #4
 8007256:	b293      	uxth	r3, r2
 8007258:	fb06 e303 	mla	r3, r6, r3, lr
 800725c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007260:	b29b      	uxth	r3, r3
 8007262:	ebaa 0303 	sub.w	r3, sl, r3
 8007266:	0c12      	lsrs	r2, r2, #16
 8007268:	f8dc a000 	ldr.w	sl, [ip]
 800726c:	fb06 e202 	mla	r2, r6, r2, lr
 8007270:	fa13 f38a 	uxtah	r3, r3, sl
 8007274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007278:	fa1f fa82 	uxth.w	sl, r2
 800727c:	f8dc 2000 	ldr.w	r2, [ip]
 8007280:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728e:	4581      	cmp	r9, r0
 8007290:	f84c 3b04 	str.w	r3, [ip], #4
 8007294:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007298:	d2db      	bcs.n	8007252 <quorem+0x44>
 800729a:	f855 300b 	ldr.w	r3, [r5, fp]
 800729e:	b92b      	cbnz	r3, 80072ac <quorem+0x9e>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	3b04      	subs	r3, #4
 80072a4:	429d      	cmp	r5, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	d32e      	bcc.n	8007308 <quorem+0xfa>
 80072aa:	613c      	str	r4, [r7, #16]
 80072ac:	4638      	mov	r0, r7
 80072ae:	f001 faeb 	bl	8008888 <__mcmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	db24      	blt.n	8007300 <quorem+0xf2>
 80072b6:	3601      	adds	r6, #1
 80072b8:	4628      	mov	r0, r5
 80072ba:	f04f 0c00 	mov.w	ip, #0
 80072be:	f858 2b04 	ldr.w	r2, [r8], #4
 80072c2:	f8d0 e000 	ldr.w	lr, [r0]
 80072c6:	b293      	uxth	r3, r2
 80072c8:	ebac 0303 	sub.w	r3, ip, r3
 80072cc:	0c12      	lsrs	r2, r2, #16
 80072ce:	fa13 f38e 	uxtah	r3, r3, lr
 80072d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e0:	45c1      	cmp	r9, r8
 80072e2:	f840 3b04 	str.w	r3, [r0], #4
 80072e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072ea:	d2e8      	bcs.n	80072be <quorem+0xb0>
 80072ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072f4:	b922      	cbnz	r2, 8007300 <quorem+0xf2>
 80072f6:	3b04      	subs	r3, #4
 80072f8:	429d      	cmp	r5, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	d30a      	bcc.n	8007314 <quorem+0x106>
 80072fe:	613c      	str	r4, [r7, #16]
 8007300:	4630      	mov	r0, r6
 8007302:	b003      	add	sp, #12
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	3b04      	subs	r3, #4
 800730c:	2a00      	cmp	r2, #0
 800730e:	d1cc      	bne.n	80072aa <quorem+0x9c>
 8007310:	3c01      	subs	r4, #1
 8007312:	e7c7      	b.n	80072a4 <quorem+0x96>
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	3b04      	subs	r3, #4
 8007318:	2a00      	cmp	r2, #0
 800731a:	d1f0      	bne.n	80072fe <quorem+0xf0>
 800731c:	3c01      	subs	r4, #1
 800731e:	e7eb      	b.n	80072f8 <quorem+0xea>
 8007320:	2000      	movs	r0, #0
 8007322:	e7ee      	b.n	8007302 <quorem+0xf4>
 8007324:	0000      	movs	r0, r0
	...

08007328 <_dtoa_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	ed2d 8b02 	vpush	{d8}
 8007330:	ec57 6b10 	vmov	r6, r7, d0
 8007334:	b095      	sub	sp, #84	; 0x54
 8007336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800733c:	9105      	str	r1, [sp, #20]
 800733e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007342:	4604      	mov	r4, r0
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	930f      	str	r3, [sp, #60]	; 0x3c
 8007348:	b975      	cbnz	r5, 8007368 <_dtoa_r+0x40>
 800734a:	2010      	movs	r0, #16
 800734c:	f000 fffc 	bl	8008348 <malloc>
 8007350:	4602      	mov	r2, r0
 8007352:	6260      	str	r0, [r4, #36]	; 0x24
 8007354:	b920      	cbnz	r0, 8007360 <_dtoa_r+0x38>
 8007356:	4bb2      	ldr	r3, [pc, #712]	; (8007620 <_dtoa_r+0x2f8>)
 8007358:	21ea      	movs	r1, #234	; 0xea
 800735a:	48b2      	ldr	r0, [pc, #712]	; (8007624 <_dtoa_r+0x2fc>)
 800735c:	f7ff f83c 	bl	80063d8 <__assert_func>
 8007360:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007364:	6005      	str	r5, [r0, #0]
 8007366:	60c5      	str	r5, [r0, #12]
 8007368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736a:	6819      	ldr	r1, [r3, #0]
 800736c:	b151      	cbz	r1, 8007384 <_dtoa_r+0x5c>
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	604a      	str	r2, [r1, #4]
 8007372:	2301      	movs	r3, #1
 8007374:	4093      	lsls	r3, r2
 8007376:	608b      	str	r3, [r1, #8]
 8007378:	4620      	mov	r0, r4
 800737a:	f001 f847 	bl	800840c <_Bfree>
 800737e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	1e3b      	subs	r3, r7, #0
 8007386:	bfb9      	ittee	lt
 8007388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800738c:	9303      	strlt	r3, [sp, #12]
 800738e:	2300      	movge	r3, #0
 8007390:	f8c8 3000 	strge.w	r3, [r8]
 8007394:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007398:	4ba3      	ldr	r3, [pc, #652]	; (8007628 <_dtoa_r+0x300>)
 800739a:	bfbc      	itt	lt
 800739c:	2201      	movlt	r2, #1
 800739e:	f8c8 2000 	strlt.w	r2, [r8]
 80073a2:	ea33 0309 	bics.w	r3, r3, r9
 80073a6:	d11b      	bne.n	80073e0 <_dtoa_r+0xb8>
 80073a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073b4:	4333      	orrs	r3, r6
 80073b6:	f000 857a 	beq.w	8007eae <_dtoa_r+0xb86>
 80073ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073bc:	b963      	cbnz	r3, 80073d8 <_dtoa_r+0xb0>
 80073be:	4b9b      	ldr	r3, [pc, #620]	; (800762c <_dtoa_r+0x304>)
 80073c0:	e024      	b.n	800740c <_dtoa_r+0xe4>
 80073c2:	4b9b      	ldr	r3, [pc, #620]	; (8007630 <_dtoa_r+0x308>)
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	9800      	ldr	r0, [sp, #0]
 80073ce:	b015      	add	sp, #84	; 0x54
 80073d0:	ecbd 8b02 	vpop	{d8}
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	4b94      	ldr	r3, [pc, #592]	; (800762c <_dtoa_r+0x304>)
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	3303      	adds	r3, #3
 80073de:	e7f3      	b.n	80073c8 <_dtoa_r+0xa0>
 80073e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073e4:	2200      	movs	r2, #0
 80073e6:	ec51 0b17 	vmov	r0, r1, d7
 80073ea:	2300      	movs	r3, #0
 80073ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80073f0:	f7f9 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f4:	4680      	mov	r8, r0
 80073f6:	b158      	cbz	r0, 8007410 <_dtoa_r+0xe8>
 80073f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073fa:	2301      	movs	r3, #1
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8551 	beq.w	8007ea8 <_dtoa_r+0xb80>
 8007406:	488b      	ldr	r0, [pc, #556]	; (8007634 <_dtoa_r+0x30c>)
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	1e43      	subs	r3, r0, #1
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	e7dd      	b.n	80073cc <_dtoa_r+0xa4>
 8007410:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007414:	aa12      	add	r2, sp, #72	; 0x48
 8007416:	a913      	add	r1, sp, #76	; 0x4c
 8007418:	4620      	mov	r0, r4
 800741a:	f001 fad9 	bl	80089d0 <__d2b>
 800741e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007422:	4683      	mov	fp, r0
 8007424:	2d00      	cmp	r5, #0
 8007426:	d07c      	beq.n	8007522 <_dtoa_r+0x1fa>
 8007428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800742e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007432:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007436:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800743a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800743e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007442:	4b7d      	ldr	r3, [pc, #500]	; (8007638 <_dtoa_r+0x310>)
 8007444:	2200      	movs	r2, #0
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f8 ff1d 	bl	8000288 <__aeabi_dsub>
 800744e:	a36e      	add	r3, pc, #440	; (adr r3, 8007608 <_dtoa_r+0x2e0>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f8d0 	bl	80005f8 <__aeabi_dmul>
 8007458:	a36d      	add	r3, pc, #436	; (adr r3, 8007610 <_dtoa_r+0x2e8>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f8 ff15 	bl	800028c <__adddf3>
 8007462:	4606      	mov	r6, r0
 8007464:	4628      	mov	r0, r5
 8007466:	460f      	mov	r7, r1
 8007468:	f7f9 f85c 	bl	8000524 <__aeabi_i2d>
 800746c:	a36a      	add	r3, pc, #424	; (adr r3, 8007618 <_dtoa_r+0x2f0>)
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	f7f9 f8c1 	bl	80005f8 <__aeabi_dmul>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f8 ff05 	bl	800028c <__adddf3>
 8007482:	4606      	mov	r6, r0
 8007484:	460f      	mov	r7, r1
 8007486:	f7f9 fb67 	bl	8000b58 <__aeabi_d2iz>
 800748a:	2200      	movs	r2, #0
 800748c:	4682      	mov	sl, r0
 800748e:	2300      	movs	r3, #0
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb22 	bl	8000adc <__aeabi_dcmplt>
 8007498:	b148      	cbz	r0, 80074ae <_dtoa_r+0x186>
 800749a:	4650      	mov	r0, sl
 800749c:	f7f9 f842 	bl	8000524 <__aeabi_i2d>
 80074a0:	4632      	mov	r2, r6
 80074a2:	463b      	mov	r3, r7
 80074a4:	f7f9 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80074a8:	b908      	cbnz	r0, 80074ae <_dtoa_r+0x186>
 80074aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074ae:	f1ba 0f16 	cmp.w	sl, #22
 80074b2:	d854      	bhi.n	800755e <_dtoa_r+0x236>
 80074b4:	4b61      	ldr	r3, [pc, #388]	; (800763c <_dtoa_r+0x314>)
 80074b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074c2:	f7f9 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d04b      	beq.n	8007562 <_dtoa_r+0x23a>
 80074ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074ce:	2300      	movs	r3, #0
 80074d0:	930e      	str	r3, [sp, #56]	; 0x38
 80074d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074d4:	1b5d      	subs	r5, r3, r5
 80074d6:	1e6b      	subs	r3, r5, #1
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	bf43      	ittte	mi
 80074dc:	2300      	movmi	r3, #0
 80074de:	f1c5 0801 	rsbmi	r8, r5, #1
 80074e2:	9304      	strmi	r3, [sp, #16]
 80074e4:	f04f 0800 	movpl.w	r8, #0
 80074e8:	f1ba 0f00 	cmp.w	sl, #0
 80074ec:	db3b      	blt.n	8007566 <_dtoa_r+0x23e>
 80074ee:	9b04      	ldr	r3, [sp, #16]
 80074f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80074f4:	4453      	add	r3, sl
 80074f6:	9304      	str	r3, [sp, #16]
 80074f8:	2300      	movs	r3, #0
 80074fa:	9306      	str	r3, [sp, #24]
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d869      	bhi.n	80075d6 <_dtoa_r+0x2ae>
 8007502:	2b05      	cmp	r3, #5
 8007504:	bfc4      	itt	gt
 8007506:	3b04      	subgt	r3, #4
 8007508:	9305      	strgt	r3, [sp, #20]
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	f1a3 0302 	sub.w	r3, r3, #2
 8007510:	bfcc      	ite	gt
 8007512:	2500      	movgt	r5, #0
 8007514:	2501      	movle	r5, #1
 8007516:	2b03      	cmp	r3, #3
 8007518:	d869      	bhi.n	80075ee <_dtoa_r+0x2c6>
 800751a:	e8df f003 	tbb	[pc, r3]
 800751e:	4e2c      	.short	0x4e2c
 8007520:	5a4c      	.short	0x5a4c
 8007522:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007526:	441d      	add	r5, r3
 8007528:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800752c:	2b20      	cmp	r3, #32
 800752e:	bfc1      	itttt	gt
 8007530:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007534:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007538:	fa09 f303 	lslgt.w	r3, r9, r3
 800753c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007540:	bfda      	itte	le
 8007542:	f1c3 0320 	rsble	r3, r3, #32
 8007546:	fa06 f003 	lslle.w	r0, r6, r3
 800754a:	4318      	orrgt	r0, r3
 800754c:	f7f8 ffda 	bl	8000504 <__aeabi_ui2d>
 8007550:	2301      	movs	r3, #1
 8007552:	4606      	mov	r6, r0
 8007554:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007558:	3d01      	subs	r5, #1
 800755a:	9310      	str	r3, [sp, #64]	; 0x40
 800755c:	e771      	b.n	8007442 <_dtoa_r+0x11a>
 800755e:	2301      	movs	r3, #1
 8007560:	e7b6      	b.n	80074d0 <_dtoa_r+0x1a8>
 8007562:	900e      	str	r0, [sp, #56]	; 0x38
 8007564:	e7b5      	b.n	80074d2 <_dtoa_r+0x1aa>
 8007566:	f1ca 0300 	rsb	r3, sl, #0
 800756a:	9306      	str	r3, [sp, #24]
 800756c:	2300      	movs	r3, #0
 800756e:	eba8 080a 	sub.w	r8, r8, sl
 8007572:	930d      	str	r3, [sp, #52]	; 0x34
 8007574:	e7c2      	b.n	80074fc <_dtoa_r+0x1d4>
 8007576:	2300      	movs	r3, #0
 8007578:	9308      	str	r3, [sp, #32]
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc39      	bgt.n	80075f4 <_dtoa_r+0x2cc>
 8007580:	f04f 0901 	mov.w	r9, #1
 8007584:	f8cd 9004 	str.w	r9, [sp, #4]
 8007588:	464b      	mov	r3, r9
 800758a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800758e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007590:	2200      	movs	r2, #0
 8007592:	6042      	str	r2, [r0, #4]
 8007594:	2204      	movs	r2, #4
 8007596:	f102 0614 	add.w	r6, r2, #20
 800759a:	429e      	cmp	r6, r3
 800759c:	6841      	ldr	r1, [r0, #4]
 800759e:	d92f      	bls.n	8007600 <_dtoa_r+0x2d8>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fef3 	bl	800838c <_Balloc>
 80075a6:	9000      	str	r0, [sp, #0]
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d14b      	bne.n	8007644 <_dtoa_r+0x31c>
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <_dtoa_r+0x318>)
 80075ae:	4602      	mov	r2, r0
 80075b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075b4:	e6d1      	b.n	800735a <_dtoa_r+0x32>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e7de      	b.n	8007578 <_dtoa_r+0x250>
 80075ba:	2300      	movs	r3, #0
 80075bc:	9308      	str	r3, [sp, #32]
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	eb0a 0903 	add.w	r9, sl, r3
 80075c4:	f109 0301 	add.w	r3, r9, #1
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	bfb8      	it	lt
 80075ce:	2301      	movlt	r3, #1
 80075d0:	e7dd      	b.n	800758e <_dtoa_r+0x266>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f2      	b.n	80075bc <_dtoa_r+0x294>
 80075d6:	2501      	movs	r5, #1
 80075d8:	2300      	movs	r3, #0
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	9508      	str	r5, [sp, #32]
 80075de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80075e8:	2312      	movs	r3, #18
 80075ea:	9209      	str	r2, [sp, #36]	; 0x24
 80075ec:	e7cf      	b.n	800758e <_dtoa_r+0x266>
 80075ee:	2301      	movs	r3, #1
 80075f0:	9308      	str	r3, [sp, #32]
 80075f2:	e7f4      	b.n	80075de <_dtoa_r+0x2b6>
 80075f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80075f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80075fc:	464b      	mov	r3, r9
 80075fe:	e7c6      	b.n	800758e <_dtoa_r+0x266>
 8007600:	3101      	adds	r1, #1
 8007602:	6041      	str	r1, [r0, #4]
 8007604:	0052      	lsls	r2, r2, #1
 8007606:	e7c6      	b.n	8007596 <_dtoa_r+0x26e>
 8007608:	636f4361 	.word	0x636f4361
 800760c:	3fd287a7 	.word	0x3fd287a7
 8007610:	8b60c8b3 	.word	0x8b60c8b3
 8007614:	3fc68a28 	.word	0x3fc68a28
 8007618:	509f79fb 	.word	0x509f79fb
 800761c:	3fd34413 	.word	0x3fd34413
 8007620:	08009476 	.word	0x08009476
 8007624:	0800948d 	.word	0x0800948d
 8007628:	7ff00000 	.word	0x7ff00000
 800762c:	08009472 	.word	0x08009472
 8007630:	08009469 	.word	0x08009469
 8007634:	08009446 	.word	0x08009446
 8007638:	3ff80000 	.word	0x3ff80000
 800763c:	080095e8 	.word	0x080095e8
 8007640:	080094ec 	.word	0x080094ec
 8007644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007646:	9a00      	ldr	r2, [sp, #0]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	2b0e      	cmp	r3, #14
 800764e:	f200 80ad 	bhi.w	80077ac <_dtoa_r+0x484>
 8007652:	2d00      	cmp	r5, #0
 8007654:	f000 80aa 	beq.w	80077ac <_dtoa_r+0x484>
 8007658:	f1ba 0f00 	cmp.w	sl, #0
 800765c:	dd36      	ble.n	80076cc <_dtoa_r+0x3a4>
 800765e:	4ac3      	ldr	r2, [pc, #780]	; (800796c <_dtoa_r+0x644>)
 8007660:	f00a 030f 	and.w	r3, sl, #15
 8007664:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007668:	ed93 7b00 	vldr	d7, [r3]
 800766c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007670:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007674:	eeb0 8a47 	vmov.f32	s16, s14
 8007678:	eef0 8a67 	vmov.f32	s17, s15
 800767c:	d016      	beq.n	80076ac <_dtoa_r+0x384>
 800767e:	4bbc      	ldr	r3, [pc, #752]	; (8007970 <_dtoa_r+0x648>)
 8007680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007688:	f7f9 f8e0 	bl	800084c <__aeabi_ddiv>
 800768c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007690:	f007 070f 	and.w	r7, r7, #15
 8007694:	2503      	movs	r5, #3
 8007696:	4eb6      	ldr	r6, [pc, #728]	; (8007970 <_dtoa_r+0x648>)
 8007698:	b957      	cbnz	r7, 80076b0 <_dtoa_r+0x388>
 800769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769e:	ec53 2b18 	vmov	r2, r3, d8
 80076a2:	f7f9 f8d3 	bl	800084c <__aeabi_ddiv>
 80076a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076aa:	e029      	b.n	8007700 <_dtoa_r+0x3d8>
 80076ac:	2502      	movs	r5, #2
 80076ae:	e7f2      	b.n	8007696 <_dtoa_r+0x36e>
 80076b0:	07f9      	lsls	r1, r7, #31
 80076b2:	d508      	bpl.n	80076c6 <_dtoa_r+0x39e>
 80076b4:	ec51 0b18 	vmov	r0, r1, d8
 80076b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076bc:	f7f8 ff9c 	bl	80005f8 <__aeabi_dmul>
 80076c0:	ec41 0b18 	vmov	d8, r0, r1
 80076c4:	3501      	adds	r5, #1
 80076c6:	107f      	asrs	r7, r7, #1
 80076c8:	3608      	adds	r6, #8
 80076ca:	e7e5      	b.n	8007698 <_dtoa_r+0x370>
 80076cc:	f000 80a6 	beq.w	800781c <_dtoa_r+0x4f4>
 80076d0:	f1ca 0600 	rsb	r6, sl, #0
 80076d4:	4ba5      	ldr	r3, [pc, #660]	; (800796c <_dtoa_r+0x644>)
 80076d6:	4fa6      	ldr	r7, [pc, #664]	; (8007970 <_dtoa_r+0x648>)
 80076d8:	f006 020f 	and.w	r2, r6, #15
 80076dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076e8:	f7f8 ff86 	bl	80005f8 <__aeabi_dmul>
 80076ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f0:	1136      	asrs	r6, r6, #4
 80076f2:	2300      	movs	r3, #0
 80076f4:	2502      	movs	r5, #2
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	f040 8085 	bne.w	8007806 <_dtoa_r+0x4de>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1d2      	bne.n	80076a6 <_dtoa_r+0x37e>
 8007700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 808c 	beq.w	8007820 <_dtoa_r+0x4f8>
 8007708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800770c:	4b99      	ldr	r3, [pc, #612]	; (8007974 <_dtoa_r+0x64c>)
 800770e:	2200      	movs	r2, #0
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f9e2 	bl	8000adc <__aeabi_dcmplt>
 8007718:	2800      	cmp	r0, #0
 800771a:	f000 8081 	beq.w	8007820 <_dtoa_r+0x4f8>
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d07d      	beq.n	8007820 <_dtoa_r+0x4f8>
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	dd3c      	ble.n	80077a4 <_dtoa_r+0x47c>
 800772a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	2200      	movs	r2, #0
 8007732:	4b91      	ldr	r3, [pc, #580]	; (8007978 <_dtoa_r+0x650>)
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f8 ff5e 	bl	80005f8 <__aeabi_dmul>
 800773c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007740:	3501      	adds	r5, #1
 8007742:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007746:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800774a:	4628      	mov	r0, r5
 800774c:	f7f8 feea 	bl	8000524 <__aeabi_i2d>
 8007750:	4632      	mov	r2, r6
 8007752:	463b      	mov	r3, r7
 8007754:	f7f8 ff50 	bl	80005f8 <__aeabi_dmul>
 8007758:	4b88      	ldr	r3, [pc, #544]	; (800797c <_dtoa_r+0x654>)
 800775a:	2200      	movs	r2, #0
 800775c:	f7f8 fd96 	bl	800028c <__adddf3>
 8007760:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007768:	9303      	str	r3, [sp, #12]
 800776a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776c:	2b00      	cmp	r3, #0
 800776e:	d15c      	bne.n	800782a <_dtoa_r+0x502>
 8007770:	4b83      	ldr	r3, [pc, #524]	; (8007980 <_dtoa_r+0x658>)
 8007772:	2200      	movs	r2, #0
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 fd86 	bl	8000288 <__aeabi_dsub>
 800777c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007780:	4606      	mov	r6, r0
 8007782:	460f      	mov	r7, r1
 8007784:	f7f9 f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8007788:	2800      	cmp	r0, #0
 800778a:	f040 8296 	bne.w	8007cba <_dtoa_r+0x992>
 800778e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007792:	4630      	mov	r0, r6
 8007794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007798:	4639      	mov	r1, r7
 800779a:	f7f9 f99f 	bl	8000adc <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f040 8288 	bne.w	8007cb4 <_dtoa_r+0x98c>
 80077a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f2c0 8158 	blt.w	8007a64 <_dtoa_r+0x73c>
 80077b4:	f1ba 0f0e 	cmp.w	sl, #14
 80077b8:	f300 8154 	bgt.w	8007a64 <_dtoa_r+0x73c>
 80077bc:	4b6b      	ldr	r3, [pc, #428]	; (800796c <_dtoa_r+0x644>)
 80077be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f280 80e3 	bge.w	8007994 <_dtoa_r+0x66c>
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f300 80df 	bgt.w	8007994 <_dtoa_r+0x66c>
 80077d6:	f040 826d 	bne.w	8007cb4 <_dtoa_r+0x98c>
 80077da:	4b69      	ldr	r3, [pc, #420]	; (8007980 <_dtoa_r+0x658>)
 80077dc:	2200      	movs	r2, #0
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077ea:	f7f9 f98b 	bl	8000b04 <__aeabi_dcmpge>
 80077ee:	9e01      	ldr	r6, [sp, #4]
 80077f0:	4637      	mov	r7, r6
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f040 8243 	bne.w	8007c7e <_dtoa_r+0x956>
 80077f8:	9d00      	ldr	r5, [sp, #0]
 80077fa:	2331      	movs	r3, #49	; 0x31
 80077fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	e23f      	b.n	8007c86 <_dtoa_r+0x95e>
 8007806:	07f2      	lsls	r2, r6, #31
 8007808:	d505      	bpl.n	8007816 <_dtoa_r+0x4ee>
 800780a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800780e:	f7f8 fef3 	bl	80005f8 <__aeabi_dmul>
 8007812:	3501      	adds	r5, #1
 8007814:	2301      	movs	r3, #1
 8007816:	1076      	asrs	r6, r6, #1
 8007818:	3708      	adds	r7, #8
 800781a:	e76c      	b.n	80076f6 <_dtoa_r+0x3ce>
 800781c:	2502      	movs	r5, #2
 800781e:	e76f      	b.n	8007700 <_dtoa_r+0x3d8>
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	f8cd a01c 	str.w	sl, [sp, #28]
 8007826:	930c      	str	r3, [sp, #48]	; 0x30
 8007828:	e78d      	b.n	8007746 <_dtoa_r+0x41e>
 800782a:	9900      	ldr	r1, [sp, #0]
 800782c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800782e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007830:	4b4e      	ldr	r3, [pc, #312]	; (800796c <_dtoa_r+0x644>)
 8007832:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007836:	4401      	add	r1, r0
 8007838:	9102      	str	r1, [sp, #8]
 800783a:	9908      	ldr	r1, [sp, #32]
 800783c:	eeb0 8a47 	vmov.f32	s16, s14
 8007840:	eef0 8a67 	vmov.f32	s17, s15
 8007844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007848:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800784c:	2900      	cmp	r1, #0
 800784e:	d045      	beq.n	80078dc <_dtoa_r+0x5b4>
 8007850:	494c      	ldr	r1, [pc, #304]	; (8007984 <_dtoa_r+0x65c>)
 8007852:	2000      	movs	r0, #0
 8007854:	f7f8 fffa 	bl	800084c <__aeabi_ddiv>
 8007858:	ec53 2b18 	vmov	r2, r3, d8
 800785c:	f7f8 fd14 	bl	8000288 <__aeabi_dsub>
 8007860:	9d00      	ldr	r5, [sp, #0]
 8007862:	ec41 0b18 	vmov	d8, r0, r1
 8007866:	4639      	mov	r1, r7
 8007868:	4630      	mov	r0, r6
 800786a:	f7f9 f975 	bl	8000b58 <__aeabi_d2iz>
 800786e:	900c      	str	r0, [sp, #48]	; 0x30
 8007870:	f7f8 fe58 	bl	8000524 <__aeabi_i2d>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007882:	3330      	adds	r3, #48	; 0x30
 8007884:	f805 3b01 	strb.w	r3, [r5], #1
 8007888:	ec53 2b18 	vmov	r2, r3, d8
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	f7f9 f924 	bl	8000adc <__aeabi_dcmplt>
 8007894:	2800      	cmp	r0, #0
 8007896:	d165      	bne.n	8007964 <_dtoa_r+0x63c>
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	4935      	ldr	r1, [pc, #212]	; (8007974 <_dtoa_r+0x64c>)
 800789e:	2000      	movs	r0, #0
 80078a0:	f7f8 fcf2 	bl	8000288 <__aeabi_dsub>
 80078a4:	ec53 2b18 	vmov	r2, r3, d8
 80078a8:	f7f9 f918 	bl	8000adc <__aeabi_dcmplt>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f040 80b9 	bne.w	8007a24 <_dtoa_r+0x6fc>
 80078b2:	9b02      	ldr	r3, [sp, #8]
 80078b4:	429d      	cmp	r5, r3
 80078b6:	f43f af75 	beq.w	80077a4 <_dtoa_r+0x47c>
 80078ba:	4b2f      	ldr	r3, [pc, #188]	; (8007978 <_dtoa_r+0x650>)
 80078bc:	ec51 0b18 	vmov	r0, r1, d8
 80078c0:	2200      	movs	r2, #0
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <_dtoa_r+0x650>)
 80078c8:	ec41 0b18 	vmov	d8, r0, r1
 80078cc:	2200      	movs	r2, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	4639      	mov	r1, r7
 80078d2:	f7f8 fe91 	bl	80005f8 <__aeabi_dmul>
 80078d6:	4606      	mov	r6, r0
 80078d8:	460f      	mov	r7, r1
 80078da:	e7c4      	b.n	8007866 <_dtoa_r+0x53e>
 80078dc:	ec51 0b17 	vmov	r0, r1, d7
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	9b02      	ldr	r3, [sp, #8]
 80078e6:	9d00      	ldr	r5, [sp, #0]
 80078e8:	930c      	str	r3, [sp, #48]	; 0x30
 80078ea:	ec41 0b18 	vmov	d8, r0, r1
 80078ee:	4639      	mov	r1, r7
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7f9 f931 	bl	8000b58 <__aeabi_d2iz>
 80078f6:	9011      	str	r0, [sp, #68]	; 0x44
 80078f8:	f7f8 fe14 	bl	8000524 <__aeabi_i2d>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f8 fcc0 	bl	8000288 <__aeabi_dsub>
 8007908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800790a:	3330      	adds	r3, #48	; 0x30
 800790c:	f805 3b01 	strb.w	r3, [r5], #1
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	429d      	cmp	r5, r3
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	d134      	bne.n	8007988 <_dtoa_r+0x660>
 800791e:	4b19      	ldr	r3, [pc, #100]	; (8007984 <_dtoa_r+0x65c>)
 8007920:	ec51 0b18 	vmov	r0, r1, d8
 8007924:	f7f8 fcb2 	bl	800028c <__adddf3>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f9 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d175      	bne.n	8007a24 <_dtoa_r+0x6fc>
 8007938:	ec53 2b18 	vmov	r2, r3, d8
 800793c:	4911      	ldr	r1, [pc, #68]	; (8007984 <_dtoa_r+0x65c>)
 800793e:	2000      	movs	r0, #0
 8007940:	f7f8 fca2 	bl	8000288 <__aeabi_dsub>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f9 f8c6 	bl	8000adc <__aeabi_dcmplt>
 8007950:	2800      	cmp	r0, #0
 8007952:	f43f af27 	beq.w	80077a4 <_dtoa_r+0x47c>
 8007956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007958:	1e6b      	subs	r3, r5, #1
 800795a:	930c      	str	r3, [sp, #48]	; 0x30
 800795c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007960:	2b30      	cmp	r3, #48	; 0x30
 8007962:	d0f8      	beq.n	8007956 <_dtoa_r+0x62e>
 8007964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007968:	e04a      	b.n	8007a00 <_dtoa_r+0x6d8>
 800796a:	bf00      	nop
 800796c:	080095e8 	.word	0x080095e8
 8007970:	080095c0 	.word	0x080095c0
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	40240000 	.word	0x40240000
 800797c:	401c0000 	.word	0x401c0000
 8007980:	40140000 	.word	0x40140000
 8007984:	3fe00000 	.word	0x3fe00000
 8007988:	4baf      	ldr	r3, [pc, #700]	; (8007c48 <_dtoa_r+0x920>)
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	e7ac      	b.n	80078ee <_dtoa_r+0x5c6>
 8007994:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007998:	9d00      	ldr	r5, [sp, #0]
 800799a:	4642      	mov	r2, r8
 800799c:	464b      	mov	r3, r9
 800799e:	4630      	mov	r0, r6
 80079a0:	4639      	mov	r1, r7
 80079a2:	f7f8 ff53 	bl	800084c <__aeabi_ddiv>
 80079a6:	f7f9 f8d7 	bl	8000b58 <__aeabi_d2iz>
 80079aa:	9002      	str	r0, [sp, #8]
 80079ac:	f7f8 fdba 	bl	8000524 <__aeabi_i2d>
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 fc62 	bl	8000288 <__aeabi_dsub>
 80079c4:	9e02      	ldr	r6, [sp, #8]
 80079c6:	9f01      	ldr	r7, [sp, #4]
 80079c8:	3630      	adds	r6, #48	; 0x30
 80079ca:	f805 6b01 	strb.w	r6, [r5], #1
 80079ce:	9e00      	ldr	r6, [sp, #0]
 80079d0:	1bae      	subs	r6, r5, r6
 80079d2:	42b7      	cmp	r7, r6
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	d137      	bne.n	8007a4a <_dtoa_r+0x722>
 80079da:	f7f8 fc57 	bl	800028c <__adddf3>
 80079de:	4642      	mov	r2, r8
 80079e0:	464b      	mov	r3, r9
 80079e2:	4606      	mov	r6, r0
 80079e4:	460f      	mov	r7, r1
 80079e6:	f7f9 f897 	bl	8000b18 <__aeabi_dcmpgt>
 80079ea:	b9c8      	cbnz	r0, 8007a20 <_dtoa_r+0x6f8>
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f9 f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80079f8:	b110      	cbz	r0, 8007a00 <_dtoa_r+0x6d8>
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	07d9      	lsls	r1, r3, #31
 80079fe:	d40f      	bmi.n	8007a20 <_dtoa_r+0x6f8>
 8007a00:	4620      	mov	r0, r4
 8007a02:	4659      	mov	r1, fp
 8007a04:	f000 fd02 	bl	800840c <_Bfree>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	702b      	strb	r3, [r5, #0]
 8007a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a0e:	f10a 0001 	add.w	r0, sl, #1
 8007a12:	6018      	str	r0, [r3, #0]
 8007a14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f43f acd8 	beq.w	80073cc <_dtoa_r+0xa4>
 8007a1c:	601d      	str	r5, [r3, #0]
 8007a1e:	e4d5      	b.n	80073cc <_dtoa_r+0xa4>
 8007a20:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a24:	462b      	mov	r3, r5
 8007a26:	461d      	mov	r5, r3
 8007a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a2c:	2a39      	cmp	r2, #57	; 0x39
 8007a2e:	d108      	bne.n	8007a42 <_dtoa_r+0x71a>
 8007a30:	9a00      	ldr	r2, [sp, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d1f7      	bne.n	8007a26 <_dtoa_r+0x6fe>
 8007a36:	9a07      	ldr	r2, [sp, #28]
 8007a38:	9900      	ldr	r1, [sp, #0]
 8007a3a:	3201      	adds	r2, #1
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	2230      	movs	r2, #48	; 0x30
 8007a40:	700a      	strb	r2, [r1, #0]
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	3201      	adds	r2, #1
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	e78c      	b.n	8007964 <_dtoa_r+0x63c>
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <_dtoa_r+0x920>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f7f8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	f7f9 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d09b      	beq.n	800799a <_dtoa_r+0x672>
 8007a62:	e7cd      	b.n	8007a00 <_dtoa_r+0x6d8>
 8007a64:	9a08      	ldr	r2, [sp, #32]
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	f000 80c4 	beq.w	8007bf4 <_dtoa_r+0x8cc>
 8007a6c:	9a05      	ldr	r2, [sp, #20]
 8007a6e:	2a01      	cmp	r2, #1
 8007a70:	f300 80a8 	bgt.w	8007bc4 <_dtoa_r+0x89c>
 8007a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	f000 80a0 	beq.w	8007bbc <_dtoa_r+0x894>
 8007a7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a80:	9e06      	ldr	r6, [sp, #24]
 8007a82:	4645      	mov	r5, r8
 8007a84:	9a04      	ldr	r2, [sp, #16]
 8007a86:	2101      	movs	r1, #1
 8007a88:	441a      	add	r2, r3
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4498      	add	r8, r3
 8007a8e:	9204      	str	r2, [sp, #16]
 8007a90:	f000 fd78 	bl	8008584 <__i2b>
 8007a94:	4607      	mov	r7, r0
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	dd0b      	ble.n	8007ab2 <_dtoa_r+0x78a>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dd08      	ble.n	8007ab2 <_dtoa_r+0x78a>
 8007aa0:	42ab      	cmp	r3, r5
 8007aa2:	9a04      	ldr	r2, [sp, #16]
 8007aa4:	bfa8      	it	ge
 8007aa6:	462b      	movge	r3, r5
 8007aa8:	eba8 0803 	sub.w	r8, r8, r3
 8007aac:	1aed      	subs	r5, r5, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	b1fb      	cbz	r3, 8007af6 <_dtoa_r+0x7ce>
 8007ab6:	9b08      	ldr	r3, [sp, #32]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 809f 	beq.w	8007bfc <_dtoa_r+0x8d4>
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	dd11      	ble.n	8007ae6 <_dtoa_r+0x7be>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fe18 	bl	80086fc <__pow5mult>
 8007acc:	465a      	mov	r2, fp
 8007ace:	4601      	mov	r1, r0
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fd6c 	bl	80085b0 <__multiply>
 8007ad8:	4659      	mov	r1, fp
 8007ada:	9007      	str	r0, [sp, #28]
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fc95 	bl	800840c <_Bfree>
 8007ae2:	9b07      	ldr	r3, [sp, #28]
 8007ae4:	469b      	mov	fp, r3
 8007ae6:	9b06      	ldr	r3, [sp, #24]
 8007ae8:	1b9a      	subs	r2, r3, r6
 8007aea:	d004      	beq.n	8007af6 <_dtoa_r+0x7ce>
 8007aec:	4659      	mov	r1, fp
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fe04 	bl	80086fc <__pow5mult>
 8007af4:	4683      	mov	fp, r0
 8007af6:	2101      	movs	r1, #1
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fd43 	bl	8008584 <__i2b>
 8007afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	4606      	mov	r6, r0
 8007b04:	dd7c      	ble.n	8007c00 <_dtoa_r+0x8d8>
 8007b06:	461a      	mov	r2, r3
 8007b08:	4601      	mov	r1, r0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fdf6 	bl	80086fc <__pow5mult>
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	4606      	mov	r6, r0
 8007b16:	dd76      	ble.n	8007c06 <_dtoa_r+0x8de>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9306      	str	r3, [sp, #24]
 8007b1c:	6933      	ldr	r3, [r6, #16]
 8007b1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b22:	6918      	ldr	r0, [r3, #16]
 8007b24:	f000 fcde 	bl	80084e4 <__hi0bits>
 8007b28:	f1c0 0020 	rsb	r0, r0, #32
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	4418      	add	r0, r3
 8007b30:	f010 001f 	ands.w	r0, r0, #31
 8007b34:	f000 8086 	beq.w	8007c44 <_dtoa_r+0x91c>
 8007b38:	f1c0 0320 	rsb	r3, r0, #32
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	dd7f      	ble.n	8007c40 <_dtoa_r+0x918>
 8007b40:	f1c0 001c 	rsb	r0, r0, #28
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	4403      	add	r3, r0
 8007b48:	4480      	add	r8, r0
 8007b4a:	4405      	add	r5, r0
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	f1b8 0f00 	cmp.w	r8, #0
 8007b52:	dd05      	ble.n	8007b60 <_dtoa_r+0x838>
 8007b54:	4659      	mov	r1, fp
 8007b56:	4642      	mov	r2, r8
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fe29 	bl	80087b0 <__lshift>
 8007b5e:	4683      	mov	fp, r0
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd05      	ble.n	8007b72 <_dtoa_r+0x84a>
 8007b66:	4631      	mov	r1, r6
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fe20 	bl	80087b0 <__lshift>
 8007b70:	4606      	mov	r6, r0
 8007b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d069      	beq.n	8007c4c <_dtoa_r+0x924>
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 fe84 	bl	8008888 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	da63      	bge.n	8007c4c <_dtoa_r+0x924>
 8007b84:	2300      	movs	r3, #0
 8007b86:	4659      	mov	r1, fp
 8007b88:	220a      	movs	r2, #10
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fc60 	bl	8008450 <__multadd>
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b96:	4683      	mov	fp, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 818f 	beq.w	8007ebc <_dtoa_r+0xb94>
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 fc53 	bl	8008450 <__multadd>
 8007baa:	f1b9 0f00 	cmp.w	r9, #0
 8007bae:	4607      	mov	r7, r0
 8007bb0:	f300 808e 	bgt.w	8007cd0 <_dtoa_r+0x9a8>
 8007bb4:	9b05      	ldr	r3, [sp, #20]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dc50      	bgt.n	8007c5c <_dtoa_r+0x934>
 8007bba:	e089      	b.n	8007cd0 <_dtoa_r+0x9a8>
 8007bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bc2:	e75d      	b.n	8007a80 <_dtoa_r+0x758>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	1e5e      	subs	r6, r3, #1
 8007bc8:	9b06      	ldr	r3, [sp, #24]
 8007bca:	42b3      	cmp	r3, r6
 8007bcc:	bfbf      	itttt	lt
 8007bce:	9b06      	ldrlt	r3, [sp, #24]
 8007bd0:	9606      	strlt	r6, [sp, #24]
 8007bd2:	1af2      	sublt	r2, r6, r3
 8007bd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007bd6:	bfb6      	itet	lt
 8007bd8:	189b      	addlt	r3, r3, r2
 8007bda:	1b9e      	subge	r6, r3, r6
 8007bdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	bfb8      	it	lt
 8007be2:	2600      	movlt	r6, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb5      	itete	lt
 8007be8:	eba8 0503 	sublt.w	r5, r8, r3
 8007bec:	9b01      	ldrge	r3, [sp, #4]
 8007bee:	2300      	movlt	r3, #0
 8007bf0:	4645      	movge	r5, r8
 8007bf2:	e747      	b.n	8007a84 <_dtoa_r+0x75c>
 8007bf4:	9e06      	ldr	r6, [sp, #24]
 8007bf6:	9f08      	ldr	r7, [sp, #32]
 8007bf8:	4645      	mov	r5, r8
 8007bfa:	e74c      	b.n	8007a96 <_dtoa_r+0x76e>
 8007bfc:	9a06      	ldr	r2, [sp, #24]
 8007bfe:	e775      	b.n	8007aec <_dtoa_r+0x7c4>
 8007c00:	9b05      	ldr	r3, [sp, #20]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	dc18      	bgt.n	8007c38 <_dtoa_r+0x910>
 8007c06:	9b02      	ldr	r3, [sp, #8]
 8007c08:	b9b3      	cbnz	r3, 8007c38 <_dtoa_r+0x910>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c10:	b9a3      	cbnz	r3, 8007c3c <_dtoa_r+0x914>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c18:	0d1b      	lsrs	r3, r3, #20
 8007c1a:	051b      	lsls	r3, r3, #20
 8007c1c:	b12b      	cbz	r3, 8007c2a <_dtoa_r+0x902>
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	3301      	adds	r3, #1
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	f108 0801 	add.w	r8, r8, #1
 8007c28:	2301      	movs	r3, #1
 8007c2a:	9306      	str	r3, [sp, #24]
 8007c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f47f af74 	bne.w	8007b1c <_dtoa_r+0x7f4>
 8007c34:	2001      	movs	r0, #1
 8007c36:	e779      	b.n	8007b2c <_dtoa_r+0x804>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e7f6      	b.n	8007c2a <_dtoa_r+0x902>
 8007c3c:	9b02      	ldr	r3, [sp, #8]
 8007c3e:	e7f4      	b.n	8007c2a <_dtoa_r+0x902>
 8007c40:	d085      	beq.n	8007b4e <_dtoa_r+0x826>
 8007c42:	4618      	mov	r0, r3
 8007c44:	301c      	adds	r0, #28
 8007c46:	e77d      	b.n	8007b44 <_dtoa_r+0x81c>
 8007c48:	40240000 	.word	0x40240000
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dc38      	bgt.n	8007cc4 <_dtoa_r+0x99c>
 8007c52:	9b05      	ldr	r3, [sp, #20]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	dd35      	ble.n	8007cc4 <_dtoa_r+0x99c>
 8007c58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007c5c:	f1b9 0f00 	cmp.w	r9, #0
 8007c60:	d10d      	bne.n	8007c7e <_dtoa_r+0x956>
 8007c62:	4631      	mov	r1, r6
 8007c64:	464b      	mov	r3, r9
 8007c66:	2205      	movs	r2, #5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fbf1 	bl	8008450 <__multadd>
 8007c6e:	4601      	mov	r1, r0
 8007c70:	4606      	mov	r6, r0
 8007c72:	4658      	mov	r0, fp
 8007c74:	f000 fe08 	bl	8008888 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f73f adbd 	bgt.w	80077f8 <_dtoa_r+0x4d0>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	9d00      	ldr	r5, [sp, #0]
 8007c82:	ea6f 0a03 	mvn.w	sl, r3
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fbbd 	bl	800840c <_Bfree>
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	f43f aeb4 	beq.w	8007a00 <_dtoa_r+0x6d8>
 8007c98:	f1b8 0f00 	cmp.w	r8, #0
 8007c9c:	d005      	beq.n	8007caa <_dtoa_r+0x982>
 8007c9e:	45b8      	cmp	r8, r7
 8007ca0:	d003      	beq.n	8007caa <_dtoa_r+0x982>
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fbb1 	bl	800840c <_Bfree>
 8007caa:	4639      	mov	r1, r7
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fbad 	bl	800840c <_Bfree>
 8007cb2:	e6a5      	b.n	8007a00 <_dtoa_r+0x6d8>
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4637      	mov	r7, r6
 8007cb8:	e7e1      	b.n	8007c7e <_dtoa_r+0x956>
 8007cba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007cbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007cc0:	4637      	mov	r7, r6
 8007cc2:	e599      	b.n	80077f8 <_dtoa_r+0x4d0>
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80fd 	beq.w	8007eca <_dtoa_r+0xba2>
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	dd05      	ble.n	8007ce0 <_dtoa_r+0x9b8>
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fd69 	bl	80087b0 <__lshift>
 8007cde:	4607      	mov	r7, r0
 8007ce0:	9b06      	ldr	r3, [sp, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d05c      	beq.n	8007da0 <_dtoa_r+0xa78>
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fb4f 	bl	800838c <_Balloc>
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <_dtoa_r+0x9d6>
 8007cf2:	4b80      	ldr	r3, [pc, #512]	; (8007ef4 <_dtoa_r+0xbcc>)
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cfa:	f7ff bb2e 	b.w	800735a <_dtoa_r+0x32>
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	3202      	adds	r2, #2
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	f107 010c 	add.w	r1, r7, #12
 8007d08:	300c      	adds	r0, #12
 8007d0a:	f7fe fbbf 	bl	800648c <memcpy>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4629      	mov	r1, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fd4c 	bl	80087b0 <__lshift>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	444b      	add	r3, r9
 8007d22:	9307      	str	r3, [sp, #28]
 8007d24:	9b02      	ldr	r3, [sp, #8]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	46b8      	mov	r8, r7
 8007d2c:	9306      	str	r3, [sp, #24]
 8007d2e:	4607      	mov	r7, r0
 8007d30:	9b01      	ldr	r3, [sp, #4]
 8007d32:	4631      	mov	r1, r6
 8007d34:	3b01      	subs	r3, #1
 8007d36:	4658      	mov	r0, fp
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	f7ff fa68 	bl	800720e <quorem>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	3330      	adds	r3, #48	; 0x30
 8007d42:	9004      	str	r0, [sp, #16]
 8007d44:	4641      	mov	r1, r8
 8007d46:	4658      	mov	r0, fp
 8007d48:	9308      	str	r3, [sp, #32]
 8007d4a:	f000 fd9d 	bl	8008888 <__mcmp>
 8007d4e:	463a      	mov	r2, r7
 8007d50:	4681      	mov	r9, r0
 8007d52:	4631      	mov	r1, r6
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fdb3 	bl	80088c0 <__mdiff>
 8007d5a:	68c2      	ldr	r2, [r0, #12]
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	bb02      	cbnz	r2, 8007da4 <_dtoa_r+0xa7c>
 8007d62:	4601      	mov	r1, r0
 8007d64:	4658      	mov	r0, fp
 8007d66:	f000 fd8f 	bl	8008888 <__mcmp>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4620      	mov	r0, r4
 8007d72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007d76:	f000 fb49 	bl	800840c <_Bfree>
 8007d7a:	9b05      	ldr	r3, [sp, #20]
 8007d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7e:	9d01      	ldr	r5, [sp, #4]
 8007d80:	ea43 0102 	orr.w	r1, r3, r2
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	430b      	orrs	r3, r1
 8007d88:	9b08      	ldr	r3, [sp, #32]
 8007d8a:	d10d      	bne.n	8007da8 <_dtoa_r+0xa80>
 8007d8c:	2b39      	cmp	r3, #57	; 0x39
 8007d8e:	d029      	beq.n	8007de4 <_dtoa_r+0xabc>
 8007d90:	f1b9 0f00 	cmp.w	r9, #0
 8007d94:	dd01      	ble.n	8007d9a <_dtoa_r+0xa72>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	3331      	adds	r3, #49	; 0x31
 8007d9a:	9a02      	ldr	r2, [sp, #8]
 8007d9c:	7013      	strb	r3, [r2, #0]
 8007d9e:	e774      	b.n	8007c8a <_dtoa_r+0x962>
 8007da0:	4638      	mov	r0, r7
 8007da2:	e7b9      	b.n	8007d18 <_dtoa_r+0x9f0>
 8007da4:	2201      	movs	r2, #1
 8007da6:	e7e2      	b.n	8007d6e <_dtoa_r+0xa46>
 8007da8:	f1b9 0f00 	cmp.w	r9, #0
 8007dac:	db06      	blt.n	8007dbc <_dtoa_r+0xa94>
 8007dae:	9905      	ldr	r1, [sp, #20]
 8007db0:	ea41 0909 	orr.w	r9, r1, r9
 8007db4:	9906      	ldr	r1, [sp, #24]
 8007db6:	ea59 0101 	orrs.w	r1, r9, r1
 8007dba:	d120      	bne.n	8007dfe <_dtoa_r+0xad6>
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	ddec      	ble.n	8007d9a <_dtoa_r+0xa72>
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	f000 fcf2 	bl	80087b0 <__lshift>
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4683      	mov	fp, r0
 8007dd0:	f000 fd5a 	bl	8008888 <__mcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	dc02      	bgt.n	8007de0 <_dtoa_r+0xab8>
 8007dda:	d1de      	bne.n	8007d9a <_dtoa_r+0xa72>
 8007ddc:	07da      	lsls	r2, r3, #31
 8007dde:	d5dc      	bpl.n	8007d9a <_dtoa_r+0xa72>
 8007de0:	2b39      	cmp	r3, #57	; 0x39
 8007de2:	d1d8      	bne.n	8007d96 <_dtoa_r+0xa6e>
 8007de4:	9a02      	ldr	r2, [sp, #8]
 8007de6:	2339      	movs	r3, #57	; 0x39
 8007de8:	7013      	strb	r3, [r2, #0]
 8007dea:	462b      	mov	r3, r5
 8007dec:	461d      	mov	r5, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007df4:	2a39      	cmp	r2, #57	; 0x39
 8007df6:	d050      	beq.n	8007e9a <_dtoa_r+0xb72>
 8007df8:	3201      	adds	r2, #1
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e745      	b.n	8007c8a <_dtoa_r+0x962>
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	dd03      	ble.n	8007e0a <_dtoa_r+0xae2>
 8007e02:	2b39      	cmp	r3, #57	; 0x39
 8007e04:	d0ee      	beq.n	8007de4 <_dtoa_r+0xabc>
 8007e06:	3301      	adds	r3, #1
 8007e08:	e7c7      	b.n	8007d9a <_dtoa_r+0xa72>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	9907      	ldr	r1, [sp, #28]
 8007e0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e12:	428a      	cmp	r2, r1
 8007e14:	d02a      	beq.n	8007e6c <_dtoa_r+0xb44>
 8007e16:	4659      	mov	r1, fp
 8007e18:	2300      	movs	r3, #0
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fb17 	bl	8008450 <__multadd>
 8007e22:	45b8      	cmp	r8, r7
 8007e24:	4683      	mov	fp, r0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	f04f 020a 	mov.w	r2, #10
 8007e2e:	4641      	mov	r1, r8
 8007e30:	4620      	mov	r0, r4
 8007e32:	d107      	bne.n	8007e44 <_dtoa_r+0xb1c>
 8007e34:	f000 fb0c 	bl	8008450 <__multadd>
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	e775      	b.n	8007d30 <_dtoa_r+0xa08>
 8007e44:	f000 fb04 	bl	8008450 <__multadd>
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	220a      	movs	r2, #10
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fafd 	bl	8008450 <__multadd>
 8007e56:	4607      	mov	r7, r0
 8007e58:	e7f0      	b.n	8007e3c <_dtoa_r+0xb14>
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	9a00      	ldr	r2, [sp, #0]
 8007e60:	bfcc      	ite	gt
 8007e62:	464d      	movgt	r5, r9
 8007e64:	2501      	movle	r5, #1
 8007e66:	4415      	add	r5, r2
 8007e68:	f04f 0800 	mov.w	r8, #0
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4620      	mov	r0, r4
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	f000 fc9c 	bl	80087b0 <__lshift>
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4683      	mov	fp, r0
 8007e7c:	f000 fd04 	bl	8008888 <__mcmp>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	dcb2      	bgt.n	8007dea <_dtoa_r+0xac2>
 8007e84:	d102      	bne.n	8007e8c <_dtoa_r+0xb64>
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	07db      	lsls	r3, r3, #31
 8007e8a:	d4ae      	bmi.n	8007dea <_dtoa_r+0xac2>
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	461d      	mov	r5, r3
 8007e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e94:	2a30      	cmp	r2, #48	; 0x30
 8007e96:	d0fa      	beq.n	8007e8e <_dtoa_r+0xb66>
 8007e98:	e6f7      	b.n	8007c8a <_dtoa_r+0x962>
 8007e9a:	9a00      	ldr	r2, [sp, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d1a5      	bne.n	8007dec <_dtoa_r+0xac4>
 8007ea0:	f10a 0a01 	add.w	sl, sl, #1
 8007ea4:	2331      	movs	r3, #49	; 0x31
 8007ea6:	e779      	b.n	8007d9c <_dtoa_r+0xa74>
 8007ea8:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <_dtoa_r+0xbd0>)
 8007eaa:	f7ff baaf 	b.w	800740c <_dtoa_r+0xe4>
 8007eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f47f aa86 	bne.w	80073c2 <_dtoa_r+0x9a>
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <_dtoa_r+0xbd4>)
 8007eb8:	f7ff baa8 	b.w	800740c <_dtoa_r+0xe4>
 8007ebc:	f1b9 0f00 	cmp.w	r9, #0
 8007ec0:	dc03      	bgt.n	8007eca <_dtoa_r+0xba2>
 8007ec2:	9b05      	ldr	r3, [sp, #20]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	f73f aec9 	bgt.w	8007c5c <_dtoa_r+0x934>
 8007eca:	9d00      	ldr	r5, [sp, #0]
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4658      	mov	r0, fp
 8007ed0:	f7ff f99d 	bl	800720e <quorem>
 8007ed4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ed8:	f805 3b01 	strb.w	r3, [r5], #1
 8007edc:	9a00      	ldr	r2, [sp, #0]
 8007ede:	1aaa      	subs	r2, r5, r2
 8007ee0:	4591      	cmp	r9, r2
 8007ee2:	ddba      	ble.n	8007e5a <_dtoa_r+0xb32>
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	220a      	movs	r2, #10
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fab0 	bl	8008450 <__multadd>
 8007ef0:	4683      	mov	fp, r0
 8007ef2:	e7eb      	b.n	8007ecc <_dtoa_r+0xba4>
 8007ef4:	080094ec 	.word	0x080094ec
 8007ef8:	08009445 	.word	0x08009445
 8007efc:	08009469 	.word	0x08009469

08007f00 <__sflush_r>:
 8007f00:	898a      	ldrh	r2, [r1, #12]
 8007f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f06:	4605      	mov	r5, r0
 8007f08:	0710      	lsls	r0, r2, #28
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	d458      	bmi.n	8007fc0 <__sflush_r+0xc0>
 8007f0e:	684b      	ldr	r3, [r1, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc05      	bgt.n	8007f20 <__sflush_r+0x20>
 8007f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dc02      	bgt.n	8007f20 <__sflush_r+0x20>
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f22:	2e00      	cmp	r6, #0
 8007f24:	d0f9      	beq.n	8007f1a <__sflush_r+0x1a>
 8007f26:	2300      	movs	r3, #0
 8007f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f2c:	682f      	ldr	r7, [r5, #0]
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	d032      	beq.n	8007f98 <__sflush_r+0x98>
 8007f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	075a      	lsls	r2, r3, #29
 8007f38:	d505      	bpl.n	8007f46 <__sflush_r+0x46>
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	1ac0      	subs	r0, r0, r3
 8007f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f40:	b10b      	cbz	r3, 8007f46 <__sflush_r+0x46>
 8007f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f44:	1ac0      	subs	r0, r0, r3
 8007f46:	2300      	movs	r3, #0
 8007f48:	4602      	mov	r2, r0
 8007f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f4c:	6a21      	ldr	r1, [r4, #32]
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b0      	blx	r6
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	d106      	bne.n	8007f66 <__sflush_r+0x66>
 8007f58:	6829      	ldr	r1, [r5, #0]
 8007f5a:	291d      	cmp	r1, #29
 8007f5c:	d82c      	bhi.n	8007fb8 <__sflush_r+0xb8>
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	; (8008008 <__sflush_r+0x108>)
 8007f60:	40ca      	lsrs	r2, r1
 8007f62:	07d6      	lsls	r6, r2, #31
 8007f64:	d528      	bpl.n	8007fb8 <__sflush_r+0xb8>
 8007f66:	2200      	movs	r2, #0
 8007f68:	6062      	str	r2, [r4, #4]
 8007f6a:	04d9      	lsls	r1, r3, #19
 8007f6c:	6922      	ldr	r2, [r4, #16]
 8007f6e:	6022      	str	r2, [r4, #0]
 8007f70:	d504      	bpl.n	8007f7c <__sflush_r+0x7c>
 8007f72:	1c42      	adds	r2, r0, #1
 8007f74:	d101      	bne.n	8007f7a <__sflush_r+0x7a>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	b903      	cbnz	r3, 8007f7c <__sflush_r+0x7c>
 8007f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f7e:	602f      	str	r7, [r5, #0]
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d0ca      	beq.n	8007f1a <__sflush_r+0x1a>
 8007f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d002      	beq.n	8007f92 <__sflush_r+0x92>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 fd8b 	bl	8008aa8 <_free_r>
 8007f92:	2000      	movs	r0, #0
 8007f94:	6360      	str	r0, [r4, #52]	; 0x34
 8007f96:	e7c1      	b.n	8007f1c <__sflush_r+0x1c>
 8007f98:	6a21      	ldr	r1, [r4, #32]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b0      	blx	r6
 8007fa0:	1c41      	adds	r1, r0, #1
 8007fa2:	d1c7      	bne.n	8007f34 <__sflush_r+0x34>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0c4      	beq.n	8007f34 <__sflush_r+0x34>
 8007faa:	2b1d      	cmp	r3, #29
 8007fac:	d001      	beq.n	8007fb2 <__sflush_r+0xb2>
 8007fae:	2b16      	cmp	r3, #22
 8007fb0:	d101      	bne.n	8007fb6 <__sflush_r+0xb6>
 8007fb2:	602f      	str	r7, [r5, #0]
 8007fb4:	e7b1      	b.n	8007f1a <__sflush_r+0x1a>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	e7ad      	b.n	8007f1c <__sflush_r+0x1c>
 8007fc0:	690f      	ldr	r7, [r1, #16]
 8007fc2:	2f00      	cmp	r7, #0
 8007fc4:	d0a9      	beq.n	8007f1a <__sflush_r+0x1a>
 8007fc6:	0793      	lsls	r3, r2, #30
 8007fc8:	680e      	ldr	r6, [r1, #0]
 8007fca:	bf08      	it	eq
 8007fcc:	694b      	ldreq	r3, [r1, #20]
 8007fce:	600f      	str	r7, [r1, #0]
 8007fd0:	bf18      	it	ne
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	eba6 0807 	sub.w	r8, r6, r7
 8007fd8:	608b      	str	r3, [r1, #8]
 8007fda:	f1b8 0f00 	cmp.w	r8, #0
 8007fde:	dd9c      	ble.n	8007f1a <__sflush_r+0x1a>
 8007fe0:	6a21      	ldr	r1, [r4, #32]
 8007fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fe4:	4643      	mov	r3, r8
 8007fe6:	463a      	mov	r2, r7
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b0      	blx	r6
 8007fec:	2800      	cmp	r0, #0
 8007fee:	dc06      	bgt.n	8007ffe <__sflush_r+0xfe>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ffc:	e78e      	b.n	8007f1c <__sflush_r+0x1c>
 8007ffe:	4407      	add	r7, r0
 8008000:	eba8 0800 	sub.w	r8, r8, r0
 8008004:	e7e9      	b.n	8007fda <__sflush_r+0xda>
 8008006:	bf00      	nop
 8008008:	20400001 	.word	0x20400001

0800800c <_fflush_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	690b      	ldr	r3, [r1, #16]
 8008010:	4605      	mov	r5, r0
 8008012:	460c      	mov	r4, r1
 8008014:	b913      	cbnz	r3, 800801c <_fflush_r+0x10>
 8008016:	2500      	movs	r5, #0
 8008018:	4628      	mov	r0, r5
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	b118      	cbz	r0, 8008026 <_fflush_r+0x1a>
 800801e:	6983      	ldr	r3, [r0, #24]
 8008020:	b90b      	cbnz	r3, 8008026 <_fflush_r+0x1a>
 8008022:	f000 f887 	bl	8008134 <__sinit>
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <_fflush_r+0x6c>)
 8008028:	429c      	cmp	r4, r3
 800802a:	d11b      	bne.n	8008064 <_fflush_r+0x58>
 800802c:	686c      	ldr	r4, [r5, #4]
 800802e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0ef      	beq.n	8008016 <_fflush_r+0xa>
 8008036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008038:	07d0      	lsls	r0, r2, #31
 800803a:	d404      	bmi.n	8008046 <_fflush_r+0x3a>
 800803c:	0599      	lsls	r1, r3, #22
 800803e:	d402      	bmi.n	8008046 <_fflush_r+0x3a>
 8008040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008042:	f000 f91a 	bl	800827a <__retarget_lock_acquire_recursive>
 8008046:	4628      	mov	r0, r5
 8008048:	4621      	mov	r1, r4
 800804a:	f7ff ff59 	bl	8007f00 <__sflush_r>
 800804e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008050:	07da      	lsls	r2, r3, #31
 8008052:	4605      	mov	r5, r0
 8008054:	d4e0      	bmi.n	8008018 <_fflush_r+0xc>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	059b      	lsls	r3, r3, #22
 800805a:	d4dd      	bmi.n	8008018 <_fflush_r+0xc>
 800805c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800805e:	f000 f90d 	bl	800827c <__retarget_lock_release_recursive>
 8008062:	e7d9      	b.n	8008018 <_fflush_r+0xc>
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <_fflush_r+0x70>)
 8008066:	429c      	cmp	r4, r3
 8008068:	d101      	bne.n	800806e <_fflush_r+0x62>
 800806a:	68ac      	ldr	r4, [r5, #8]
 800806c:	e7df      	b.n	800802e <_fflush_r+0x22>
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <_fflush_r+0x74>)
 8008070:	429c      	cmp	r4, r3
 8008072:	bf08      	it	eq
 8008074:	68ec      	ldreq	r4, [r5, #12]
 8008076:	e7da      	b.n	800802e <_fflush_r+0x22>
 8008078:	08009520 	.word	0x08009520
 800807c:	08009540 	.word	0x08009540
 8008080:	08009500 	.word	0x08009500

08008084 <std>:
 8008084:	2300      	movs	r3, #0
 8008086:	b510      	push	{r4, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	e9c0 3300 	strd	r3, r3, [r0]
 800808e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008092:	6083      	str	r3, [r0, #8]
 8008094:	8181      	strh	r1, [r0, #12]
 8008096:	6643      	str	r3, [r0, #100]	; 0x64
 8008098:	81c2      	strh	r2, [r0, #14]
 800809a:	6183      	str	r3, [r0, #24]
 800809c:	4619      	mov	r1, r3
 800809e:	2208      	movs	r2, #8
 80080a0:	305c      	adds	r0, #92	; 0x5c
 80080a2:	f7fe fa01 	bl	80064a8 <memset>
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <std+0x38>)
 80080a8:	6263      	str	r3, [r4, #36]	; 0x24
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <std+0x3c>)
 80080ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <std+0x40>)
 80080b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <std+0x44>)
 80080b4:	6224      	str	r4, [r4, #32]
 80080b6:	6323      	str	r3, [r4, #48]	; 0x30
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	08008fa9 	.word	0x08008fa9
 80080c0:	08008fcb 	.word	0x08008fcb
 80080c4:	08009003 	.word	0x08009003
 80080c8:	08009027 	.word	0x08009027

080080cc <_cleanup_r>:
 80080cc:	4901      	ldr	r1, [pc, #4]	; (80080d4 <_cleanup_r+0x8>)
 80080ce:	f000 b8af 	b.w	8008230 <_fwalk_reent>
 80080d2:	bf00      	nop
 80080d4:	0800800d 	.word	0x0800800d

080080d8 <__sfmoreglue>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	1e4a      	subs	r2, r1, #1
 80080dc:	2568      	movs	r5, #104	; 0x68
 80080de:	4355      	muls	r5, r2
 80080e0:	460e      	mov	r6, r1
 80080e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080e6:	f000 fd2f 	bl	8008b48 <_malloc_r>
 80080ea:	4604      	mov	r4, r0
 80080ec:	b140      	cbz	r0, 8008100 <__sfmoreglue+0x28>
 80080ee:	2100      	movs	r1, #0
 80080f0:	e9c0 1600 	strd	r1, r6, [r0]
 80080f4:	300c      	adds	r0, #12
 80080f6:	60a0      	str	r0, [r4, #8]
 80080f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080fc:	f7fe f9d4 	bl	80064a8 <memset>
 8008100:	4620      	mov	r0, r4
 8008102:	bd70      	pop	{r4, r5, r6, pc}

08008104 <__sfp_lock_acquire>:
 8008104:	4801      	ldr	r0, [pc, #4]	; (800810c <__sfp_lock_acquire+0x8>)
 8008106:	f000 b8b8 	b.w	800827a <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20000f64 	.word	0x20000f64

08008110 <__sfp_lock_release>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__sfp_lock_release+0x8>)
 8008112:	f000 b8b3 	b.w	800827c <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20000f64 	.word	0x20000f64

0800811c <__sinit_lock_acquire>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__sinit_lock_acquire+0x8>)
 800811e:	f000 b8ac 	b.w	800827a <__retarget_lock_acquire_recursive>
 8008122:	bf00      	nop
 8008124:	20000f5f 	.word	0x20000f5f

08008128 <__sinit_lock_release>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sinit_lock_release+0x8>)
 800812a:	f000 b8a7 	b.w	800827c <__retarget_lock_release_recursive>
 800812e:	bf00      	nop
 8008130:	20000f5f 	.word	0x20000f5f

08008134 <__sinit>:
 8008134:	b510      	push	{r4, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	f7ff fff0 	bl	800811c <__sinit_lock_acquire>
 800813c:	69a3      	ldr	r3, [r4, #24]
 800813e:	b11b      	cbz	r3, 8008148 <__sinit+0x14>
 8008140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008144:	f7ff bff0 	b.w	8008128 <__sinit_lock_release>
 8008148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800814c:	6523      	str	r3, [r4, #80]	; 0x50
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <__sinit+0x68>)
 8008150:	4a13      	ldr	r2, [pc, #76]	; (80081a0 <__sinit+0x6c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	62a2      	str	r2, [r4, #40]	; 0x28
 8008156:	42a3      	cmp	r3, r4
 8008158:	bf04      	itt	eq
 800815a:	2301      	moveq	r3, #1
 800815c:	61a3      	streq	r3, [r4, #24]
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f820 	bl	80081a4 <__sfp>
 8008164:	6060      	str	r0, [r4, #4]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f81c 	bl	80081a4 <__sfp>
 800816c:	60a0      	str	r0, [r4, #8]
 800816e:	4620      	mov	r0, r4
 8008170:	f000 f818 	bl	80081a4 <__sfp>
 8008174:	2200      	movs	r2, #0
 8008176:	60e0      	str	r0, [r4, #12]
 8008178:	2104      	movs	r1, #4
 800817a:	6860      	ldr	r0, [r4, #4]
 800817c:	f7ff ff82 	bl	8008084 <std>
 8008180:	68a0      	ldr	r0, [r4, #8]
 8008182:	2201      	movs	r2, #1
 8008184:	2109      	movs	r1, #9
 8008186:	f7ff ff7d 	bl	8008084 <std>
 800818a:	68e0      	ldr	r0, [r4, #12]
 800818c:	2202      	movs	r2, #2
 800818e:	2112      	movs	r1, #18
 8008190:	f7ff ff78 	bl	8008084 <std>
 8008194:	2301      	movs	r3, #1
 8008196:	61a3      	str	r3, [r4, #24]
 8008198:	e7d2      	b.n	8008140 <__sinit+0xc>
 800819a:	bf00      	nop
 800819c:	08009420 	.word	0x08009420
 80081a0:	080080cd 	.word	0x080080cd

080081a4 <__sfp>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	4607      	mov	r7, r0
 80081a8:	f7ff ffac 	bl	8008104 <__sfp_lock_acquire>
 80081ac:	4b1e      	ldr	r3, [pc, #120]	; (8008228 <__sfp+0x84>)
 80081ae:	681e      	ldr	r6, [r3, #0]
 80081b0:	69b3      	ldr	r3, [r6, #24]
 80081b2:	b913      	cbnz	r3, 80081ba <__sfp+0x16>
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff ffbd 	bl	8008134 <__sinit>
 80081ba:	3648      	adds	r6, #72	; 0x48
 80081bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	d503      	bpl.n	80081cc <__sfp+0x28>
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	b30b      	cbz	r3, 800820c <__sfp+0x68>
 80081c8:	6836      	ldr	r6, [r6, #0]
 80081ca:	e7f7      	b.n	80081bc <__sfp+0x18>
 80081cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081d0:	b9d5      	cbnz	r5, 8008208 <__sfp+0x64>
 80081d2:	4b16      	ldr	r3, [pc, #88]	; (800822c <__sfp+0x88>)
 80081d4:	60e3      	str	r3, [r4, #12]
 80081d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081da:	6665      	str	r5, [r4, #100]	; 0x64
 80081dc:	f000 f84c 	bl	8008278 <__retarget_lock_init_recursive>
 80081e0:	f7ff ff96 	bl	8008110 <__sfp_lock_release>
 80081e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081ec:	6025      	str	r5, [r4, #0]
 80081ee:	61a5      	str	r5, [r4, #24]
 80081f0:	2208      	movs	r2, #8
 80081f2:	4629      	mov	r1, r5
 80081f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081f8:	f7fe f956 	bl	80064a8 <memset>
 80081fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008204:	4620      	mov	r0, r4
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008208:	3468      	adds	r4, #104	; 0x68
 800820a:	e7d9      	b.n	80081c0 <__sfp+0x1c>
 800820c:	2104      	movs	r1, #4
 800820e:	4638      	mov	r0, r7
 8008210:	f7ff ff62 	bl	80080d8 <__sfmoreglue>
 8008214:	4604      	mov	r4, r0
 8008216:	6030      	str	r0, [r6, #0]
 8008218:	2800      	cmp	r0, #0
 800821a:	d1d5      	bne.n	80081c8 <__sfp+0x24>
 800821c:	f7ff ff78 	bl	8008110 <__sfp_lock_release>
 8008220:	230c      	movs	r3, #12
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	e7ee      	b.n	8008204 <__sfp+0x60>
 8008226:	bf00      	nop
 8008228:	08009420 	.word	0x08009420
 800822c:	ffff0001 	.word	0xffff0001

08008230 <_fwalk_reent>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	4606      	mov	r6, r0
 8008236:	4688      	mov	r8, r1
 8008238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800823c:	2700      	movs	r7, #0
 800823e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008242:	f1b9 0901 	subs.w	r9, r9, #1
 8008246:	d505      	bpl.n	8008254 <_fwalk_reent+0x24>
 8008248:	6824      	ldr	r4, [r4, #0]
 800824a:	2c00      	cmp	r4, #0
 800824c:	d1f7      	bne.n	800823e <_fwalk_reent+0xe>
 800824e:	4638      	mov	r0, r7
 8008250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008254:	89ab      	ldrh	r3, [r5, #12]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d907      	bls.n	800826a <_fwalk_reent+0x3a>
 800825a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800825e:	3301      	adds	r3, #1
 8008260:	d003      	beq.n	800826a <_fwalk_reent+0x3a>
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	47c0      	blx	r8
 8008268:	4307      	orrs	r7, r0
 800826a:	3568      	adds	r5, #104	; 0x68
 800826c:	e7e9      	b.n	8008242 <_fwalk_reent+0x12>
	...

08008270 <_localeconv_r>:
 8008270:	4800      	ldr	r0, [pc, #0]	; (8008274 <_localeconv_r+0x4>)
 8008272:	4770      	bx	lr
 8008274:	20000160 	.word	0x20000160

08008278 <__retarget_lock_init_recursive>:
 8008278:	4770      	bx	lr

0800827a <__retarget_lock_acquire_recursive>:
 800827a:	4770      	bx	lr

0800827c <__retarget_lock_release_recursive>:
 800827c:	4770      	bx	lr

0800827e <__swhatbuf_r>:
 800827e:	b570      	push	{r4, r5, r6, lr}
 8008280:	460e      	mov	r6, r1
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	2900      	cmp	r1, #0
 8008288:	b096      	sub	sp, #88	; 0x58
 800828a:	4614      	mov	r4, r2
 800828c:	461d      	mov	r5, r3
 800828e:	da07      	bge.n	80082a0 <__swhatbuf_r+0x22>
 8008290:	2300      	movs	r3, #0
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	89b3      	ldrh	r3, [r6, #12]
 8008296:	061a      	lsls	r2, r3, #24
 8008298:	d410      	bmi.n	80082bc <__swhatbuf_r+0x3e>
 800829a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800829e:	e00e      	b.n	80082be <__swhatbuf_r+0x40>
 80082a0:	466a      	mov	r2, sp
 80082a2:	f000 fee7 	bl	8009074 <_fstat_r>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dbf2      	blt.n	8008290 <__swhatbuf_r+0x12>
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082b4:	425a      	negs	r2, r3
 80082b6:	415a      	adcs	r2, r3
 80082b8:	602a      	str	r2, [r5, #0]
 80082ba:	e7ee      	b.n	800829a <__swhatbuf_r+0x1c>
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	2000      	movs	r0, #0
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	b016      	add	sp, #88	; 0x58
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080082c8 <__smakebuf_r>:
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082cc:	079d      	lsls	r5, r3, #30
 80082ce:	4606      	mov	r6, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	d507      	bpl.n	80082e4 <__smakebuf_r+0x1c>
 80082d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	2301      	movs	r3, #1
 80082de:	6163      	str	r3, [r4, #20]
 80082e0:	b002      	add	sp, #8
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	ab01      	add	r3, sp, #4
 80082e6:	466a      	mov	r2, sp
 80082e8:	f7ff ffc9 	bl	800827e <__swhatbuf_r>
 80082ec:	9900      	ldr	r1, [sp, #0]
 80082ee:	4605      	mov	r5, r0
 80082f0:	4630      	mov	r0, r6
 80082f2:	f000 fc29 	bl	8008b48 <_malloc_r>
 80082f6:	b948      	cbnz	r0, 800830c <__smakebuf_r+0x44>
 80082f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fc:	059a      	lsls	r2, r3, #22
 80082fe:	d4ef      	bmi.n	80082e0 <__smakebuf_r+0x18>
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	f043 0302 	orr.w	r3, r3, #2
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	e7e3      	b.n	80082d4 <__smakebuf_r+0xc>
 800830c:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <__smakebuf_r+0x7c>)
 800830e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	9b00      	ldr	r3, [sp, #0]
 800831c:	6163      	str	r3, [r4, #20]
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	6120      	str	r0, [r4, #16]
 8008322:	b15b      	cbz	r3, 800833c <__smakebuf_r+0x74>
 8008324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008328:	4630      	mov	r0, r6
 800832a:	f000 feb5 	bl	8009098 <_isatty_r>
 800832e:	b128      	cbz	r0, 800833c <__smakebuf_r+0x74>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	89a0      	ldrh	r0, [r4, #12]
 800833e:	4305      	orrs	r5, r0
 8008340:	81a5      	strh	r5, [r4, #12]
 8008342:	e7cd      	b.n	80082e0 <__smakebuf_r+0x18>
 8008344:	080080cd 	.word	0x080080cd

08008348 <malloc>:
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <malloc+0xc>)
 800834a:	4601      	mov	r1, r0
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	f000 bbfb 	b.w	8008b48 <_malloc_r>
 8008352:	bf00      	nop
 8008354:	2000000c 	.word	0x2000000c

08008358 <memmove>:
 8008358:	4288      	cmp	r0, r1
 800835a:	b510      	push	{r4, lr}
 800835c:	eb01 0402 	add.w	r4, r1, r2
 8008360:	d902      	bls.n	8008368 <memmove+0x10>
 8008362:	4284      	cmp	r4, r0
 8008364:	4623      	mov	r3, r4
 8008366:	d807      	bhi.n	8008378 <memmove+0x20>
 8008368:	1e43      	subs	r3, r0, #1
 800836a:	42a1      	cmp	r1, r4
 800836c:	d008      	beq.n	8008380 <memmove+0x28>
 800836e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008376:	e7f8      	b.n	800836a <memmove+0x12>
 8008378:	4402      	add	r2, r0
 800837a:	4601      	mov	r1, r0
 800837c:	428a      	cmp	r2, r1
 800837e:	d100      	bne.n	8008382 <memmove+0x2a>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800838a:	e7f7      	b.n	800837c <memmove+0x24>

0800838c <_Balloc>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008390:	4604      	mov	r4, r0
 8008392:	460d      	mov	r5, r1
 8008394:	b976      	cbnz	r6, 80083b4 <_Balloc+0x28>
 8008396:	2010      	movs	r0, #16
 8008398:	f7ff ffd6 	bl	8008348 <malloc>
 800839c:	4602      	mov	r2, r0
 800839e:	6260      	str	r0, [r4, #36]	; 0x24
 80083a0:	b920      	cbnz	r0, 80083ac <_Balloc+0x20>
 80083a2:	4b18      	ldr	r3, [pc, #96]	; (8008404 <_Balloc+0x78>)
 80083a4:	4818      	ldr	r0, [pc, #96]	; (8008408 <_Balloc+0x7c>)
 80083a6:	2166      	movs	r1, #102	; 0x66
 80083a8:	f7fe f816 	bl	80063d8 <__assert_func>
 80083ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083b0:	6006      	str	r6, [r0, #0]
 80083b2:	60c6      	str	r6, [r0, #12]
 80083b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083b6:	68f3      	ldr	r3, [r6, #12]
 80083b8:	b183      	cbz	r3, 80083dc <_Balloc+0x50>
 80083ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083c2:	b9b8      	cbnz	r0, 80083f4 <_Balloc+0x68>
 80083c4:	2101      	movs	r1, #1
 80083c6:	fa01 f605 	lsl.w	r6, r1, r5
 80083ca:	1d72      	adds	r2, r6, #5
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fb5a 	bl	8008a88 <_calloc_r>
 80083d4:	b160      	cbz	r0, 80083f0 <_Balloc+0x64>
 80083d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083da:	e00e      	b.n	80083fa <_Balloc+0x6e>
 80083dc:	2221      	movs	r2, #33	; 0x21
 80083de:	2104      	movs	r1, #4
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fb51 	bl	8008a88 <_calloc_r>
 80083e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e8:	60f0      	str	r0, [r6, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <_Balloc+0x2e>
 80083f0:	2000      	movs	r0, #0
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	6802      	ldr	r2, [r0, #0]
 80083f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083fa:	2300      	movs	r3, #0
 80083fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008400:	e7f7      	b.n	80083f2 <_Balloc+0x66>
 8008402:	bf00      	nop
 8008404:	08009476 	.word	0x08009476
 8008408:	08009560 	.word	0x08009560

0800840c <_Bfree>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008410:	4605      	mov	r5, r0
 8008412:	460c      	mov	r4, r1
 8008414:	b976      	cbnz	r6, 8008434 <_Bfree+0x28>
 8008416:	2010      	movs	r0, #16
 8008418:	f7ff ff96 	bl	8008348 <malloc>
 800841c:	4602      	mov	r2, r0
 800841e:	6268      	str	r0, [r5, #36]	; 0x24
 8008420:	b920      	cbnz	r0, 800842c <_Bfree+0x20>
 8008422:	4b09      	ldr	r3, [pc, #36]	; (8008448 <_Bfree+0x3c>)
 8008424:	4809      	ldr	r0, [pc, #36]	; (800844c <_Bfree+0x40>)
 8008426:	218a      	movs	r1, #138	; 0x8a
 8008428:	f7fd ffd6 	bl	80063d8 <__assert_func>
 800842c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008430:	6006      	str	r6, [r0, #0]
 8008432:	60c6      	str	r6, [r0, #12]
 8008434:	b13c      	cbz	r4, 8008446 <_Bfree+0x3a>
 8008436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008440:	6021      	str	r1, [r4, #0]
 8008442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	08009476 	.word	0x08009476
 800844c:	08009560 	.word	0x08009560

08008450 <__multadd>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	690e      	ldr	r6, [r1, #16]
 8008456:	4607      	mov	r7, r0
 8008458:	4698      	mov	r8, r3
 800845a:	460c      	mov	r4, r1
 800845c:	f101 0014 	add.w	r0, r1, #20
 8008460:	2300      	movs	r3, #0
 8008462:	6805      	ldr	r5, [r0, #0]
 8008464:	b2a9      	uxth	r1, r5
 8008466:	fb02 8101 	mla	r1, r2, r1, r8
 800846a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800846e:	0c2d      	lsrs	r5, r5, #16
 8008470:	fb02 c505 	mla	r5, r2, r5, ip
 8008474:	b289      	uxth	r1, r1
 8008476:	3301      	adds	r3, #1
 8008478:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800847c:	429e      	cmp	r6, r3
 800847e:	f840 1b04 	str.w	r1, [r0], #4
 8008482:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008486:	dcec      	bgt.n	8008462 <__multadd+0x12>
 8008488:	f1b8 0f00 	cmp.w	r8, #0
 800848c:	d022      	beq.n	80084d4 <__multadd+0x84>
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	42b3      	cmp	r3, r6
 8008492:	dc19      	bgt.n	80084c8 <__multadd+0x78>
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	4638      	mov	r0, r7
 8008498:	3101      	adds	r1, #1
 800849a:	f7ff ff77 	bl	800838c <_Balloc>
 800849e:	4605      	mov	r5, r0
 80084a0:	b928      	cbnz	r0, 80084ae <__multadd+0x5e>
 80084a2:	4602      	mov	r2, r0
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <__multadd+0x8c>)
 80084a6:	480e      	ldr	r0, [pc, #56]	; (80084e0 <__multadd+0x90>)
 80084a8:	21b5      	movs	r1, #181	; 0xb5
 80084aa:	f7fd ff95 	bl	80063d8 <__assert_func>
 80084ae:	6922      	ldr	r2, [r4, #16]
 80084b0:	3202      	adds	r2, #2
 80084b2:	f104 010c 	add.w	r1, r4, #12
 80084b6:	0092      	lsls	r2, r2, #2
 80084b8:	300c      	adds	r0, #12
 80084ba:	f7fd ffe7 	bl	800648c <memcpy>
 80084be:	4621      	mov	r1, r4
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff ffa3 	bl	800840c <_Bfree>
 80084c6:	462c      	mov	r4, r5
 80084c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084cc:	3601      	adds	r6, #1
 80084ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80084d2:	6126      	str	r6, [r4, #16]
 80084d4:	4620      	mov	r0, r4
 80084d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084da:	bf00      	nop
 80084dc:	080094ec 	.word	0x080094ec
 80084e0:	08009560 	.word	0x08009560

080084e4 <__hi0bits>:
 80084e4:	0c03      	lsrs	r3, r0, #16
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	b9d3      	cbnz	r3, 8008520 <__hi0bits+0x3c>
 80084ea:	0400      	lsls	r0, r0, #16
 80084ec:	2310      	movs	r3, #16
 80084ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084f2:	bf04      	itt	eq
 80084f4:	0200      	lsleq	r0, r0, #8
 80084f6:	3308      	addeq	r3, #8
 80084f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084fc:	bf04      	itt	eq
 80084fe:	0100      	lsleq	r0, r0, #4
 8008500:	3304      	addeq	r3, #4
 8008502:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008506:	bf04      	itt	eq
 8008508:	0080      	lsleq	r0, r0, #2
 800850a:	3302      	addeq	r3, #2
 800850c:	2800      	cmp	r0, #0
 800850e:	db05      	blt.n	800851c <__hi0bits+0x38>
 8008510:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008514:	f103 0301 	add.w	r3, r3, #1
 8008518:	bf08      	it	eq
 800851a:	2320      	moveq	r3, #32
 800851c:	4618      	mov	r0, r3
 800851e:	4770      	bx	lr
 8008520:	2300      	movs	r3, #0
 8008522:	e7e4      	b.n	80084ee <__hi0bits+0xa>

08008524 <__lo0bits>:
 8008524:	6803      	ldr	r3, [r0, #0]
 8008526:	f013 0207 	ands.w	r2, r3, #7
 800852a:	4601      	mov	r1, r0
 800852c:	d00b      	beq.n	8008546 <__lo0bits+0x22>
 800852e:	07da      	lsls	r2, r3, #31
 8008530:	d424      	bmi.n	800857c <__lo0bits+0x58>
 8008532:	0798      	lsls	r0, r3, #30
 8008534:	bf49      	itett	mi
 8008536:	085b      	lsrmi	r3, r3, #1
 8008538:	089b      	lsrpl	r3, r3, #2
 800853a:	2001      	movmi	r0, #1
 800853c:	600b      	strmi	r3, [r1, #0]
 800853e:	bf5c      	itt	pl
 8008540:	600b      	strpl	r3, [r1, #0]
 8008542:	2002      	movpl	r0, #2
 8008544:	4770      	bx	lr
 8008546:	b298      	uxth	r0, r3
 8008548:	b9b0      	cbnz	r0, 8008578 <__lo0bits+0x54>
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	2010      	movs	r0, #16
 800854e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008552:	bf04      	itt	eq
 8008554:	0a1b      	lsreq	r3, r3, #8
 8008556:	3008      	addeq	r0, #8
 8008558:	071a      	lsls	r2, r3, #28
 800855a:	bf04      	itt	eq
 800855c:	091b      	lsreq	r3, r3, #4
 800855e:	3004      	addeq	r0, #4
 8008560:	079a      	lsls	r2, r3, #30
 8008562:	bf04      	itt	eq
 8008564:	089b      	lsreq	r3, r3, #2
 8008566:	3002      	addeq	r0, #2
 8008568:	07da      	lsls	r2, r3, #31
 800856a:	d403      	bmi.n	8008574 <__lo0bits+0x50>
 800856c:	085b      	lsrs	r3, r3, #1
 800856e:	f100 0001 	add.w	r0, r0, #1
 8008572:	d005      	beq.n	8008580 <__lo0bits+0x5c>
 8008574:	600b      	str	r3, [r1, #0]
 8008576:	4770      	bx	lr
 8008578:	4610      	mov	r0, r2
 800857a:	e7e8      	b.n	800854e <__lo0bits+0x2a>
 800857c:	2000      	movs	r0, #0
 800857e:	4770      	bx	lr
 8008580:	2020      	movs	r0, #32
 8008582:	4770      	bx	lr

08008584 <__i2b>:
 8008584:	b510      	push	{r4, lr}
 8008586:	460c      	mov	r4, r1
 8008588:	2101      	movs	r1, #1
 800858a:	f7ff feff 	bl	800838c <_Balloc>
 800858e:	4602      	mov	r2, r0
 8008590:	b928      	cbnz	r0, 800859e <__i2b+0x1a>
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <__i2b+0x24>)
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <__i2b+0x28>)
 8008596:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800859a:	f7fd ff1d 	bl	80063d8 <__assert_func>
 800859e:	2301      	movs	r3, #1
 80085a0:	6144      	str	r4, [r0, #20]
 80085a2:	6103      	str	r3, [r0, #16]
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	080094ec 	.word	0x080094ec
 80085ac:	08009560 	.word	0x08009560

080085b0 <__multiply>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	4614      	mov	r4, r2
 80085b6:	690a      	ldr	r2, [r1, #16]
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	bfb8      	it	lt
 80085be:	460b      	movlt	r3, r1
 80085c0:	460d      	mov	r5, r1
 80085c2:	bfbc      	itt	lt
 80085c4:	4625      	movlt	r5, r4
 80085c6:	461c      	movlt	r4, r3
 80085c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80085cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80085d0:	68ab      	ldr	r3, [r5, #8]
 80085d2:	6869      	ldr	r1, [r5, #4]
 80085d4:	eb0a 0709 	add.w	r7, sl, r9
 80085d8:	42bb      	cmp	r3, r7
 80085da:	b085      	sub	sp, #20
 80085dc:	bfb8      	it	lt
 80085de:	3101      	addlt	r1, #1
 80085e0:	f7ff fed4 	bl	800838c <_Balloc>
 80085e4:	b930      	cbnz	r0, 80085f4 <__multiply+0x44>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b42      	ldr	r3, [pc, #264]	; (80086f4 <__multiply+0x144>)
 80085ea:	4843      	ldr	r0, [pc, #268]	; (80086f8 <__multiply+0x148>)
 80085ec:	f240 115d 	movw	r1, #349	; 0x15d
 80085f0:	f7fd fef2 	bl	80063d8 <__assert_func>
 80085f4:	f100 0614 	add.w	r6, r0, #20
 80085f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085fc:	4633      	mov	r3, r6
 80085fe:	2200      	movs	r2, #0
 8008600:	4543      	cmp	r3, r8
 8008602:	d31e      	bcc.n	8008642 <__multiply+0x92>
 8008604:	f105 0c14 	add.w	ip, r5, #20
 8008608:	f104 0314 	add.w	r3, r4, #20
 800860c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008610:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	ebac 0205 	sub.w	r2, ip, r5
 800861a:	3a15      	subs	r2, #21
 800861c:	f022 0203 	bic.w	r2, r2, #3
 8008620:	3204      	adds	r2, #4
 8008622:	f105 0115 	add.w	r1, r5, #21
 8008626:	458c      	cmp	ip, r1
 8008628:	bf38      	it	cc
 800862a:	2204      	movcc	r2, #4
 800862c:	9201      	str	r2, [sp, #4]
 800862e:	9a02      	ldr	r2, [sp, #8]
 8008630:	9303      	str	r3, [sp, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d808      	bhi.n	8008648 <__multiply+0x98>
 8008636:	2f00      	cmp	r7, #0
 8008638:	dc55      	bgt.n	80086e6 <__multiply+0x136>
 800863a:	6107      	str	r7, [r0, #16]
 800863c:	b005      	add	sp, #20
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	f843 2b04 	str.w	r2, [r3], #4
 8008646:	e7db      	b.n	8008600 <__multiply+0x50>
 8008648:	f8b3 a000 	ldrh.w	sl, [r3]
 800864c:	f1ba 0f00 	cmp.w	sl, #0
 8008650:	d020      	beq.n	8008694 <__multiply+0xe4>
 8008652:	f105 0e14 	add.w	lr, r5, #20
 8008656:	46b1      	mov	r9, r6
 8008658:	2200      	movs	r2, #0
 800865a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800865e:	f8d9 b000 	ldr.w	fp, [r9]
 8008662:	b2a1      	uxth	r1, r4
 8008664:	fa1f fb8b 	uxth.w	fp, fp
 8008668:	fb0a b101 	mla	r1, sl, r1, fp
 800866c:	4411      	add	r1, r2
 800866e:	f8d9 2000 	ldr.w	r2, [r9]
 8008672:	0c24      	lsrs	r4, r4, #16
 8008674:	0c12      	lsrs	r2, r2, #16
 8008676:	fb0a 2404 	mla	r4, sl, r4, r2
 800867a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800867e:	b289      	uxth	r1, r1
 8008680:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008684:	45f4      	cmp	ip, lr
 8008686:	f849 1b04 	str.w	r1, [r9], #4
 800868a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800868e:	d8e4      	bhi.n	800865a <__multiply+0xaa>
 8008690:	9901      	ldr	r1, [sp, #4]
 8008692:	5072      	str	r2, [r6, r1]
 8008694:	9a03      	ldr	r2, [sp, #12]
 8008696:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800869a:	3304      	adds	r3, #4
 800869c:	f1b9 0f00 	cmp.w	r9, #0
 80086a0:	d01f      	beq.n	80086e2 <__multiply+0x132>
 80086a2:	6834      	ldr	r4, [r6, #0]
 80086a4:	f105 0114 	add.w	r1, r5, #20
 80086a8:	46b6      	mov	lr, r6
 80086aa:	f04f 0a00 	mov.w	sl, #0
 80086ae:	880a      	ldrh	r2, [r1, #0]
 80086b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80086b4:	fb09 b202 	mla	r2, r9, r2, fp
 80086b8:	4492      	add	sl, r2
 80086ba:	b2a4      	uxth	r4, r4
 80086bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80086c0:	f84e 4b04 	str.w	r4, [lr], #4
 80086c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80086c8:	f8be 2000 	ldrh.w	r2, [lr]
 80086cc:	0c24      	lsrs	r4, r4, #16
 80086ce:	fb09 2404 	mla	r4, r9, r4, r2
 80086d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80086d6:	458c      	cmp	ip, r1
 80086d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086dc:	d8e7      	bhi.n	80086ae <__multiply+0xfe>
 80086de:	9a01      	ldr	r2, [sp, #4]
 80086e0:	50b4      	str	r4, [r6, r2]
 80086e2:	3604      	adds	r6, #4
 80086e4:	e7a3      	b.n	800862e <__multiply+0x7e>
 80086e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1a5      	bne.n	800863a <__multiply+0x8a>
 80086ee:	3f01      	subs	r7, #1
 80086f0:	e7a1      	b.n	8008636 <__multiply+0x86>
 80086f2:	bf00      	nop
 80086f4:	080094ec 	.word	0x080094ec
 80086f8:	08009560 	.word	0x08009560

080086fc <__pow5mult>:
 80086fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008700:	4615      	mov	r5, r2
 8008702:	f012 0203 	ands.w	r2, r2, #3
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	d007      	beq.n	800871c <__pow5mult+0x20>
 800870c:	4c25      	ldr	r4, [pc, #148]	; (80087a4 <__pow5mult+0xa8>)
 800870e:	3a01      	subs	r2, #1
 8008710:	2300      	movs	r3, #0
 8008712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008716:	f7ff fe9b 	bl	8008450 <__multadd>
 800871a:	4607      	mov	r7, r0
 800871c:	10ad      	asrs	r5, r5, #2
 800871e:	d03d      	beq.n	800879c <__pow5mult+0xa0>
 8008720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008722:	b97c      	cbnz	r4, 8008744 <__pow5mult+0x48>
 8008724:	2010      	movs	r0, #16
 8008726:	f7ff fe0f 	bl	8008348 <malloc>
 800872a:	4602      	mov	r2, r0
 800872c:	6270      	str	r0, [r6, #36]	; 0x24
 800872e:	b928      	cbnz	r0, 800873c <__pow5mult+0x40>
 8008730:	4b1d      	ldr	r3, [pc, #116]	; (80087a8 <__pow5mult+0xac>)
 8008732:	481e      	ldr	r0, [pc, #120]	; (80087ac <__pow5mult+0xb0>)
 8008734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008738:	f7fd fe4e 	bl	80063d8 <__assert_func>
 800873c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008740:	6004      	str	r4, [r0, #0]
 8008742:	60c4      	str	r4, [r0, #12]
 8008744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800874c:	b94c      	cbnz	r4, 8008762 <__pow5mult+0x66>
 800874e:	f240 2171 	movw	r1, #625	; 0x271
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff ff16 	bl	8008584 <__i2b>
 8008758:	2300      	movs	r3, #0
 800875a:	f8c8 0008 	str.w	r0, [r8, #8]
 800875e:	4604      	mov	r4, r0
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	f04f 0900 	mov.w	r9, #0
 8008766:	07eb      	lsls	r3, r5, #31
 8008768:	d50a      	bpl.n	8008780 <__pow5mult+0x84>
 800876a:	4639      	mov	r1, r7
 800876c:	4622      	mov	r2, r4
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff ff1e 	bl	80085b0 <__multiply>
 8008774:	4639      	mov	r1, r7
 8008776:	4680      	mov	r8, r0
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff fe47 	bl	800840c <_Bfree>
 800877e:	4647      	mov	r7, r8
 8008780:	106d      	asrs	r5, r5, #1
 8008782:	d00b      	beq.n	800879c <__pow5mult+0xa0>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	b938      	cbnz	r0, 8008798 <__pow5mult+0x9c>
 8008788:	4622      	mov	r2, r4
 800878a:	4621      	mov	r1, r4
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff ff0f 	bl	80085b0 <__multiply>
 8008792:	6020      	str	r0, [r4, #0]
 8008794:	f8c0 9000 	str.w	r9, [r0]
 8008798:	4604      	mov	r4, r0
 800879a:	e7e4      	b.n	8008766 <__pow5mult+0x6a>
 800879c:	4638      	mov	r0, r7
 800879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a2:	bf00      	nop
 80087a4:	080096b0 	.word	0x080096b0
 80087a8:	08009476 	.word	0x08009476
 80087ac:	08009560 	.word	0x08009560

080087b0 <__lshift>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	460c      	mov	r4, r1
 80087b6:	6849      	ldr	r1, [r1, #4]
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	4607      	mov	r7, r0
 80087c2:	4691      	mov	r9, r2
 80087c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087c8:	f108 0601 	add.w	r6, r8, #1
 80087cc:	42b3      	cmp	r3, r6
 80087ce:	db0b      	blt.n	80087e8 <__lshift+0x38>
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff fddb 	bl	800838c <_Balloc>
 80087d6:	4605      	mov	r5, r0
 80087d8:	b948      	cbnz	r0, 80087ee <__lshift+0x3e>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b28      	ldr	r3, [pc, #160]	; (8008880 <__lshift+0xd0>)
 80087de:	4829      	ldr	r0, [pc, #164]	; (8008884 <__lshift+0xd4>)
 80087e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087e4:	f7fd fdf8 	bl	80063d8 <__assert_func>
 80087e8:	3101      	adds	r1, #1
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	e7ee      	b.n	80087cc <__lshift+0x1c>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f100 0114 	add.w	r1, r0, #20
 80087f4:	f100 0210 	add.w	r2, r0, #16
 80087f8:	4618      	mov	r0, r3
 80087fa:	4553      	cmp	r3, sl
 80087fc:	db33      	blt.n	8008866 <__lshift+0xb6>
 80087fe:	6920      	ldr	r0, [r4, #16]
 8008800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008804:	f104 0314 	add.w	r3, r4, #20
 8008808:	f019 091f 	ands.w	r9, r9, #31
 800880c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008814:	d02b      	beq.n	800886e <__lshift+0xbe>
 8008816:	f1c9 0e20 	rsb	lr, r9, #32
 800881a:	468a      	mov	sl, r1
 800881c:	2200      	movs	r2, #0
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	fa00 f009 	lsl.w	r0, r0, r9
 8008824:	4302      	orrs	r2, r0
 8008826:	f84a 2b04 	str.w	r2, [sl], #4
 800882a:	f853 2b04 	ldr.w	r2, [r3], #4
 800882e:	459c      	cmp	ip, r3
 8008830:	fa22 f20e 	lsr.w	r2, r2, lr
 8008834:	d8f3      	bhi.n	800881e <__lshift+0x6e>
 8008836:	ebac 0304 	sub.w	r3, ip, r4
 800883a:	3b15      	subs	r3, #21
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	3304      	adds	r3, #4
 8008842:	f104 0015 	add.w	r0, r4, #21
 8008846:	4584      	cmp	ip, r0
 8008848:	bf38      	it	cc
 800884a:	2304      	movcc	r3, #4
 800884c:	50ca      	str	r2, [r1, r3]
 800884e:	b10a      	cbz	r2, 8008854 <__lshift+0xa4>
 8008850:	f108 0602 	add.w	r6, r8, #2
 8008854:	3e01      	subs	r6, #1
 8008856:	4638      	mov	r0, r7
 8008858:	612e      	str	r6, [r5, #16]
 800885a:	4621      	mov	r1, r4
 800885c:	f7ff fdd6 	bl	800840c <_Bfree>
 8008860:	4628      	mov	r0, r5
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	f842 0f04 	str.w	r0, [r2, #4]!
 800886a:	3301      	adds	r3, #1
 800886c:	e7c5      	b.n	80087fa <__lshift+0x4a>
 800886e:	3904      	subs	r1, #4
 8008870:	f853 2b04 	ldr.w	r2, [r3], #4
 8008874:	f841 2f04 	str.w	r2, [r1, #4]!
 8008878:	459c      	cmp	ip, r3
 800887a:	d8f9      	bhi.n	8008870 <__lshift+0xc0>
 800887c:	e7ea      	b.n	8008854 <__lshift+0xa4>
 800887e:	bf00      	nop
 8008880:	080094ec 	.word	0x080094ec
 8008884:	08009560 	.word	0x08009560

08008888 <__mcmp>:
 8008888:	b530      	push	{r4, r5, lr}
 800888a:	6902      	ldr	r2, [r0, #16]
 800888c:	690c      	ldr	r4, [r1, #16]
 800888e:	1b12      	subs	r2, r2, r4
 8008890:	d10e      	bne.n	80088b0 <__mcmp+0x28>
 8008892:	f100 0314 	add.w	r3, r0, #20
 8008896:	3114      	adds	r1, #20
 8008898:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800889c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088a8:	42a5      	cmp	r5, r4
 80088aa:	d003      	beq.n	80088b4 <__mcmp+0x2c>
 80088ac:	d305      	bcc.n	80088ba <__mcmp+0x32>
 80088ae:	2201      	movs	r2, #1
 80088b0:	4610      	mov	r0, r2
 80088b2:	bd30      	pop	{r4, r5, pc}
 80088b4:	4283      	cmp	r3, r0
 80088b6:	d3f3      	bcc.n	80088a0 <__mcmp+0x18>
 80088b8:	e7fa      	b.n	80088b0 <__mcmp+0x28>
 80088ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088be:	e7f7      	b.n	80088b0 <__mcmp+0x28>

080088c0 <__mdiff>:
 80088c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	4606      	mov	r6, r0
 80088c8:	4611      	mov	r1, r2
 80088ca:	4620      	mov	r0, r4
 80088cc:	4617      	mov	r7, r2
 80088ce:	f7ff ffdb 	bl	8008888 <__mcmp>
 80088d2:	1e05      	subs	r5, r0, #0
 80088d4:	d110      	bne.n	80088f8 <__mdiff+0x38>
 80088d6:	4629      	mov	r1, r5
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff fd57 	bl	800838c <_Balloc>
 80088de:	b930      	cbnz	r0, 80088ee <__mdiff+0x2e>
 80088e0:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <__mdiff+0x108>)
 80088e2:	4602      	mov	r2, r0
 80088e4:	f240 2132 	movw	r1, #562	; 0x232
 80088e8:	4838      	ldr	r0, [pc, #224]	; (80089cc <__mdiff+0x10c>)
 80088ea:	f7fd fd75 	bl	80063d8 <__assert_func>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	bfa4      	itt	ge
 80088fa:	463b      	movge	r3, r7
 80088fc:	4627      	movge	r7, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	bfa6      	itte	ge
 8008904:	461c      	movge	r4, r3
 8008906:	2500      	movge	r5, #0
 8008908:	2501      	movlt	r5, #1
 800890a:	f7ff fd3f 	bl	800838c <_Balloc>
 800890e:	b920      	cbnz	r0, 800891a <__mdiff+0x5a>
 8008910:	4b2d      	ldr	r3, [pc, #180]	; (80089c8 <__mdiff+0x108>)
 8008912:	4602      	mov	r2, r0
 8008914:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008918:	e7e6      	b.n	80088e8 <__mdiff+0x28>
 800891a:	693e      	ldr	r6, [r7, #16]
 800891c:	60c5      	str	r5, [r0, #12]
 800891e:	6925      	ldr	r5, [r4, #16]
 8008920:	f107 0114 	add.w	r1, r7, #20
 8008924:	f104 0914 	add.w	r9, r4, #20
 8008928:	f100 0e14 	add.w	lr, r0, #20
 800892c:	f107 0210 	add.w	r2, r7, #16
 8008930:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008934:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008938:	46f2      	mov	sl, lr
 800893a:	2700      	movs	r7, #0
 800893c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008944:	fa1f f883 	uxth.w	r8, r3
 8008948:	fa17 f78b 	uxtah	r7, r7, fp
 800894c:	0c1b      	lsrs	r3, r3, #16
 800894e:	eba7 0808 	sub.w	r8, r7, r8
 8008952:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008956:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800895a:	fa1f f888 	uxth.w	r8, r8
 800895e:	141f      	asrs	r7, r3, #16
 8008960:	454d      	cmp	r5, r9
 8008962:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008966:	f84a 3b04 	str.w	r3, [sl], #4
 800896a:	d8e7      	bhi.n	800893c <__mdiff+0x7c>
 800896c:	1b2b      	subs	r3, r5, r4
 800896e:	3b15      	subs	r3, #21
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	3415      	adds	r4, #21
 8008978:	42a5      	cmp	r5, r4
 800897a:	bf38      	it	cc
 800897c:	2304      	movcc	r3, #4
 800897e:	4419      	add	r1, r3
 8008980:	4473      	add	r3, lr
 8008982:	469e      	mov	lr, r3
 8008984:	460d      	mov	r5, r1
 8008986:	4565      	cmp	r5, ip
 8008988:	d30e      	bcc.n	80089a8 <__mdiff+0xe8>
 800898a:	f10c 0203 	add.w	r2, ip, #3
 800898e:	1a52      	subs	r2, r2, r1
 8008990:	f022 0203 	bic.w	r2, r2, #3
 8008994:	3903      	subs	r1, #3
 8008996:	458c      	cmp	ip, r1
 8008998:	bf38      	it	cc
 800899a:	2200      	movcc	r2, #0
 800899c:	441a      	add	r2, r3
 800899e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089a2:	b17b      	cbz	r3, 80089c4 <__mdiff+0x104>
 80089a4:	6106      	str	r6, [r0, #16]
 80089a6:	e7a5      	b.n	80088f4 <__mdiff+0x34>
 80089a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80089ac:	fa17 f488 	uxtah	r4, r7, r8
 80089b0:	1422      	asrs	r2, r4, #16
 80089b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80089b6:	b2a4      	uxth	r4, r4
 80089b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80089bc:	f84e 4b04 	str.w	r4, [lr], #4
 80089c0:	1417      	asrs	r7, r2, #16
 80089c2:	e7e0      	b.n	8008986 <__mdiff+0xc6>
 80089c4:	3e01      	subs	r6, #1
 80089c6:	e7ea      	b.n	800899e <__mdiff+0xde>
 80089c8:	080094ec 	.word	0x080094ec
 80089cc:	08009560 	.word	0x08009560

080089d0 <__d2b>:
 80089d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089d4:	4689      	mov	r9, r1
 80089d6:	2101      	movs	r1, #1
 80089d8:	ec57 6b10 	vmov	r6, r7, d0
 80089dc:	4690      	mov	r8, r2
 80089de:	f7ff fcd5 	bl	800838c <_Balloc>
 80089e2:	4604      	mov	r4, r0
 80089e4:	b930      	cbnz	r0, 80089f4 <__d2b+0x24>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <__d2b+0xb0>)
 80089ea:	4826      	ldr	r0, [pc, #152]	; (8008a84 <__d2b+0xb4>)
 80089ec:	f240 310a 	movw	r1, #778	; 0x30a
 80089f0:	f7fd fcf2 	bl	80063d8 <__assert_func>
 80089f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80089f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089fc:	bb35      	cbnz	r5, 8008a4c <__d2b+0x7c>
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	d028      	beq.n	8008a56 <__d2b+0x86>
 8008a04:	4668      	mov	r0, sp
 8008a06:	9600      	str	r6, [sp, #0]
 8008a08:	f7ff fd8c 	bl	8008524 <__lo0bits>
 8008a0c:	9900      	ldr	r1, [sp, #0]
 8008a0e:	b300      	cbz	r0, 8008a52 <__d2b+0x82>
 8008a10:	9a01      	ldr	r2, [sp, #4]
 8008a12:	f1c0 0320 	rsb	r3, r0, #32
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	40c2      	lsrs	r2, r0
 8008a1e:	6163      	str	r3, [r4, #20]
 8008a20:	9201      	str	r2, [sp, #4]
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	61a3      	str	r3, [r4, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2202      	movne	r2, #2
 8008a2c:	2201      	moveq	r2, #1
 8008a2e:	6122      	str	r2, [r4, #16]
 8008a30:	b1d5      	cbz	r5, 8008a68 <__d2b+0x98>
 8008a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a36:	4405      	add	r5, r0
 8008a38:	f8c9 5000 	str.w	r5, [r9]
 8008a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a40:	f8c8 0000 	str.w	r0, [r8]
 8008a44:	4620      	mov	r0, r4
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a50:	e7d5      	b.n	80089fe <__d2b+0x2e>
 8008a52:	6161      	str	r1, [r4, #20]
 8008a54:	e7e5      	b.n	8008a22 <__d2b+0x52>
 8008a56:	a801      	add	r0, sp, #4
 8008a58:	f7ff fd64 	bl	8008524 <__lo0bits>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	6163      	str	r3, [r4, #20]
 8008a60:	2201      	movs	r2, #1
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	3020      	adds	r0, #32
 8008a66:	e7e3      	b.n	8008a30 <__d2b+0x60>
 8008a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a70:	f8c9 0000 	str.w	r0, [r9]
 8008a74:	6918      	ldr	r0, [r3, #16]
 8008a76:	f7ff fd35 	bl	80084e4 <__hi0bits>
 8008a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a7e:	e7df      	b.n	8008a40 <__d2b+0x70>
 8008a80:	080094ec 	.word	0x080094ec
 8008a84:	08009560 	.word	0x08009560

08008a88 <_calloc_r>:
 8008a88:	b513      	push	{r0, r1, r4, lr}
 8008a8a:	434a      	muls	r2, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	9201      	str	r2, [sp, #4]
 8008a90:	f000 f85a 	bl	8008b48 <_malloc_r>
 8008a94:	4604      	mov	r4, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_calloc_r+0x18>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f7fd fd04 	bl	80064a8 <memset>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	b002      	add	sp, #8
 8008aa4:	bd10      	pop	{r4, pc}
	...

08008aa8 <_free_r>:
 8008aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d048      	beq.n	8008b40 <_free_r+0x98>
 8008aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8008aba:	bfb8      	it	lt
 8008abc:	18e4      	addlt	r4, r4, r3
 8008abe:	f000 fb1f 	bl	8009100 <__malloc_lock>
 8008ac2:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <_free_r+0x9c>)
 8008ac4:	9801      	ldr	r0, [sp, #4]
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	4615      	mov	r5, r2
 8008aca:	b933      	cbnz	r3, 8008ada <_free_r+0x32>
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	6014      	str	r4, [r2, #0]
 8008ad0:	b003      	add	sp, #12
 8008ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad6:	f000 bb19 	b.w	800910c <__malloc_unlock>
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	d90b      	bls.n	8008af6 <_free_r+0x4e>
 8008ade:	6821      	ldr	r1, [r4, #0]
 8008ae0:	1862      	adds	r2, r4, r1
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	bf04      	itt	eq
 8008ae6:	681a      	ldreq	r2, [r3, #0]
 8008ae8:	685b      	ldreq	r3, [r3, #4]
 8008aea:	6063      	str	r3, [r4, #4]
 8008aec:	bf04      	itt	eq
 8008aee:	1852      	addeq	r2, r2, r1
 8008af0:	6022      	streq	r2, [r4, #0]
 8008af2:	602c      	str	r4, [r5, #0]
 8008af4:	e7ec      	b.n	8008ad0 <_free_r+0x28>
 8008af6:	461a      	mov	r2, r3
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	b10b      	cbz	r3, 8008b00 <_free_r+0x58>
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	d9fa      	bls.n	8008af6 <_free_r+0x4e>
 8008b00:	6811      	ldr	r1, [r2, #0]
 8008b02:	1855      	adds	r5, r2, r1
 8008b04:	42a5      	cmp	r5, r4
 8008b06:	d10b      	bne.n	8008b20 <_free_r+0x78>
 8008b08:	6824      	ldr	r4, [r4, #0]
 8008b0a:	4421      	add	r1, r4
 8008b0c:	1854      	adds	r4, r2, r1
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	6011      	str	r1, [r2, #0]
 8008b12:	d1dd      	bne.n	8008ad0 <_free_r+0x28>
 8008b14:	681c      	ldr	r4, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	6053      	str	r3, [r2, #4]
 8008b1a:	4421      	add	r1, r4
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	e7d7      	b.n	8008ad0 <_free_r+0x28>
 8008b20:	d902      	bls.n	8008b28 <_free_r+0x80>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	e7d3      	b.n	8008ad0 <_free_r+0x28>
 8008b28:	6825      	ldr	r5, [r4, #0]
 8008b2a:	1961      	adds	r1, r4, r5
 8008b2c:	428b      	cmp	r3, r1
 8008b2e:	bf04      	itt	eq
 8008b30:	6819      	ldreq	r1, [r3, #0]
 8008b32:	685b      	ldreq	r3, [r3, #4]
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	bf04      	itt	eq
 8008b38:	1949      	addeq	r1, r1, r5
 8008b3a:	6021      	streq	r1, [r4, #0]
 8008b3c:	6054      	str	r4, [r2, #4]
 8008b3e:	e7c7      	b.n	8008ad0 <_free_r+0x28>
 8008b40:	b003      	add	sp, #12
 8008b42:	bd30      	pop	{r4, r5, pc}
 8008b44:	20000e1c 	.word	0x20000e1c

08008b48 <_malloc_r>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	1ccd      	adds	r5, r1, #3
 8008b4c:	f025 0503 	bic.w	r5, r5, #3
 8008b50:	3508      	adds	r5, #8
 8008b52:	2d0c      	cmp	r5, #12
 8008b54:	bf38      	it	cc
 8008b56:	250c      	movcc	r5, #12
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	db01      	blt.n	8008b62 <_malloc_r+0x1a>
 8008b5e:	42a9      	cmp	r1, r5
 8008b60:	d903      	bls.n	8008b6a <_malloc_r+0x22>
 8008b62:	230c      	movs	r3, #12
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	2000      	movs	r0, #0
 8008b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b6a:	f000 fac9 	bl	8009100 <__malloc_lock>
 8008b6e:	4921      	ldr	r1, [pc, #132]	; (8008bf4 <_malloc_r+0xac>)
 8008b70:	680a      	ldr	r2, [r1, #0]
 8008b72:	4614      	mov	r4, r2
 8008b74:	b99c      	cbnz	r4, 8008b9e <_malloc_r+0x56>
 8008b76:	4f20      	ldr	r7, [pc, #128]	; (8008bf8 <_malloc_r+0xb0>)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	b923      	cbnz	r3, 8008b86 <_malloc_r+0x3e>
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f9be 	bl	8008f00 <_sbrk_r>
 8008b84:	6038      	str	r0, [r7, #0]
 8008b86:	4629      	mov	r1, r5
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f9b9 	bl	8008f00 <_sbrk_r>
 8008b8e:	1c43      	adds	r3, r0, #1
 8008b90:	d123      	bne.n	8008bda <_malloc_r+0x92>
 8008b92:	230c      	movs	r3, #12
 8008b94:	6033      	str	r3, [r6, #0]
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 fab8 	bl	800910c <__malloc_unlock>
 8008b9c:	e7e3      	b.n	8008b66 <_malloc_r+0x1e>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	1b5b      	subs	r3, r3, r5
 8008ba2:	d417      	bmi.n	8008bd4 <_malloc_r+0x8c>
 8008ba4:	2b0b      	cmp	r3, #11
 8008ba6:	d903      	bls.n	8008bb0 <_malloc_r+0x68>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	441c      	add	r4, r3
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	e004      	b.n	8008bba <_malloc_r+0x72>
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	42a2      	cmp	r2, r4
 8008bb4:	bf0c      	ite	eq
 8008bb6:	600b      	streq	r3, [r1, #0]
 8008bb8:	6053      	strne	r3, [r2, #4]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 faa6 	bl	800910c <__malloc_unlock>
 8008bc0:	f104 000b 	add.w	r0, r4, #11
 8008bc4:	1d23      	adds	r3, r4, #4
 8008bc6:	f020 0007 	bic.w	r0, r0, #7
 8008bca:	1ac2      	subs	r2, r0, r3
 8008bcc:	d0cc      	beq.n	8008b68 <_malloc_r+0x20>
 8008bce:	1a1b      	subs	r3, r3, r0
 8008bd0:	50a3      	str	r3, [r4, r2]
 8008bd2:	e7c9      	b.n	8008b68 <_malloc_r+0x20>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	6864      	ldr	r4, [r4, #4]
 8008bd8:	e7cc      	b.n	8008b74 <_malloc_r+0x2c>
 8008bda:	1cc4      	adds	r4, r0, #3
 8008bdc:	f024 0403 	bic.w	r4, r4, #3
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d0e3      	beq.n	8008bac <_malloc_r+0x64>
 8008be4:	1a21      	subs	r1, r4, r0
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f98a 	bl	8008f00 <_sbrk_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1dd      	bne.n	8008bac <_malloc_r+0x64>
 8008bf0:	e7cf      	b.n	8008b92 <_malloc_r+0x4a>
 8008bf2:	bf00      	nop
 8008bf4:	20000e1c 	.word	0x20000e1c
 8008bf8:	20000e20 	.word	0x20000e20

08008bfc <_realloc_r>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	4607      	mov	r7, r0
 8008c00:	4614      	mov	r4, r2
 8008c02:	460e      	mov	r6, r1
 8008c04:	b921      	cbnz	r1, 8008c10 <_realloc_r+0x14>
 8008c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	f7ff bf9c 	b.w	8008b48 <_malloc_r>
 8008c10:	b922      	cbnz	r2, 8008c1c <_realloc_r+0x20>
 8008c12:	f7ff ff49 	bl	8008aa8 <_free_r>
 8008c16:	4625      	mov	r5, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1c:	f000 fa7c 	bl	8009118 <_malloc_usable_size_r>
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d20f      	bcs.n	8008c44 <_realloc_r+0x48>
 8008c24:	4621      	mov	r1, r4
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7ff ff8e 	bl	8008b48 <_malloc_r>
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d0f2      	beq.n	8008c18 <_realloc_r+0x1c>
 8008c32:	4631      	mov	r1, r6
 8008c34:	4622      	mov	r2, r4
 8008c36:	f7fd fc29 	bl	800648c <memcpy>
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	f7ff ff33 	bl	8008aa8 <_free_r>
 8008c42:	e7e9      	b.n	8008c18 <_realloc_r+0x1c>
 8008c44:	4635      	mov	r5, r6
 8008c46:	e7e7      	b.n	8008c18 <_realloc_r+0x1c>

08008c48 <__ssputs_r>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	688e      	ldr	r6, [r1, #8]
 8008c4e:	429e      	cmp	r6, r3
 8008c50:	4682      	mov	sl, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	4690      	mov	r8, r2
 8008c56:	461f      	mov	r7, r3
 8008c58:	d838      	bhi.n	8008ccc <__ssputs_r+0x84>
 8008c5a:	898a      	ldrh	r2, [r1, #12]
 8008c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c60:	d032      	beq.n	8008cc8 <__ssputs_r+0x80>
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	6909      	ldr	r1, [r1, #16]
 8008c66:	eba5 0901 	sub.w	r9, r5, r1
 8008c6a:	6965      	ldr	r5, [r4, #20]
 8008c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c74:	3301      	adds	r3, #1
 8008c76:	444b      	add	r3, r9
 8008c78:	106d      	asrs	r5, r5, #1
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	bf38      	it	cc
 8008c7e:	461d      	movcc	r5, r3
 8008c80:	0553      	lsls	r3, r2, #21
 8008c82:	d531      	bpl.n	8008ce8 <__ssputs_r+0xa0>
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7ff ff5f 	bl	8008b48 <_malloc_r>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	b950      	cbnz	r0, 8008ca4 <__ssputs_r+0x5c>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	f8ca 3000 	str.w	r3, [sl]
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	f7fd fbf0 	bl	800648c <memcpy>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	6126      	str	r6, [r4, #16]
 8008cba:	6165      	str	r5, [r4, #20]
 8008cbc:	444e      	add	r6, r9
 8008cbe:	eba5 0509 	sub.w	r5, r5, r9
 8008cc2:	6026      	str	r6, [r4, #0]
 8008cc4:	60a5      	str	r5, [r4, #8]
 8008cc6:	463e      	mov	r6, r7
 8008cc8:	42be      	cmp	r6, r7
 8008cca:	d900      	bls.n	8008cce <__ssputs_r+0x86>
 8008ccc:	463e      	mov	r6, r7
 8008cce:	4632      	mov	r2, r6
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	f7ff fb40 	bl	8008358 <memmove>
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	1b9b      	subs	r3, r3, r6
 8008cde:	4432      	add	r2, r6
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e7db      	b.n	8008ca0 <__ssputs_r+0x58>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	f7ff ff87 	bl	8008bfc <_realloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d1e1      	bne.n	8008cb8 <__ssputs_r+0x70>
 8008cf4:	6921      	ldr	r1, [r4, #16]
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	f7ff fed6 	bl	8008aa8 <_free_r>
 8008cfc:	e7c7      	b.n	8008c8e <__ssputs_r+0x46>
	...

08008d00 <_svfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4698      	mov	r8, r3
 8008d06:	898b      	ldrh	r3, [r1, #12]
 8008d08:	061b      	lsls	r3, r3, #24
 8008d0a:	b09d      	sub	sp, #116	; 0x74
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	4614      	mov	r4, r2
 8008d12:	d50e      	bpl.n	8008d32 <_svfiprintf_r+0x32>
 8008d14:	690b      	ldr	r3, [r1, #16]
 8008d16:	b963      	cbnz	r3, 8008d32 <_svfiprintf_r+0x32>
 8008d18:	2140      	movs	r1, #64	; 0x40
 8008d1a:	f7ff ff15 	bl	8008b48 <_malloc_r>
 8008d1e:	6028      	str	r0, [r5, #0]
 8008d20:	6128      	str	r0, [r5, #16]
 8008d22:	b920      	cbnz	r0, 8008d2e <_svfiprintf_r+0x2e>
 8008d24:	230c      	movs	r3, #12
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2c:	e0d1      	b.n	8008ed2 <_svfiprintf_r+0x1d2>
 8008d2e:	2340      	movs	r3, #64	; 0x40
 8008d30:	616b      	str	r3, [r5, #20]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9309      	str	r3, [sp, #36]	; 0x24
 8008d36:	2320      	movs	r3, #32
 8008d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d40:	2330      	movs	r3, #48	; 0x30
 8008d42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008eec <_svfiprintf_r+0x1ec>
 8008d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d4a:	f04f 0901 	mov.w	r9, #1
 8008d4e:	4623      	mov	r3, r4
 8008d50:	469a      	mov	sl, r3
 8008d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d56:	b10a      	cbz	r2, 8008d5c <_svfiprintf_r+0x5c>
 8008d58:	2a25      	cmp	r2, #37	; 0x25
 8008d5a:	d1f9      	bne.n	8008d50 <_svfiprintf_r+0x50>
 8008d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d60:	d00b      	beq.n	8008d7a <_svfiprintf_r+0x7a>
 8008d62:	465b      	mov	r3, fp
 8008d64:	4622      	mov	r2, r4
 8008d66:	4629      	mov	r1, r5
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ff6d 	bl	8008c48 <__ssputs_r>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f000 80aa 	beq.w	8008ec8 <_svfiprintf_r+0x1c8>
 8008d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d76:	445a      	add	r2, fp
 8008d78:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80a2 	beq.w	8008ec8 <_svfiprintf_r+0x1c8>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8e:	f10a 0a01 	add.w	sl, sl, #1
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	9307      	str	r3, [sp, #28]
 8008d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d9c:	4654      	mov	r4, sl
 8008d9e:	2205      	movs	r2, #5
 8008da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da4:	4851      	ldr	r0, [pc, #324]	; (8008eec <_svfiprintf_r+0x1ec>)
 8008da6:	f7f7 fa1b 	bl	80001e0 <memchr>
 8008daa:	9a04      	ldr	r2, [sp, #16]
 8008dac:	b9d8      	cbnz	r0, 8008de6 <_svfiprintf_r+0xe6>
 8008dae:	06d0      	lsls	r0, r2, #27
 8008db0:	bf44      	itt	mi
 8008db2:	2320      	movmi	r3, #32
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db8:	0711      	lsls	r1, r2, #28
 8008dba:	bf44      	itt	mi
 8008dbc:	232b      	movmi	r3, #43	; 0x2b
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc8:	d015      	beq.n	8008df6 <_svfiprintf_r+0xf6>
 8008dca:	9a07      	ldr	r2, [sp, #28]
 8008dcc:	4654      	mov	r4, sl
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f04f 0c0a 	mov.w	ip, #10
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dda:	3b30      	subs	r3, #48	; 0x30
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	d94e      	bls.n	8008e7e <_svfiprintf_r+0x17e>
 8008de0:	b1b0      	cbz	r0, 8008e10 <_svfiprintf_r+0x110>
 8008de2:	9207      	str	r2, [sp, #28]
 8008de4:	e014      	b.n	8008e10 <_svfiprintf_r+0x110>
 8008de6:	eba0 0308 	sub.w	r3, r0, r8
 8008dea:	fa09 f303 	lsl.w	r3, r9, r3
 8008dee:	4313      	orrs	r3, r2
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	46a2      	mov	sl, r4
 8008df4:	e7d2      	b.n	8008d9c <_svfiprintf_r+0x9c>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	1d19      	adds	r1, r3, #4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	9103      	str	r1, [sp, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfbb      	ittet	lt
 8008e02:	425b      	neglt	r3, r3
 8008e04:	f042 0202 	orrlt.w	r2, r2, #2
 8008e08:	9307      	strge	r3, [sp, #28]
 8008e0a:	9307      	strlt	r3, [sp, #28]
 8008e0c:	bfb8      	it	lt
 8008e0e:	9204      	strlt	r2, [sp, #16]
 8008e10:	7823      	ldrb	r3, [r4, #0]
 8008e12:	2b2e      	cmp	r3, #46	; 0x2e
 8008e14:	d10c      	bne.n	8008e30 <_svfiprintf_r+0x130>
 8008e16:	7863      	ldrb	r3, [r4, #1]
 8008e18:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1a:	d135      	bne.n	8008e88 <_svfiprintf_r+0x188>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	9203      	str	r2, [sp, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfb8      	it	lt
 8008e28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e2c:	3402      	adds	r4, #2
 8008e2e:	9305      	str	r3, [sp, #20]
 8008e30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008efc <_svfiprintf_r+0x1fc>
 8008e34:	7821      	ldrb	r1, [r4, #0]
 8008e36:	2203      	movs	r2, #3
 8008e38:	4650      	mov	r0, sl
 8008e3a:	f7f7 f9d1 	bl	80001e0 <memchr>
 8008e3e:	b140      	cbz	r0, 8008e52 <_svfiprintf_r+0x152>
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	eba0 000a 	sub.w	r0, r0, sl
 8008e46:	fa03 f000 	lsl.w	r0, r3, r0
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	4303      	orrs	r3, r0
 8008e4e:	3401      	adds	r4, #1
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e56:	4826      	ldr	r0, [pc, #152]	; (8008ef0 <_svfiprintf_r+0x1f0>)
 8008e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	f7f7 f9bf 	bl	80001e0 <memchr>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d038      	beq.n	8008ed8 <_svfiprintf_r+0x1d8>
 8008e66:	4b23      	ldr	r3, [pc, #140]	; (8008ef4 <_svfiprintf_r+0x1f4>)
 8008e68:	bb1b      	cbnz	r3, 8008eb2 <_svfiprintf_r+0x1b2>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	3307      	adds	r3, #7
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	3308      	adds	r3, #8
 8008e74:	9303      	str	r3, [sp, #12]
 8008e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e78:	4433      	add	r3, r6
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	e767      	b.n	8008d4e <_svfiprintf_r+0x4e>
 8008e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e82:	460c      	mov	r4, r1
 8008e84:	2001      	movs	r0, #1
 8008e86:	e7a5      	b.n	8008dd4 <_svfiprintf_r+0xd4>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	3401      	adds	r4, #1
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f04f 0c0a 	mov.w	ip, #10
 8008e94:	4620      	mov	r0, r4
 8008e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9a:	3a30      	subs	r2, #48	; 0x30
 8008e9c:	2a09      	cmp	r2, #9
 8008e9e:	d903      	bls.n	8008ea8 <_svfiprintf_r+0x1a8>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0c5      	beq.n	8008e30 <_svfiprintf_r+0x130>
 8008ea4:	9105      	str	r1, [sp, #20]
 8008ea6:	e7c3      	b.n	8008e30 <_svfiprintf_r+0x130>
 8008ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eac:	4604      	mov	r4, r0
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7f0      	b.n	8008e94 <_svfiprintf_r+0x194>
 8008eb2:	ab03      	add	r3, sp, #12
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <_svfiprintf_r+0x1f8>)
 8008eba:	a904      	add	r1, sp, #16
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7fd fcf5 	bl	80068ac <_printf_float>
 8008ec2:	1c42      	adds	r2, r0, #1
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	d1d6      	bne.n	8008e76 <_svfiprintf_r+0x176>
 8008ec8:	89ab      	ldrh	r3, [r5, #12]
 8008eca:	065b      	lsls	r3, r3, #25
 8008ecc:	f53f af2c 	bmi.w	8008d28 <_svfiprintf_r+0x28>
 8008ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed2:	b01d      	add	sp, #116	; 0x74
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <_svfiprintf_r+0x1f8>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7fd ff86 	bl	8006df4 <_printf_i>
 8008ee8:	e7eb      	b.n	8008ec2 <_svfiprintf_r+0x1c2>
 8008eea:	bf00      	nop
 8008eec:	08009424 	.word	0x08009424
 8008ef0:	0800942e 	.word	0x0800942e
 8008ef4:	080068ad 	.word	0x080068ad
 8008ef8:	08008c49 	.word	0x08008c49
 8008efc:	0800942a 	.word	0x0800942a

08008f00 <_sbrk_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	; (8008f1c <_sbrk_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7f8 fd6c 	bl	80019e8 <_sbrk>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_sbrk_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_sbrk_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20000f68 	.word	0x20000f68

08008f20 <_raise_r>:
 8008f20:	291f      	cmp	r1, #31
 8008f22:	b538      	push	{r3, r4, r5, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	d904      	bls.n	8008f34 <_raise_r+0x14>
 8008f2a:	2316      	movs	r3, #22
 8008f2c:	6003      	str	r3, [r0, #0]
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f36:	b112      	cbz	r2, 8008f3e <_raise_r+0x1e>
 8008f38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f3c:	b94b      	cbnz	r3, 8008f52 <_raise_r+0x32>
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 f830 	bl	8008fa4 <_getpid_r>
 8008f44:	462a      	mov	r2, r5
 8008f46:	4601      	mov	r1, r0
 8008f48:	4620      	mov	r0, r4
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f000 b817 	b.w	8008f80 <_kill_r>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d00a      	beq.n	8008f6c <_raise_r+0x4c>
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	d103      	bne.n	8008f62 <_raise_r+0x42>
 8008f5a:	2316      	movs	r3, #22
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	2001      	movs	r0, #1
 8008f60:	e7e7      	b.n	8008f32 <_raise_r+0x12>
 8008f62:	2400      	movs	r4, #0
 8008f64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f68:	4628      	mov	r0, r5
 8008f6a:	4798      	blx	r3
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7e0      	b.n	8008f32 <_raise_r+0x12>

08008f70 <raise>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <raise+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f7ff bfd3 	b.w	8008f20 <_raise_r>
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <_kill_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	; (8008fa0 <_kill_r+0x20>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f8 fca3 	bl	80018d8 <_kill>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_kill_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_kill_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000f68 	.word	0x20000f68

08008fa4 <_getpid_r>:
 8008fa4:	f7f8 bc90 	b.w	80018c8 <_getpid>

08008fa8 <__sread>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	f000 f8ba 	bl	8009128 <_read_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	bfab      	itete	ge
 8008fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fba:	89a3      	ldrhlt	r3, [r4, #12]
 8008fbc:	181b      	addge	r3, r3, r0
 8008fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fc2:	bfac      	ite	ge
 8008fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fc6:	81a3      	strhlt	r3, [r4, #12]
 8008fc8:	bd10      	pop	{r4, pc}

08008fca <__swrite>:
 8008fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fce:	461f      	mov	r7, r3
 8008fd0:	898b      	ldrh	r3, [r1, #12]
 8008fd2:	05db      	lsls	r3, r3, #23
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	4616      	mov	r6, r2
 8008fda:	d505      	bpl.n	8008fe8 <__swrite+0x1e>
 8008fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f000 f868 	bl	80090b8 <_lseek_r>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	f000 b817 	b.w	8009030 <_write_r>

08009002 <__sseek>:
 8009002:	b510      	push	{r4, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900a:	f000 f855 	bl	80090b8 <_lseek_r>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	bf15      	itete	ne
 8009014:	6560      	strne	r0, [r4, #84]	; 0x54
 8009016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800901a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800901e:	81a3      	strheq	r3, [r4, #12]
 8009020:	bf18      	it	ne
 8009022:	81a3      	strhne	r3, [r4, #12]
 8009024:	bd10      	pop	{r4, pc}

08009026 <__sclose>:
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 b813 	b.w	8009054 <_close_r>
	...

08009030 <_write_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	; (8009050 <_write_r+0x20>)
 8009034:	4604      	mov	r4, r0
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	2200      	movs	r2, #0
 800903c:	602a      	str	r2, [r5, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	f7f8 fc81 	bl	8001946 <_write>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_write_r+0x1e>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_write_r+0x1e>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20000f68 	.word	0x20000f68

08009054 <_close_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	; (8009070 <_close_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7f8 fc8d 	bl	800197e <_close>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_close_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_close_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20000f68 	.word	0x20000f68

08009074 <_fstat_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_fstat_r+0x20>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f7f8 fc88 	bl	8001996 <_fstat>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_fstat_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_fstat_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	20000f68 	.word	0x20000f68

08009098 <_isatty_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	; (80090b4 <_isatty_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7f8 fc87 	bl	80019b6 <_isatty>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_isatty_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_isatty_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	20000f68 	.word	0x20000f68

080090b8 <_lseek_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	; (80090d8 <_lseek_r+0x20>)
 80090bc:	4604      	mov	r4, r0
 80090be:	4608      	mov	r0, r1
 80090c0:	4611      	mov	r1, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7f8 fc80 	bl	80019cc <_lseek>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_lseek_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_lseek_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000f68 	.word	0x20000f68

080090dc <__ascii_mbtowc>:
 80090dc:	b082      	sub	sp, #8
 80090de:	b901      	cbnz	r1, 80090e2 <__ascii_mbtowc+0x6>
 80090e0:	a901      	add	r1, sp, #4
 80090e2:	b142      	cbz	r2, 80090f6 <__ascii_mbtowc+0x1a>
 80090e4:	b14b      	cbz	r3, 80090fa <__ascii_mbtowc+0x1e>
 80090e6:	7813      	ldrb	r3, [r2, #0]
 80090e8:	600b      	str	r3, [r1, #0]
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	1e10      	subs	r0, r2, #0
 80090ee:	bf18      	it	ne
 80090f0:	2001      	movne	r0, #1
 80090f2:	b002      	add	sp, #8
 80090f4:	4770      	bx	lr
 80090f6:	4610      	mov	r0, r2
 80090f8:	e7fb      	b.n	80090f2 <__ascii_mbtowc+0x16>
 80090fa:	f06f 0001 	mvn.w	r0, #1
 80090fe:	e7f8      	b.n	80090f2 <__ascii_mbtowc+0x16>

08009100 <__malloc_lock>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__malloc_lock+0x8>)
 8009102:	f7ff b8ba 	b.w	800827a <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	20000f60 	.word	0x20000f60

0800910c <__malloc_unlock>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__malloc_unlock+0x8>)
 800910e:	f7ff b8b5 	b.w	800827c <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	20000f60 	.word	0x20000f60

08009118 <_malloc_usable_size_r>:
 8009118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911c:	1f18      	subs	r0, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfbc      	itt	lt
 8009122:	580b      	ldrlt	r3, [r1, r0]
 8009124:	18c0      	addlt	r0, r0, r3
 8009126:	4770      	bx	lr

08009128 <_read_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_read_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f8 fbe8 	bl	800190c <_read>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_read_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_read_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000f68 	.word	0x20000f68

0800914c <__ascii_wctomb>:
 800914c:	b149      	cbz	r1, 8009162 <__ascii_wctomb+0x16>
 800914e:	2aff      	cmp	r2, #255	; 0xff
 8009150:	bf85      	ittet	hi
 8009152:	238a      	movhi	r3, #138	; 0x8a
 8009154:	6003      	strhi	r3, [r0, #0]
 8009156:	700a      	strbls	r2, [r1, #0]
 8009158:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800915c:	bf98      	it	ls
 800915e:	2001      	movls	r0, #1
 8009160:	4770      	bx	lr
 8009162:	4608      	mov	r0, r1
 8009164:	4770      	bx	lr
	...

08009168 <floor>:
 8009168:	ec51 0b10 	vmov	r0, r1, d0
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009174:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009178:	2e13      	cmp	r6, #19
 800917a:	ee10 5a10 	vmov	r5, s0
 800917e:	ee10 8a10 	vmov	r8, s0
 8009182:	460c      	mov	r4, r1
 8009184:	dc32      	bgt.n	80091ec <floor+0x84>
 8009186:	2e00      	cmp	r6, #0
 8009188:	da14      	bge.n	80091b4 <floor+0x4c>
 800918a:	a333      	add	r3, pc, #204	; (adr r3, 8009258 <floor+0xf0>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 f87c 	bl	800028c <__adddf3>
 8009194:	2200      	movs	r2, #0
 8009196:	2300      	movs	r3, #0
 8009198:	f7f7 fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800919c:	b138      	cbz	r0, 80091ae <floor+0x46>
 800919e:	2c00      	cmp	r4, #0
 80091a0:	da57      	bge.n	8009252 <floor+0xea>
 80091a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80091a6:	431d      	orrs	r5, r3
 80091a8:	d001      	beq.n	80091ae <floor+0x46>
 80091aa:	4c2d      	ldr	r4, [pc, #180]	; (8009260 <floor+0xf8>)
 80091ac:	2500      	movs	r5, #0
 80091ae:	4621      	mov	r1, r4
 80091b0:	4628      	mov	r0, r5
 80091b2:	e025      	b.n	8009200 <floor+0x98>
 80091b4:	4f2b      	ldr	r7, [pc, #172]	; (8009264 <floor+0xfc>)
 80091b6:	4137      	asrs	r7, r6
 80091b8:	ea01 0307 	and.w	r3, r1, r7
 80091bc:	4303      	orrs	r3, r0
 80091be:	d01f      	beq.n	8009200 <floor+0x98>
 80091c0:	a325      	add	r3, pc, #148	; (adr r3, 8009258 <floor+0xf0>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f861 	bl	800028c <__adddf3>
 80091ca:	2200      	movs	r2, #0
 80091cc:	2300      	movs	r3, #0
 80091ce:	f7f7 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0eb      	beq.n	80091ae <floor+0x46>
 80091d6:	2c00      	cmp	r4, #0
 80091d8:	bfbe      	ittt	lt
 80091da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80091de:	fa43 f606 	asrlt.w	r6, r3, r6
 80091e2:	19a4      	addlt	r4, r4, r6
 80091e4:	ea24 0407 	bic.w	r4, r4, r7
 80091e8:	2500      	movs	r5, #0
 80091ea:	e7e0      	b.n	80091ae <floor+0x46>
 80091ec:	2e33      	cmp	r6, #51	; 0x33
 80091ee:	dd0b      	ble.n	8009208 <floor+0xa0>
 80091f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80091f4:	d104      	bne.n	8009200 <floor+0x98>
 80091f6:	ee10 2a10 	vmov	r2, s0
 80091fa:	460b      	mov	r3, r1
 80091fc:	f7f7 f846 	bl	800028c <__adddf3>
 8009200:	ec41 0b10 	vmov	d0, r0, r1
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800920c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009210:	fa23 f707 	lsr.w	r7, r3, r7
 8009214:	4207      	tst	r7, r0
 8009216:	d0f3      	beq.n	8009200 <floor+0x98>
 8009218:	a30f      	add	r3, pc, #60	; (adr r3, 8009258 <floor+0xf0>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f835 	bl	800028c <__adddf3>
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800922a:	2800      	cmp	r0, #0
 800922c:	d0bf      	beq.n	80091ae <floor+0x46>
 800922e:	2c00      	cmp	r4, #0
 8009230:	da02      	bge.n	8009238 <floor+0xd0>
 8009232:	2e14      	cmp	r6, #20
 8009234:	d103      	bne.n	800923e <floor+0xd6>
 8009236:	3401      	adds	r4, #1
 8009238:	ea25 0507 	bic.w	r5, r5, r7
 800923c:	e7b7      	b.n	80091ae <floor+0x46>
 800923e:	2301      	movs	r3, #1
 8009240:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009244:	fa03 f606 	lsl.w	r6, r3, r6
 8009248:	4435      	add	r5, r6
 800924a:	4545      	cmp	r5, r8
 800924c:	bf38      	it	cc
 800924e:	18e4      	addcc	r4, r4, r3
 8009250:	e7f2      	b.n	8009238 <floor+0xd0>
 8009252:	2500      	movs	r5, #0
 8009254:	462c      	mov	r4, r5
 8009256:	e7aa      	b.n	80091ae <floor+0x46>
 8009258:	8800759c 	.word	0x8800759c
 800925c:	7e37e43c 	.word	0x7e37e43c
 8009260:	bff00000 	.word	0xbff00000
 8009264:	000fffff 	.word	0x000fffff

08009268 <_init>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	bf00      	nop
 800926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926e:	bc08      	pop	{r3}
 8009270:	469e      	mov	lr, r3
 8009272:	4770      	bx	lr

08009274 <_fini>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	bf00      	nop
 8009278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927a:	bc08      	pop	{r3}
 800927c:	469e      	mov	lr, r3
 800927e:	4770      	bx	lr
