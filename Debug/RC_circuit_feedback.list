
RC_circuit_feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061dc  080061dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080061dc  080061dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061dc  080061dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006144  20000070  08006254  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200061b4  08006254  000261b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b66  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aed  00000000  00000000  00035c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000386f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d957  00000000  00000000  0003a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c8b  00000000  00000000  000581a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bafa9  00000000  00000000  0006ae32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  00125e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006010 	.word	0x08006010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006010 	.word	0x08006010

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_d2uiz>:
 80006f8:	004a      	lsls	r2, r1, #1
 80006fa:	d211      	bcs.n	8000720 <__aeabi_d2uiz+0x28>
 80006fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000700:	d211      	bcs.n	8000726 <__aeabi_d2uiz+0x2e>
 8000702:	d50d      	bpl.n	8000720 <__aeabi_d2uiz+0x28>
 8000704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800070c:	d40e      	bmi.n	800072c <__aeabi_d2uiz+0x34>
 800070e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071a:	fa23 f002 	lsr.w	r0, r3, r2
 800071e:	4770      	bx	lr
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	4770      	bx	lr
 8000726:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800072a:	d102      	bne.n	8000732 <__aeabi_d2uiz+0x3a>
 800072c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fcf4 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f845 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f9ed 	bl	8000b24 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f000 f9cd 	bl	8000ae8 <MX_DMA_Init>
  MX_ADC1_Init();
 800074e:	f000 f899 	bl	8000884 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000752:	f000 f90d 	bl	8000970 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize data structures in the ADC module
  adc_init_adc_module();
 8000756:	f000 fc23 	bl	8000fa0 <adc_init_adc_module>
  // When the buffer fills, the DMA will fire an interrupt
  // In the ISR, it is time to read out the buffer
  // In the ISR, set a flag that there is data to process
  // In the main, process the data
  // Once processed, clear the flag
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buffer, ADC_BUFFER_LENGTH);
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	4913      	ldr	r1, [pc, #76]	; (80007ac <main+0x74>)
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0x78>)
 8000762:	f001 f88f 	bl	8001884 <HAL_ADC_Start_DMA>

  // Start PWM
  HAL_StatusTypeDef status = HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000766:	2100      	movs	r1, #0
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <main+0x7c>)
 800076a:	f003 fca9 	bl	80040c0 <HAL_TIM_PWM_Start>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  assert( HAL_OK == status );
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <main+0x4c>
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <main+0x80>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <main+0x84>)
 800077c:	2188      	movs	r1, #136	; 0x88
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <main+0x88>)
 8000780:	f004 fbda 	bl	8004f38 <__assert_func>
  TIM1->CCR1 = pwm_calculate_CCRx( PWM_DUTY_CYCLE, PWM_ARRX );
 8000784:	4c0f      	ldr	r4, [pc, #60]	; (80007c4 <main+0x8c>)
 8000786:	eddf 0a10 	vldr	s1, [pc, #64]	; 80007c8 <main+0x90>
 800078a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800078e:	f000 fc81 	bl	8001094 <pwm_calculate_CCRx>
 8000792:	4603      	mov	r3, r0
 8000794:	6363      	str	r3, [r4, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if( data_to_process )
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <main+0x94>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0fb      	beq.n	8000796 <main+0x5e>
	{
		process_data();
 800079e:	f000 f9d9 	bl	8000b54 <process_data>
		data_to_process = false;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <main+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	if( data_to_process )
 80007a8:	e7f5      	b.n	8000796 <main+0x5e>
 80007aa:	bf00      	nop
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	200060a8 	.word	0x200060a8
 80007b4:	20006154 	.word	0x20006154
 80007b8:	08006028 	.word	0x08006028
 80007bc:	08006098 	.word	0x08006098
 80007c0:	0800603c 	.word	0x0800603c
 80007c4:	40012c00 	.word	0x40012c00
 80007c8:	477fff00 	.word	0x477fff00
 80007cc:	2000208c 	.word	0x2000208c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0a4      	sub	sp, #144	; 0x90
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007da:	2244      	movs	r2, #68	; 0x44
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fc04 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2234      	movs	r2, #52	; 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fbf6 	bl	8004fec <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000800:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000804:	f002 fb7a 	bl	8002efc <HAL_PWREx_ControlVoltageScaling>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800080e:	f000 f9c7 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000812:	2310      	movs	r3, #16
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fbbc 	bl	8002fa8 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000836:	f000 f9b3 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800083e:	2300      	movs	r3, #0
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f809 	bl	800386c <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000860:	f000 f99e 	bl	8000ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f9e9 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000878:	f000 f992 	bl	8000ba0 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3790      	adds	r7, #144	; 0x90
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_ADC1_Init+0xe4>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC1_Init+0xe0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_ADC1_Init+0xe0>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <MX_ADC1_Init+0xe0>)
 8000908:	f000 fe6c 	bl	80015e4 <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000912:	f000 f945 	bl	8000ba0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_ADC1_Init+0xe0>)
 8000922:	f001 fdbd 	bl	80024a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800092c:	f000 f938 	bl	8000ba0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_ADC1_Init+0xe8>)
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2306      	movs	r3, #6
 8000936:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800093c:	237f      	movs	r3, #127	; 0x7f
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000940:	2304      	movs	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_ADC1_Init+0xe0>)
 800094e:	f001 f86b 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000958:	f000 f922 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200060a8 	.word	0x200060a8
 8000968:	50040000 	.word	0x50040000
 800096c:	14f00020 	.word	0x14f00020

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	; 0x68
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	222c      	movs	r2, #44	; 0x2c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fb1e 	bl	8004fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  uint32_t prescaler = pwm_calculate_prescaler( PWM_CLOCK_FREQUENCY_HZ, PWM_PULSE_FREQUENCY_HZ, PWM_ARRX );
 80009b0:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8000ad4 <MX_TIM1_Init+0x164>
 80009b4:	eddf 0a48 	vldr	s1, [pc, #288]	; 8000ad8 <MX_TIM1_Init+0x168>
 80009b8:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8000adc <MX_TIM1_Init+0x16c>
 80009bc:	f000 fb34 	bl	8001028 <pwm_calculate_prescaler>
 80009c0:	6678      	str	r0, [r7, #100]	; 0x64
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009c4:	4a47      	ldr	r2, [pc, #284]	; (8000ae4 <MX_TIM1_Init+0x174>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 80009c8:	4a45      	ldr	r2, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009cc:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009d4:	4b42      	ldr	r3, [pc, #264]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ee:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <MX_TIM1_Init+0x170>)
 80009f0:	f003 faae 	bl	8003f50 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009fa:	f000 f8d1 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000a0c:	f003 fd4a 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000a16:	f000 f8c3 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a1a:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000a1c:	f003 faef 	bl	8003ffe <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000a26:	f000 f8bb 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000a3e:	f004 f99d 	bl	8004d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a48:	f000 f8aa 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4c:	2360      	movs	r3, #96	; 0x60
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000a72:	f003 fc03 	bl	800427c <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a7c:	f000 f890 	bl	8000ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000ab6:	f004 f9c7 	bl	8004e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000ac0:	f000 f86e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM1_Init+0x170>)
 8000ac6:	f000 f923 	bl	8000d10 <HAL_TIM_MspPostInit>

}
 8000aca:	bf00      	nop
 8000acc:	3768      	adds	r7, #104	; 0x68
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	477fff00 	.word	0x477fff00
 8000ad8:	3dcccccd 	.word	0x3dcccccd
 8000adc:	4a742400 	.word	0x4a742400
 8000ae0:	20006154 	.word	0x20006154
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_DMA_Init+0x38>)
 8000af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <MX_DMA_Init+0x38>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6493      	str	r3, [r2, #72]	; 0x48
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_DMA_Init+0x38>)
 8000afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200b      	movs	r0, #11
 8000b0c:	f001 fe47 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b10:	200b      	movs	r0, #11
 8000b12:	f001 fe60 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_GPIO_Init+0x2c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <MX_GPIO_Init+0x2c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_GPIO_Init+0x2c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <process_data>:

/* USER CODE BEGIN 4 */
static void process_data(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	for( uint32_t i = 0; i < ADC_BUFFER_LENGTH; i++ )
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	e011      	b.n	8000b84 <process_data+0x30>
	{
		adc1_voltage[i] = adc_calculate_voltage_from_output_code( (uint32_t) adc1_buffer[i] );
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <process_data+0x44>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fa31 	bl	8000fd0 <adc_calculate_voltage_from_output_code>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <process_data+0x48>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	edc3 7a00 	vstr	s15, [r3]
	for( uint32_t i = 0; i < ADC_BUFFER_LENGTH; i++ )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3301      	adds	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8a:	d3e9      	bcc.n	8000b60 <process_data+0xc>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	20002090 	.word	0x20002090

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2b      	ldr	r2, [pc, #172]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d14f      	bne.n	8000cb6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-CK_IN     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 ffce 	bl	8002bfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c62:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_ADC_MspInit+0xd8>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000c9c:	f001 fdb6 	bl	800280c <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000ca6:	f7ff ff7b 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000cae:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_ADC_MspInit+0xd4>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	50040000 	.word	0x50040000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	2000610c 	.word	0x2000610c
 8000ccc:	40020008 	.word	0x40020008

08000cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_TIM_Base_MspInit+0x38>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10b      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_TIM_MspPostInit+0x68>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d11d      	bne.n	8000d6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 ff47 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 fa02 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  data_to_process = true;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DMA1_Channel1_IRQHandler+0x14>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <DMA1_Channel1_IRQHandler+0x18>)
 8000de0:	f001 fe2c 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000208c 	.word	0x2000208c
 8000dec:	2000610c 	.word	0x2000610c

08000df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	return 1;
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_kill>:

int _kill(int pid, int sig)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e0a:	f004 f8b3 	bl	8004f74 <__errno>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2216      	movs	r2, #22
 8000e12:	601a      	str	r2, [r3, #0]
	return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_exit>:

void _exit (int status)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffe7 	bl	8000e00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e32:	e7fe      	b.n	8000e32 <_exit+0x12>

08000e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
	}

return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e009      	b.n	8000e94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf1      	blt.n	8000e80 <_write+0x12>
	}
	return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f004 f818 	bl	8004f74 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000a000 	.word	0x2000a000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	20006090 	.word	0x20006090
 8000f78:	200061b8 	.word	0x200061b8

08000f7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <adc_init_adc_module>:

adc_t adc_1 = {0};


void adc_init_adc_module( void )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	adc_1.reference_voltage = VREF;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <adc_init_adc_module+0x24>)
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <adc_init_adc_module+0x28>)
 8000fa8:	601a      	str	r2, [r3, #0]
	adc_1.output_code_range = OUTPUT_CODE_RANGE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <adc_init_adc_module+0x24>)
 8000fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb0:	605a      	str	r2, [r3, #4]
	adc_1.single_lsb = SINGLE_LSB;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <adc_init_adc_module+0x24>)
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <adc_init_adc_module+0x2c>)
 8000fb6:	609a      	str	r2, [r3, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20006094 	.word	0x20006094
 8000fc8:	40666666 	.word	0x40666666
 8000fcc:	3a666666 	.word	0x3a666666

08000fd0 <adc_calculate_voltage_from_output_code>:


float adc_calculate_voltage_from_output_code( uint32_t output_code )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	// It is not necessary to check that the output code is non-negative because it is an unsigned integer
	assert(output_code <= adc_1.output_code_range);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <adc_calculate_voltage_from_output_code+0x48>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d905      	bls.n	8000fee <adc_calculate_voltage_from_output_code+0x1e>
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <adc_calculate_voltage_from_output_code+0x4c>)
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <adc_calculate_voltage_from_output_code+0x50>)
 8000fe6:	211a      	movs	r1, #26
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <adc_calculate_voltage_from_output_code+0x54>)
 8000fea:	f003 ffa5 	bl	8004f38 <__assert_func>
	float voltage = adc_1.single_lsb * (float) output_code;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <adc_calculate_voltage_from_output_code+0x48>)
 8000ff0:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	edc7 7a03 	vstr	s15, [r7, #12]
	return voltage;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	ee07 3a90 	vmov	s15, r3
}
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20006094 	.word	0x20006094
 800101c:	08006050 	.word	0x08006050
 8001020:	080060e0 	.word	0x080060e0
 8001024:	08006078 	.word	0x08006078

08001028 <pwm_calculate_prescaler>:
* F_PWM = ( F_CLK )/( ( ARR + 1 ) * ( PSC + 1 ) )
* ( ARR + 1 ) * ( PSC + 1 ) = ( F_CLK ) / ( F_PWM )
* PSC = ( ( F_CLK ) / ( ( F_PWM ) * ( ARR + 1 ) ) ) - 1
*/
uint32_t pwm_calculate_prescaler(float clock_frequency_Hz, float pulse_frequency_Hz, float auto_reload)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001032:	edc7 0a02 	vstr	s1, [r7, #8]
 8001036:	ed87 1a01 	vstr	s2, [r7, #4]
	return floor( ( clock_frequency_Hz ) / ( ( pulse_frequency_Hz ) * ( auto_reload + 1 ) ) ) - 1u;
 800103a:	edd7 7a01 	vldr	s15, [r7, #4]
 800103e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001046:	edd7 7a02 	vldr	s15, [r7, #8]
 800104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001052:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001056:	ee16 0a90 	vmov	r0, s13
 800105a:	f7ff fa6d 	bl	8000538 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ec43 2b10 	vmov	d0, r2, r3
 8001066:	f004 ff53 	bl	8005f10 <floor>
 800106a:	ec51 0b10 	vmov	r0, r1, d0
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <pwm_calculate_prescaler+0x68>)
 8001074:	f7ff f900 	bl	8000278 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fb3a 	bl	80006f8 <__aeabi_d2uiz>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	3ff00000 	.word	0x3ff00000

08001094 <pwm_calculate_CCRx>:
* Calculate CCRx
* DUTY_CYCLE = ( CCRx ) / ( ARRx )
* CCRx = ( DUTY_CYCLE ) * ( ARRx )
*/
uint32_t pwm_calculate_CCRx(float duty_cycle, float auto_reload)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	ed87 0a01 	vstr	s0, [r7, #4]
 800109e:	edc7 0a00 	vstr	s1, [r7]
	return floor( duty_cycle * auto_reload );
 80010a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a6:	edd7 7a00 	vldr	s15, [r7]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa41 	bl	8000538 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	ec43 2b10 	vmov	d0, r2, r3
 80010be:	f004 ff27 	bl	8005f10 <floor>
 80010c2:	ec53 2b10 	vmov	r2, r3, d0
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fb15 	bl	80006f8 <__aeabi_d2uiz>
 80010ce:	4603      	mov	r3, r0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ff4e 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f003 ff4d 	bl	8004fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff fb15 	bl	8000738 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	080061e4 	.word	0x080061e4
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	200061b4 	.word	0x200061b4

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f001 fb27 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f80e 	bl	800115c <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff fd2e 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d023      	beq.n	80011b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_InitTick+0x70>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fb33 	bl	80027f2 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d809      	bhi.n	80011ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a0:	f001 fafd 	bl	800279e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e007      	b.n	80011bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e001      	b.n	80011bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200061a0 	.word	0x200061a0

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200061a0 	.word	0x200061a0

08001214 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3360      	adds	r3, #96	; 0x60
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LL_ADC_SetOffset+0x44>)
 800129e:	4013      	ands	r3, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	4313      	orrs	r3, r2
 80012ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	03fff000 	.word	0x03fff000

080012c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3360      	adds	r3, #96	; 0x60
 80012d2:	461a      	mov	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3360      	adds	r3, #96	; 0x60
 8001300:	461a      	mov	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	615a      	str	r2, [r3, #20]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001372:	b480      	push	{r7}
 8001374:	b087      	sub	sp, #28
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3330      	adds	r3, #48	; 0x30
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	4413      	add	r3, r2
 8001390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	211f      	movs	r1, #31
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0e9b      	lsrs	r3, r3, #26
 80013aa:	f003 011f 	and.w	r1, r3, #31
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013be:	bf00      	nop
 80013c0:	371c      	adds	r7, #28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b087      	sub	sp, #28
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3314      	adds	r3, #20
 80013da:	461a      	mov	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	0e5b      	lsrs	r3, r3, #25
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	0d1b      	lsrs	r3, r3, #20
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2107      	movs	r1, #7
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	0d1b      	lsrs	r3, r3, #20
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0318 	and.w	r3, r3, #24
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001444:	40d9      	lsrs	r1, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	400b      	ands	r3, r1
 800144a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0007ffff 	.word	0x0007ffff

08001468 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6093      	str	r3, [r2, #8]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014bc:	d101      	bne.n	80014c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800150c:	d101      	bne.n	8001512 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <LL_ADC_IsEnabled+0x18>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <LL_ADC_IsEnabled+0x1a>
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800157e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001582:	f043 0204 	orr.w	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d101      	bne.n	80015ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d101      	bne.n	80015d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e131      	b.n	8001862 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff faf1 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff3f 	bl	80014a8 <LL_ADC_IsDeepPowerDownEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff25 	bl	8001484 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff5a 	bl	80014f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d115      	bne.n	8001676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff3e 	bl	80014d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001654:	4b85      	ldr	r3, [pc, #532]	; (800186c <HAL_ADC_Init+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	4a85      	ldr	r2, [pc, #532]	; (8001870 <HAL_ADC_Init+0x28c>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001668:	e002      	b.n	8001670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3b01      	subs	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff3c 	bl	80014f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff75 	bl	8001596 <LL_ADC_REG_IsConversionOngoing>
 80016ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80ca 	bne.w	8001850 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80c6 	bne.w	8001850 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <LL_ADC_IsEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d110      	bne.n	8001706 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016e4:	4863      	ldr	r0, [pc, #396]	; (8001874 <HAL_ADC_Init+0x290>)
 80016e6:	f7ff ff2f 	bl	8001548 <LL_ADC_IsEnabled>
 80016ea:	4604      	mov	r4, r0
 80016ec:	4862      	ldr	r0, [pc, #392]	; (8001878 <HAL_ADC_Init+0x294>)
 80016ee:	f7ff ff2b 	bl	8001548 <LL_ADC_IsEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4323      	orrs	r3, r4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4619      	mov	r1, r3
 8001700:	485e      	ldr	r0, [pc, #376]	; (800187c <HAL_ADC_Init+0x298>)
 8001702:	f7ff fd87 	bl	8001214 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001710:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001716:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800171c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d106      	bne.n	8001742 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	3b01      	subs	r3, #1
 800173a:	045b      	lsls	r3, r3, #17
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_ADC_Init+0x29c>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	430b      	orrs	r3, r1
 8001770:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff0d 	bl	8001596 <LL_ADC_REG_IsConversionOngoing>
 800177c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff1a 	bl	80015bc <LL_ADC_INJ_IsConversionOngoing>
 8001788:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d13d      	bne.n	800180c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d13a      	bne.n	800180c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800179a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d118      	bne.n	80017fc <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ec:	430a      	orrs	r2, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	e007      	b.n	800180c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10c      	bne.n	800182e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f023 010f 	bic.w	r1, r3, #15
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	1e5a      	subs	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
 800182c:	e007      	b.n	800183e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 020f 	bic.w	r2, r2, #15
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
 800184e:	e007      	b.n	8001860 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001860:	7ffb      	ldrb	r3, [r7, #31]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	50040000 	.word	0x50040000
 8001878:	50040100 	.word	0x50040100
 800187c:	50040300 	.word	0x50040300
 8001880:	fff0c007 	.word	0xfff0c007

08001884 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001890:	4850      	ldr	r0, [pc, #320]	; (80019d4 <HAL_ADC_Start_DMA+0x150>)
 8001892:	f7ff fde9 	bl	8001468 <LL_ADC_GetMultimode>
 8001896:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe7a 	bl	8001596 <LL_ADC_REG_IsConversionOngoing>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 808e 	bne.w	80019c6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x34>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e089      	b.n	80019cc <HAL_ADC_Start_DMA+0x148>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d002      	beq.n	80018d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	d172      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fca4 	bl	8002220 <ADC_Enable>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d165      	bne.n	80019ae <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_ADC_Start_DMA+0x154>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d002      	beq.n	8001906 <HAL_ADC_Start_DMA+0x82>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e000      	b.n	8001908 <HAL_ADC_Start_DMA+0x84>
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_ADC_Start_DMA+0x158>)
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4293      	cmp	r3, r2
 800190e:	d002      	beq.n	8001916 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f023 0206 	bic.w	r2, r3, #6
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	659a      	str	r2, [r3, #88]	; 0x58
 800193a:	e002      	b.n	8001942 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_ADC_Start_DMA+0x15c>)
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_ADC_Start_DMA+0x160>)
 8001950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_ADC_Start_DMA+0x164>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	221c      	movs	r2, #28
 8001960:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0210 	orr.w	r2, r2, #16
 8001978:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3340      	adds	r3, #64	; 0x40
 8001994:	4619      	mov	r1, r3
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f000 ffef 	bl	800297c <HAL_DMA_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fde1 	bl	800156e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019ac:	e00d      	b.n	80019ca <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80019b6:	e008      	b.n	80019ca <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019c4:	e001      	b.n	80019ca <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	50040300 	.word	0x50040300
 80019d8:	50040100 	.word	0x50040100
 80019dc:	50040000 	.word	0x50040000
 80019e0:	0800232d 	.word	0x0800232d
 80019e4:	08002405 	.word	0x08002405
 80019e8:	08002421 	.word	0x08002421

080019ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0b6      	sub	sp, #216	; 0xd8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x22>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e3d5      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x7ce>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fd9d 	bl	8001596 <LL_ADC_REG_IsConversionOngoing>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 83ba 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d824      	bhi.n	8001ab6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	3b02      	subs	r3, #2
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d81b      	bhi.n	8001aae <HAL_ADC_ConfigChannel+0x86>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <HAL_ADC_ConfigChannel+0x54>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001aa5 	.word	0x08001aa5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	220c      	movs	r2, #12
 8001a90:	605a      	str	r2, [r3, #4]
          break;
 8001a92:	e011      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2212      	movs	r2, #18
 8001a98:	605a      	str	r2, [r3, #4]
          break;
 8001a9a:	e00d      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2218      	movs	r2, #24
 8001aa0:	605a      	str	r2, [r3, #4]
          break;
 8001aa2:	e009      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aaa:	605a      	str	r2, [r3, #4]
          break;
 8001aac:	e004      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2206      	movs	r2, #6
 8001ab2:	605a      	str	r2, [r3, #4]
          break;
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ab6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f7ff fc54 	bl	8001372 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fd61 	bl	8001596 <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fd6d 	bl	80015bc <LL_ADC_INJ_IsConversionOngoing>
 8001ae2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 81c1 	bne.w	8001e72 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f040 81bc 	bne.w	8001e72 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b02:	d10f      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff fc5b 	bl	80013ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc02 	bl	8001326 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b22:	e00e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f7ff fc4a 	bl	80013ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fbf2 	bl	8001326 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d00a      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6919      	ldr	r1, [r3, #16]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b74:	f7ff fb82 	bl	800127c <LL_ADC_SetOffset>
 8001b78:	e17b      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb9f 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x17e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fb94 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	e01e      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1bc>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb89 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e004      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1d4>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	e018      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x206>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e004      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001c24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d106      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb58 	bl	80012f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb3c 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x244>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb31 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	f003 021f 	and.w	r2, r3, #31
 8001c6a:	e01e      	b.n	8001caa <HAL_ADC_ConfigChannel+0x282>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fb26 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e004      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x29a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	e018      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x2cc>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e004      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d106      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff faf5 	bl	80012f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fad9 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x30a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2102      	movs	r1, #2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff face 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	e01e      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x348>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2102      	movs	r1, #2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fac3 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e004      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x360>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	e016      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x38e>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e004      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa94 	bl	80012f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa78 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x3cc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2103      	movs	r1, #3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa6d 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e017      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x3fc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2103      	movs	r1, #3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa62 	bl	80012c4 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e0e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001e16:	2320      	movs	r3, #32
 8001e18:	e003      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x414>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	e011      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x438>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fa3f 	bl	80012f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fb66 	bl	8001548 <LL_ADC_IsEnabled>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8140 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f7ff fac5 	bl	8001420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a8f      	ldr	r2, [pc, #572]	; (80020d8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f040 8131 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x4a2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2b09      	cmp	r3, #9
 8001ec0:	bf94      	ite	ls
 8001ec2:	2301      	movls	r3, #1
 8001ec4:	2300      	movhi	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e019      	b.n	8001efe <HAL_ADC_ConfigChannel+0x4d6>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eda:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	bf94      	ite	ls
 8001ef8:	2301      	movls	r3, #1
 8001efa:	2300      	movhi	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d079      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x4f6>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	3301      	adds	r3, #1
 8001f16:	069b      	lsls	r3, r3, #26
 8001f18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1c:	e015      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x522>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x542>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	e017      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x572>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	ea42 0103 	orr.w	r1, r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x598>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	051b      	lsls	r3, r3, #20
 8001fbe:	e018      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x5ca>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e081      	b.n	80020fa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x5ea>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	3301      	adds	r3, #1
 800200a:	069b      	lsls	r3, r3, #26
 800200c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002010:	e015      	b.n	800203e <HAL_ADC_ConfigChannel+0x616>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	069b      	lsls	r3, r3, #26
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_ConfigChannel+0x636>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0e9b      	lsrs	r3, r3, #26
 8002050:	3301      	adds	r3, #1
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	e017      	b.n	800208e <HAL_ADC_ConfigChannel+0x666>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	61fb      	str	r3, [r7, #28]
  return result;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002076:	2320      	movs	r3, #32
 8002078:	e003      	b.n	8002082 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	ea42 0103 	orr.w	r1, r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x692>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	3b1e      	subs	r3, #30
 80020b2:	051b      	lsls	r3, r3, #20
 80020b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b8:	e01e      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x6d0>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	613b      	str	r3, [r7, #16]
  return result;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e006      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x6bc>
 80020d6:	bf00      	nop
 80020d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	051b      	lsls	r3, r3, #20
 80020f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f8:	430b      	orrs	r3, r1
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	6892      	ldr	r2, [r2, #8]
 80020fe:	4619      	mov	r1, r3
 8002100:	f7ff f963 	bl	80013ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_ADC_ConfigChannel+0x7d8>)
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d06c      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002110:	483c      	ldr	r0, [pc, #240]	; (8002204 <HAL_ADC_ConfigChannel+0x7dc>)
 8002112:	f7ff f8a5 	bl	8001260 <LL_ADC_GetCommonPathInternalCh>
 8002116:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_ADC_ConfigChannel+0x7e0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d127      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d121      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a35      	ldr	r2, [pc, #212]	; (800220c <HAL_ADC_ConfigChannel+0x7e4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d157      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800213a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800213e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002142:	4619      	mov	r1, r3
 8002144:	482f      	ldr	r0, [pc, #188]	; (8002204 <HAL_ADC_ConfigChannel+0x7dc>)
 8002146:	f7ff f878 	bl	800123a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_ADC_ConfigChannel+0x7e8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <HAL_ADC_ConfigChannel+0x7ec>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002164:	e002      	b.n	800216c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002172:	e03a      	b.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_ADC_ConfigChannel+0x7f0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d113      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x77e>
 800217e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_ADC_ConfigChannel+0x7e4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d12a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219c:	4619      	mov	r1, r3
 800219e:	4819      	ldr	r0, [pc, #100]	; (8002204 <HAL_ADC_ConfigChannel+0x7dc>)
 80021a0:	f7ff f84b 	bl	800123a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021a4:	e021      	b.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_ADC_ConfigChannel+0x7f4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d11c      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d116      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_ADC_ConfigChannel+0x7e4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <HAL_ADC_ConfigChannel+0x7dc>)
 80021d2:	f7ff f832 	bl	800123a <LL_ADC_SetCommonPathInternalCh>
 80021d6:	e008      	b.n	80021ea <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	37d8      	adds	r7, #216	; 0xd8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	80080000 	.word	0x80080000
 8002204:	50040300 	.word	0x50040300
 8002208:	c7520000 	.word	0xc7520000
 800220c:	50040000 	.word	0x50040000
 8002210:	20000000 	.word	0x20000000
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	cb840000 	.word	0xcb840000
 800221c:	80000001 	.word	0x80000001

08002220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f989 	bl	8001548 <LL_ADC_IsEnabled>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d169      	bne.n	8002310 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <ADC_Enable+0xfc>)
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e055      	b.n	8002312 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f958 	bl	8001520 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002270:	482b      	ldr	r0, [pc, #172]	; (8002320 <ADC_Enable+0x100>)
 8002272:	f7fe fff5 	bl	8001260 <LL_ADC_GetCommonPathInternalCh>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <ADC_Enable+0x104>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	4a28      	ldr	r2, [pc, #160]	; (8002328 <ADC_Enable+0x108>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800229a:	e002      	b.n	80022a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022a8:	f7fe ffa8 	bl	80011fc <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ae:	e028      	b.n	8002302 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f947 	bl	8001548 <LL_ADC_IsEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f92b 	bl	8001520 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ca:	f7fe ff97 	bl	80011fc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d914      	bls.n	8002302 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00d      	beq.n	8002302 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1cf      	bne.n	80022b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	8000003f 	.word	0x8000003f
 8002320:	50040300 	.word	0x50040300
 8002324:	20000000 	.word	0x20000000
 8002328:	053e2d63 	.word	0x053e2d63

0800232c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002342:	2b00      	cmp	r3, #0
 8002344:	d14b      	bne.n	80023de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d021      	beq.n	80023a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fff1 	bl	800134c <LL_ADC_REG_IsTriggerSourceSWStart>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d032      	beq.n	80023d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12b      	bne.n	80023d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11f      	bne.n	80023d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
 80023a2:	e018      	b.n	80023d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d111      	bne.n	80023d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fb08 	bl	80019ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023dc:	e00e      	b.n	80023fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff fb12 	bl	8001a14 <HAL_ADC_ErrorCallback>
}
 80023f0:	e004      	b.n	80023fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff faf4 	bl	8001a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f043 0204 	orr.w	r2, r3, #4
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fae4 	bl	8001a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <LL_ADC_IsEnabled>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <LL_ADC_IsEnabled+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_ADC_IsEnabled+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_REG_IsConversionOngoing>:
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d101      	bne.n	8002492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b09f      	sub	sp, #124	; 0x7c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e089      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024c6:	2300      	movs	r3, #0
 80024c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024ca:	2300      	movs	r3, #0
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d102      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	e001      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e068      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffb9 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 8002508:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffb3 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14a      	bne.n	80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800251a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800251c:	2b00      	cmp	r3, #0
 800251e:	d147      	bne.n	80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002522:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d027      	beq.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253e:	035b      	lsls	r3, r3, #13
 8002540:	430b      	orrs	r3, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002548:	4824      	ldr	r0, [pc, #144]	; (80025dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800254a:	f7ff ff83 	bl	8002454 <LL_ADC_IsEnabled>
 800254e:	4604      	mov	r4, r0
 8002550:	4823      	ldr	r0, [pc, #140]	; (80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002552:	f7ff ff7f 	bl	8002454 <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	4323      	orrs	r3, r4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d132      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002566:	f023 030f 	bic.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	6811      	ldr	r1, [r2, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	430a      	orrs	r2, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800257a:	e023      	b.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002586:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800258a:	f7ff ff63 	bl	8002454 <LL_ADC_IsEnabled>
 800258e:	4604      	mov	r4, r0
 8002590:	4813      	ldr	r0, [pc, #76]	; (80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002592:	f7ff ff5f 	bl	8002454 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	4323      	orrs	r3, r4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d112      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025a6:	f023 030f 	bic.w	r3, r3, #15
 80025aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ae:	e009      	b.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025c2:	e000      	b.n	80025c6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	377c      	adds	r7, #124	; 0x7c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	bf00      	nop
 80025dc:	50040000 	.word	0x50040000
 80025e0:	50040100 	.word	0x50040100
 80025e4:	50040300 	.word	0x50040300

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <__NVIC_EnableIRQ+0x38>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff29 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff3e 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff8e 	bl	80026dc <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff31 	bl	800264c <__NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffa2 	bl	8002744 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e098      	b.n	8002950 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_DMA_Init+0x150>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d80f      	bhi.n	800284a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_DMA_Init+0x154>)
 8002832:	4413      	add	r3, r2
 8002834:	4a4b      	ldr	r2, [pc, #300]	; (8002964 <HAL_DMA_Init+0x158>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	009a      	lsls	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_DMA_Init+0x15c>)
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
 8002848:	e00e      	b.n	8002868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_DMA_Init+0x160>)
 8002852:	4413      	add	r3, r2
 8002854:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_DMA_Init+0x158>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a42      	ldr	r2, [pc, #264]	; (8002970 <HAL_DMA_Init+0x164>)
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c2:	d039      	beq.n	8002938 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_DMA_Init+0x15c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11a      	bne.n	8002904 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_DMA_Init+0x168>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f003 031c 	and.w	r3, r3, #28
 80028da:	210f      	movs	r1, #15
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4924      	ldr	r1, [pc, #144]	; (8002974 <HAL_DMA_Init+0x168>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_DMA_Init+0x168>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 031c 	and.w	r3, r3, #28
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	491d      	ldr	r1, [pc, #116]	; (8002974 <HAL_DMA_Init+0x168>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
 8002902:	e019      	b.n	8002938 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_DMA_Init+0x16c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f003 031c 	and.w	r3, r3, #28
 8002910:	210f      	movs	r1, #15
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	4917      	ldr	r1, [pc, #92]	; (8002978 <HAL_DMA_Init+0x16c>)
 800291a:	4013      	ands	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_DMA_Init+0x16c>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f003 031c 	and.w	r3, r3, #28
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	4911      	ldr	r1, [pc, #68]	; (8002978 <HAL_DMA_Init+0x16c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40020407 	.word	0x40020407
 8002960:	bffdfff8 	.word	0xbffdfff8
 8002964:	cccccccd 	.word	0xcccccccd
 8002968:	40020000 	.word	0x40020000
 800296c:	bffdfbf8 	.word	0xbffdfbf8
 8002970:	40020400 	.word	0x40020400
 8002974:	400200a8 	.word	0x400200a8
 8002978:	400204a8 	.word	0x400204a8

0800297c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x20>
 8002998:	2302      	movs	r3, #2
 800299a:	e04b      	b.n	8002a34 <HAL_DMA_Start_IT+0xb8>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d13a      	bne.n	8002a26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f8e0 	bl	8002b9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 020e 	orr.w	r2, r2, #14
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 020a 	orr.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f003 031c 	and.w	r3, r3, #28
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d026      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x7a>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d021      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f003 021c 	and.w	r2, r3, #28
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d071      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	e06c      	b.n	8002b90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f003 031c 	and.w	r3, r3, #28
 8002abe:	2202      	movs	r2, #2
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02e      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xec>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d029      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 020a 	bic.w	r2, r2, #10
 8002af0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f003 021c 	and.w	r2, r3, #28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2102      	movs	r1, #2
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d038      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b26:	e033      	b.n	8002b90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f003 031c 	and.w	r3, r3, #28
 8002b30:	2208      	movs	r2, #8
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d02a      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x156>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d025      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020e 	bic.w	r2, r2, #14
 8002b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 021c 	and.w	r2, r3, #28
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
}
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f003 021c 	and.w	r2, r3, #28
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d108      	bne.n	8002bde <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bdc:	e007      	b.n	8002bee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0a:	e14e      	b.n	8002eaa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8140 	beq.w	8002ea4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d005      	beq.n	8002c3c <HAL_GPIO_Init+0x40>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d130      	bne.n	8002c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c72:	2201      	movs	r2, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 0201 	and.w	r2, r3, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d017      	beq.n	8002cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d123      	bne.n	8002d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 809a 	beq.w	8002ea4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d70:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <HAL_GPIO_Init+0x2cc>)
 8002d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_GPIO_Init+0x2cc>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002d7c:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <HAL_GPIO_Init+0x2cc>)
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d88:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002db2:	d013      	beq.n	8002ddc <HAL_GPIO_Init+0x1e0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a46      	ldr	r2, [pc, #280]	; (8002ed0 <HAL_GPIO_Init+0x2d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00d      	beq.n	8002dd8 <HAL_GPIO_Init+0x1dc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a45      	ldr	r2, [pc, #276]	; (8002ed4 <HAL_GPIO_Init+0x2d8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <HAL_GPIO_Init+0x1d8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a44      	ldr	r2, [pc, #272]	; (8002ed8 <HAL_GPIO_Init+0x2dc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_GPIO_Init+0x1d4>
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e006      	b.n	8002dde <HAL_GPIO_Init+0x1e2>
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	e004      	b.n	8002dde <HAL_GPIO_Init+0x1e2>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e002      	b.n	8002dde <HAL_GPIO_Init+0x1e2>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_GPIO_Init+0x1e2>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	f002 0203 	and.w	r2, r2, #3
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	4093      	lsls	r3, r2
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dee:	4937      	ldr	r1, [pc, #220]	; (8002ecc <HAL_GPIO_Init+0x2d0>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e20:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e4a:	4a24      	ldr	r2, [pc, #144]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_GPIO_Init+0x2e0>)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f aea9 	bne.w	8002c0c <HAL_GPIO_Init+0x10>
  }
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	48000400 	.word	0x48000400
 8002ed4:	48000800 	.word	0x48000800
 8002ed8:	48000c00 	.word	0x48000c00
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40007000 	.word	0x40007000

08002efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0a:	d130      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d038      	beq.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2232      	movs	r2, #50	; 0x32
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0c9b      	lsrs	r3, r3, #18
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f40:	e002      	b.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d102      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f2      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d110      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e00f      	b.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d007      	beq.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f84:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	431bde83 	.word	0x431bde83

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f000 bc52 	b.w	8003860 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbc:	4ba1      	ldr	r3, [pc, #644]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc6:	4b9f      	ldr	r3, [pc, #636]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80e6 	beq.w	80031aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4c>
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	f040 808d 	bne.w	8003106 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	f040 8089 	bne.w	8003106 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff4:	4b93      	ldr	r3, [pc, #588]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_RCC_OscConfig+0x66>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f000 bc29 	b.w	8003860 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	4b8c      	ldr	r3, [pc, #560]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_RCC_OscConfig+0x80>
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003026:	e005      	b.n	8003034 <HAL_RCC_OscConfig+0x8c>
 8003028:	4b86      	ldr	r3, [pc, #536]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	4293      	cmp	r3, r2
 8003036:	d224      	bcs.n	8003082 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fda1 	bl	8003b84 <RCC_SetFlashLatencyFromMSIRange>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f000 bc09 	b.w	8003860 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304e:	4b7d      	ldr	r3, [pc, #500]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7c      	ldr	r2, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4977      	ldr	r1, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306c:	4b75      	ldr	r3, [pc, #468]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	4972      	ldr	r1, [pc, #456]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
 8003080:	e025      	b.n	80030ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6f      	ldr	r2, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	496a      	ldr	r1, [pc, #424]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a0:	4b68      	ldr	r3, [pc, #416]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd60 	bl	8003b84 <RCC_SetFlashLatencyFromMSIRange>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e3c8      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ce:	f000 fccd 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	495a      	ldr	r1, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x2a0>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_OscConfig+0x2a4>)
 80030ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x2a8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe f832 	bl	800115c <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d052      	beq.n	80031a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	e3ac      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d032      	beq.n	8003174 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800310e:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a4c      	ldr	r2, [pc, #304]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800311a:	f7fe f86f 	bl	80011fc <HAL_GetTick>
 800311e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003122:	f7fe f86b 	bl	80011fc <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e395      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003140:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3f      	ldr	r2, [pc, #252]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	493a      	ldr	r1, [pc, #232]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
 8003172:	e01a      	b.n	80031aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003180:	f7fe f83c 	bl	80011fc <HAL_GetTick>
 8003184:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003188:	f7fe f838 	bl	80011fc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e362      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1e0>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d073      	beq.n	800329e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x220>
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d10e      	bne.n	80031e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d063      	beq.n	800329c <HAL_RCC_OscConfig+0x2f4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d15f      	bne.n	800329c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e33f      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCC_OscConfig+0x250>
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0x28c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x274>
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x28c>
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a05      	ldr	r2, [pc, #20]	; (8003244 <HAL_RCC_OscConfig+0x29c>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd ffde 	bl	80011fc <HAL_GetTick>
 8003240:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	e010      	b.n	8003266 <HAL_RCC_OscConfig+0x2be>
 8003244:	40021000 	.word	0x40021000
 8003248:	080060a0 	.word	0x080060a0
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fd ffd2 	bl	80011fc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e2fc      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	4ba0      	ldr	r3, [pc, #640]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x2ac>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ffc2 	bl	80011fc <HAL_GetTick>
 8003278:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd ffbe 	bl	80011fc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e2e8      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328e:	4b96      	ldr	r3, [pc, #600]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x2d4>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d060      	beq.n	800336c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_OscConfig+0x314>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d116      	bne.n	80032ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032bc:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x32c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e2c5      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	4981      	ldr	r1, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e8:	e040      	b.n	800336c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d023      	beq.n	800333a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f2:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7c      	ldr	r2, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd ff7d 	bl	80011fc <HAL_GetTick>
 8003302:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd ff79 	bl	80011fc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e2a3      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003318:	4b73      	ldr	r3, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	496d      	ldr	r1, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e018      	b.n	800336c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd ff59 	bl	80011fc <HAL_GetTick>
 800334a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd ff55 	bl	80011fc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e27f      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07f      	beq.n	8003478 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d05f      	beq.n	8003440 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003386:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	429a      	cmp	r2, r3
 8003394:	d037      	beq.n	8003406 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e258      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c8:	f7fd ff18 	bl	80011fc <HAL_GetTick>
 80033cc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd ff14 	bl	80011fc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b11      	cmp	r3, #17
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e23e      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80033e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ef      	bne.n	80033d0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80033f0:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	f023 0210 	bic.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	493a      	ldr	r1, [pc, #232]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	4a36      	ldr	r2, [pc, #216]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd fef1 	bl	80011fc <HAL_GetTick>
 800341a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd feed 	bl	80011fc <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b11      	cmp	r3, #17
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e217      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ef      	beq.n	800341e <HAL_RCC_OscConfig+0x476>
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fed4 	bl	80011fc <HAL_GetTick>
 8003454:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fd fed0 	bl	80011fc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b11      	cmp	r3, #17
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1fa      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ef      	bne.n	8003458 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80c1 	beq.w	8003608 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10e      	bne.n	80034b6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	; 0x58
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_RCC_OscConfig+0x540>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_RCC_OscConfig+0x544>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_RCC_OscConfig+0x544>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x544>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fe95 	bl	80011fc <HAL_GetTick>
 80034d2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	e00c      	b.n	80034f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fd fe91 	bl	80011fc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d905      	bls.n	80034f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1bb      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f0:	4bb1      	ldr	r3, [pc, #708]	; (80037b8 <HAL_RCC_OscConfig+0x810>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ec      	beq.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02c      	beq.n	8003562 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003508:	4bac      	ldr	r3, [pc, #688]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	49a8      	ldr	r1, [pc, #672]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800352e:	4ba3      	ldr	r3, [pc, #652]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	4aa1      	ldr	r2, [pc, #644]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800353e:	4b9f      	ldr	r3, [pc, #636]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	4a9d      	ldr	r2, [pc, #628]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800354e:	e018      	b.n	8003582 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003550:	4b9a      	ldr	r3, [pc, #616]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a99      	ldr	r2, [pc, #612]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	e00f      	b.n	8003582 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003562:	4b96      	ldr	r3, [pc, #600]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	4a94      	ldr	r2, [pc, #592]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003572:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	4a90      	ldr	r2, [pc, #576]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fd fe37 	bl	80011fc <HAL_GetTick>
 800358e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd fe33 	bl	80011fc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e15b      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4b84      	ldr	r3, [pc, #528]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ed      	beq.n	8003592 <HAL_RCC_OscConfig+0x5ea>
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd fe20 	bl	80011fc <HAL_GetTick>
 80035bc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fd fe1c 	bl	80011fc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e144      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d6:	4b79      	ldr	r3, [pc, #484]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ed      	bne.n	80035c0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80035ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d03c      	beq.n	800368e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01c      	beq.n	8003656 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800361c:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800361e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003622:	4a66      	ldr	r2, [pc, #408]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fd fde6 	bl	80011fc <HAL_GetTick>
 8003630:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003634:	f7fd fde2 	bl	80011fc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e10c      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ef      	beq.n	8003634 <HAL_RCC_OscConfig+0x68c>
 8003654:	e01b      	b.n	800368e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365c:	4a57      	ldr	r2, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd fdc9 	bl	80011fc <HAL_GetTick>
 800366a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366e:	f7fd fdc5 	bl	80011fc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0ef      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003680:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ef      	bne.n	800366e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80e3 	beq.w	800385e <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2b02      	cmp	r3, #2
 800369e:	f040 80b7 	bne.w	8003810 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036a2:	4b46      	ldr	r3, [pc, #280]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d124      	bne.n	8003700 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	3b01      	subs	r3, #1
 80036c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d11b      	bne.n	8003700 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d113      	bne.n	8003700 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d061      	beq.n	80037c4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d056      	beq.n	80037b4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2c      	ldr	r2, [pc, #176]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003712:	f7fd fd73 	bl	80011fc <HAL_GetTick>
 8003716:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fd fd6f 	bl	80011fc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e099      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_OscConfig+0x818>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003748:	3a01      	subs	r2, #1
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003752:	0212      	lsls	r2, r2, #8
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800375a:	0852      	lsrs	r2, r2, #1
 800375c:	3a01      	subs	r2, #1
 800375e:	0552      	lsls	r2, r2, #21
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003766:	0852      	lsrs	r2, r2, #1
 8003768:	3a01      	subs	r2, #1
 800376a:	0652      	lsls	r2, r2, #25
 800376c:	430a      	orrs	r2, r1
 800376e:	4913      	ldr	r1, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800378c:	f7fd fd36 	bl	80011fc <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fd32 	bl	80011fc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e05c      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_OscConfig+0x814>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b2:	e054      	b.n	800385e <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e053      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
 80037b8:	40007000 	.word	0x40007000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d146      	bne.n	800385e <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037e8:	f7fd fd08 	bl	80011fc <HAL_GetTick>
 80037ec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fd fd04 	bl	80011fc <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e02e      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x848>
 800380e:	e026      	b.n	800385e <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d021      	beq.n	800385a <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 800381c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd fceb 	bl	80011fc <HAL_GetTick>
 8003826:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382a:	f7fd fce7 	bl	80011fc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e011      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <HAL_RCC_OscConfig+0x8c0>)
 800384e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60d3      	str	r3, [r2, #12]
 8003858:	e001      	b.n	800385e <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000

0800386c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0e7      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b72      	ldr	r3, [pc, #456]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4970      	ldr	r1, [pc, #448]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0cf      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4960      	ldr	r1, [pc, #384]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d04c      	beq.n	8003984 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0a6      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e09a      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003922:	4b4e      	ldr	r3, [pc, #312]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e08e      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003932:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e086      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4943      	ldr	r1, [pc, #268]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fd fc52 	bl	80011fc <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fd fc4e 	bl	80011fc <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e06e      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399c:	429a      	cmp	r2, r3
 800399e:	d208      	bcs.n	80039b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	492b      	ldr	r1, [pc, #172]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d210      	bcs.n	80039e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 0207 	bic.w	r2, r3, #7
 80039c8:	4923      	ldr	r1, [pc, #140]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCC_ClockConfig+0x1ec>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e036      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4918      	ldr	r1, [pc, #96]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4910      	ldr	r1, [pc, #64]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a20:	f000 f824 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	490b      	ldr	r1, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1f4>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3c:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1f8>)
 8003a3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1fc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fb89 	bl	800115c <HAL_InitTick>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080060a0 	.word	0x080060a0
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004

08003a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d121      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d11e      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003aa0:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e005      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003abc:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d102      	bne.n	8003aea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e004      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003af0:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003af2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d134      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d003      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0xac>
 8003b10:	e005      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003b14:	617b      	str	r3, [r7, #20]
      break;
 8003b16:	e005      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b1a:	617b      	str	r3, [r7, #20]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	617b      	str	r3, [r7, #20]
      break;
 8003b22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	3301      	adds	r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	fb02 f203 	mul.w	r2, r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0e5b      	lsrs	r3, r3, #25
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	3301      	adds	r3, #1
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b64:	69bb      	ldr	r3, [r7, #24]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	080060b0 	.word	0x080060b0
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b9c:	f7ff f9a0 	bl	8002ee0 <HAL_PWREx_GetVoltageRange>
 8003ba0:	6178      	str	r0, [r7, #20]
 8003ba2:	e014      	b.n	8003bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	4a24      	ldr	r2, [pc, #144]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bbc:	f7ff f990 	bl	8002ee0 <HAL_PWREx_GetVoltageRange>
 8003bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d10b      	bne.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d919      	bls.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2ba0      	cmp	r3, #160	; 0xa0
 8003be0:	d902      	bls.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be2:	2302      	movs	r3, #2
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	e013      	b.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be8:	2301      	movs	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e010      	b.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d902      	bls.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e00a      	b.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d102      	bne.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c00:	2302      	movs	r3, #2
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e004      	b.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d101      	bne.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	4909      	ldr	r1, [pc, #36]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40022000 	.word	0x40022000

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809e 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca4:	f7fd faaa 	bl	80011fc <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003caa:	e009      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd faa6 	bl	80011fc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc0:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d15a      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d019      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fa66 	bl	80011fc <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fa62 	bl	80011fc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ec      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b6e      	ldr	r3, [pc, #440]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	4a6d      	ldr	r2, [pc, #436]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4964      	ldr	r1, [pc, #400]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dcc:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 020c 	bic.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	495c      	ldr	r1, [pc, #368]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dee:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4953      	ldr	r1, [pc, #332]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e10:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	494b      	ldr	r1, [pc, #300]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e32:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4942      	ldr	r1, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e54:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	493a      	ldr	r1, [pc, #232]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e76:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	4931      	ldr	r1, [pc, #196]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e98:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4929      	ldr	r1, [pc, #164]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	4920      	ldr	r1, [pc, #128]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	4918      	ldr	r1, [pc, #96]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	490a      	ldr	r1, [pc, #40]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f40:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e049      	b.n	8003ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc feaa 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fb52 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e049      	b.n	80040a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f841 	bl	80040ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f000 fafb 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x24>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e03c      	b.n	800415e <HAL_TIM_PWM_Start+0x9e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x3e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e02f      	b.n	800415e <HAL_TIM_PWM_Start+0x9e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x58>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e022      	b.n	800415e <HAL_TIM_PWM_Start+0x9e>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d109      	bne.n	8004132 <HAL_TIM_PWM_Start+0x72>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	e015      	b.n	800415e <HAL_TIM_PWM_Start+0x9e>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d109      	bne.n	800414c <HAL_TIM_PWM_Start+0x8c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e008      	b.n	800415e <HAL_TIM_PWM_Start+0x9e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07e      	b.n	8004264 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0xb6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	e023      	b.n	80041be <HAL_TIM_PWM_Start+0xfe>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0xc6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004184:	e01b      	b.n	80041be <HAL_TIM_PWM_Start+0xfe>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0xd6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004194:	e013      	b.n	80041be <HAL_TIM_PWM_Start+0xfe>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0xe6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041a4:	e00b      	b.n	80041be <HAL_TIM_PWM_Start+0xfe>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0xf6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b4:	e003      	b.n	80041be <HAL_TIM_PWM_Start+0xfe>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fdb2 	bl	8004d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a26      	ldr	r2, [pc, #152]	; (800426c <HAL_TIM_PWM_Start+0x1ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start+0x12a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_TIM_PWM_Start+0x1b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIM_PWM_Start+0x12a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <HAL_TIM_PWM_Start+0x1b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_PWM_Start+0x12e>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_PWM_Start+0x130>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_TIM_PWM_Start+0x1ac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_TIM_PWM_Start+0x162>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d004      	beq.n	8004222 <HAL_TIM_PWM_Start+0x162>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_TIM_PWM_Start+0x1b0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d115      	bne.n	800424e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_TIM_PWM_Start+0x1b8>)
 800422a:	4013      	ands	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b06      	cmp	r3, #6
 8004232:	d015      	beq.n	8004260 <HAL_TIM_PWM_Start+0x1a0>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423a:	d011      	beq.n	8004260 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	e008      	b.n	8004260 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e000      	b.n	8004262 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	00010007 	.word	0x00010007

0800427c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004296:	2302      	movs	r3, #2
 8004298:	e0ff      	b.n	800449a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b14      	cmp	r3, #20
 80042a6:	f200 80f0 	bhi.w	800448a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	08004305 	.word	0x08004305
 80042b4:	0800448b 	.word	0x0800448b
 80042b8:	0800448b 	.word	0x0800448b
 80042bc:	0800448b 	.word	0x0800448b
 80042c0:	08004345 	.word	0x08004345
 80042c4:	0800448b 	.word	0x0800448b
 80042c8:	0800448b 	.word	0x0800448b
 80042cc:	0800448b 	.word	0x0800448b
 80042d0:	08004387 	.word	0x08004387
 80042d4:	0800448b 	.word	0x0800448b
 80042d8:	0800448b 	.word	0x0800448b
 80042dc:	0800448b 	.word	0x0800448b
 80042e0:	080043c7 	.word	0x080043c7
 80042e4:	0800448b 	.word	0x0800448b
 80042e8:	0800448b 	.word	0x0800448b
 80042ec:	0800448b 	.word	0x0800448b
 80042f0:	08004409 	.word	0x08004409
 80042f4:	0800448b 	.word	0x0800448b
 80042f8:	0800448b 	.word	0x0800448b
 80042fc:	0800448b 	.word	0x0800448b
 8004300:	08004449 	.word	0x08004449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f9f8 	bl	8004700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0208 	orr.w	r2, r2, #8
 800431e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	619a      	str	r2, [r3, #24]
      break;
 8004342:	e0a5      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fa54 	bl	80047f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800435e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6999      	ldr	r1, [r3, #24]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	021a      	lsls	r2, r3, #8
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	619a      	str	r2, [r3, #24]
      break;
 8004384:	e084      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 faad 	bl	80048ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0208 	orr.w	r2, r2, #8
 80043a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0204 	bic.w	r2, r2, #4
 80043b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	61da      	str	r2, [r3, #28]
      break;
 80043c4:	e064      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fb05 	bl	80049dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69d9      	ldr	r1, [r3, #28]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	021a      	lsls	r2, r3, #8
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	61da      	str	r2, [r3, #28]
      break;
 8004406:	e043      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb42 	bl	8004a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004446:	e023      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fb7a 	bl	8004b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004488:	e002      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
      break;
 800448e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop

080044a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIM_ConfigClockSource+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0b6      	b.n	800462e <HAL_TIM_ConfigClockSource+0x18a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fc:	d03e      	beq.n	800457c <HAL_TIM_ConfigClockSource+0xd8>
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004502:	f200 8087 	bhi.w	8004614 <HAL_TIM_ConfigClockSource+0x170>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	f000 8086 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x176>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	d87f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d01a      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xaa>
 8004518:	2b70      	cmp	r3, #112	; 0x70
 800451a:	d87b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d050      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x11e>
 8004520:	2b60      	cmp	r3, #96	; 0x60
 8004522:	d877      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 8004524:	2b50      	cmp	r3, #80	; 0x50
 8004526:	d03c      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xfe>
 8004528:	2b50      	cmp	r3, #80	; 0x50
 800452a:	d873      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d058      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x13e>
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d86f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d064      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15e>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d86b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d060      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15e>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d867      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05c      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15e>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d05a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15e>
 800454c:	e062      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f000 fbc7 	bl	8004cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	609a      	str	r2, [r3, #8]
      break;
 800457a:	e04f      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f000 fbb0 	bl	8004cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800459e:	609a      	str	r2, [r3, #8]
      break;
 80045a0:	e03c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fb24 	bl	8004bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2150      	movs	r1, #80	; 0x50
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb7d 	bl	8004cba <TIM_ITRx_SetConfig>
      break;
 80045c0:	e02c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 fb43 	bl	8004c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2160      	movs	r1, #96	; 0x60
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fb6d 	bl	8004cba <TIM_ITRx_SetConfig>
      break;
 80045e0:	e01c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f000 fb04 	bl	8004bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fb5d 	bl	8004cba <TIM_ITRx_SetConfig>
      break;
 8004600:	e00c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f000 fb54 	bl	8004cba <TIM_ITRx_SetConfig>
      break;
 8004612:	e003      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e000      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800461a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <TIM_Base_SetConfig+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x20>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <TIM_Base_SetConfig+0xbc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_Base_SetConfig+0x52>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d007      	beq.n	800468a <TIM_Base_SetConfig+0x52>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <TIM_Base_SetConfig+0xc0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_Base_SetConfig+0x52>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <TIM_Base_SetConfig+0xc4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <TIM_Base_SetConfig+0xbc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0xa0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <TIM_Base_SetConfig+0xc0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0xa0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <TIM_Base_SetConfig+0xc4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	615a      	str	r2, [r3, #20]
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400

08004700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0302 	bic.w	r3, r3, #2
 800474c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <TIM_OC1_SetConfig+0xec>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_OC1_SetConfig+0x70>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <TIM_OC1_SetConfig+0xf0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC1_SetConfig+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <TIM_OC1_SetConfig+0xf4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10c      	bne.n	800478a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0308 	bic.w	r3, r3, #8
 8004776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a17      	ldr	r2, [pc, #92]	; (80047ec <TIM_OC1_SetConfig+0xec>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_OC1_SetConfig+0xa2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <TIM_OC1_SetConfig+0xf0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC1_SetConfig+0xa2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <TIM_OC1_SetConfig+0xf4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d111      	bne.n	80047c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400

080047f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0210 	bic.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0320 	bic.w	r3, r3, #32
 8004846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <TIM_OC2_SetConfig+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10d      	bne.n	8004878 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <TIM_OC2_SetConfig+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_OC2_SetConfig+0x98>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <TIM_OC2_SetConfig+0xec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_OC2_SetConfig+0x98>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <TIM_OC2_SetConfig+0xf0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d113      	bne.n	80048b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400

080048ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <TIM_OC3_SetConfig+0xe4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10d      	bne.n	800496a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <TIM_OC3_SetConfig+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_OC3_SetConfig+0x96>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <TIM_OC3_SetConfig+0xe8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_OC3_SetConfig+0x96>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <TIM_OC3_SetConfig+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d113      	bne.n	80049aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400

080049dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	031b      	lsls	r3, r3, #12
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <TIM_OC4_SetConfig+0xb0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC4_SetConfig+0x74>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <TIM_OC4_SetConfig+0xb4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC4_SetConfig+0x74>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <TIM_OC4_SetConfig+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400

08004a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <TIM_OC5_SetConfig+0xa4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_OC5_SetConfig+0x6a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <TIM_OC5_SetConfig+0xa8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC5_SetConfig+0x6a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <TIM_OC5_SetConfig+0xac>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d109      	bne.n	8004b16 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400

08004b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <TIM_OC6_SetConfig+0xa8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_OC6_SetConfig+0x6c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <TIM_OC6_SetConfig+0xac>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC6_SetConfig+0x6c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <TIM_OC6_SetConfig+0xb0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d109      	bne.n	8004bc8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400

08004bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f023 0201 	bic.w	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f023 030a 	bic.w	r3, r3, #10
 8004c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b087      	sub	sp, #28
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f023 0210 	bic.w	r2, r3, #16
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	031b      	lsls	r3, r3, #12
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f043 0307 	orr.w	r3, r3, #7
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	401a      	ands	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e04f      	b.n	8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10c      	bne.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40014000 	.word	0x40014000

08004e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e060      	b.n	8004f26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d115      	bne.n	8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	051b      	lsls	r3, r3, #20
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00

08004f38 <__assert_func>:
 8004f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <__assert_func+0x2c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4605      	mov	r5, r0
 8004f44:	68d8      	ldr	r0, [r3, #12]
 8004f46:	b14c      	cbz	r4, 8004f5c <__assert_func+0x24>
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <__assert_func+0x30>)
 8004f4a:	9100      	str	r1, [sp, #0]
 8004f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f50:	4906      	ldr	r1, [pc, #24]	; (8004f6c <__assert_func+0x34>)
 8004f52:	462b      	mov	r3, r5
 8004f54:	f000 f814 	bl	8004f80 <fiprintf>
 8004f58:	f000 fbfe 	bl	8005758 <abort>
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <__assert_func+0x38>)
 8004f5e:	461c      	mov	r4, r3
 8004f60:	e7f3      	b.n	8004f4a <__assert_func+0x12>
 8004f62:	bf00      	nop
 8004f64:	2000000c 	.word	0x2000000c
 8004f68:	08006107 	.word	0x08006107
 8004f6c:	08006114 	.word	0x08006114
 8004f70:	08006142 	.word	0x08006142

08004f74 <__errno>:
 8004f74:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <__errno+0x8>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <fiprintf>:
 8004f80:	b40e      	push	{r1, r2, r3}
 8004f82:	b503      	push	{r0, r1, lr}
 8004f84:	4601      	mov	r1, r0
 8004f86:	ab03      	add	r3, sp, #12
 8004f88:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <fiprintf+0x20>)
 8004f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f8e:	6800      	ldr	r0, [r0, #0]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	f000 f85d 	bl	8005050 <_vfiprintf_r>
 8004f96:	b002      	add	sp, #8
 8004f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f9c:	b003      	add	sp, #12
 8004f9e:	4770      	bx	lr
 8004fa0:	2000000c 	.word	0x2000000c

08004fa4 <__libc_init_array>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	4d0d      	ldr	r5, [pc, #52]	; (8004fdc <__libc_init_array+0x38>)
 8004fa8:	4c0d      	ldr	r4, [pc, #52]	; (8004fe0 <__libc_init_array+0x3c>)
 8004faa:	1b64      	subs	r4, r4, r5
 8004fac:	10a4      	asrs	r4, r4, #2
 8004fae:	2600      	movs	r6, #0
 8004fb0:	42a6      	cmp	r6, r4
 8004fb2:	d109      	bne.n	8004fc8 <__libc_init_array+0x24>
 8004fb4:	4d0b      	ldr	r5, [pc, #44]	; (8004fe4 <__libc_init_array+0x40>)
 8004fb6:	4c0c      	ldr	r4, [pc, #48]	; (8004fe8 <__libc_init_array+0x44>)
 8004fb8:	f001 f82a 	bl	8006010 <_init>
 8004fbc:	1b64      	subs	r4, r4, r5
 8004fbe:	10a4      	asrs	r4, r4, #2
 8004fc0:	2600      	movs	r6, #0
 8004fc2:	42a6      	cmp	r6, r4
 8004fc4:	d105      	bne.n	8004fd2 <__libc_init_array+0x2e>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fcc:	4798      	blx	r3
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7ee      	b.n	8004fb0 <__libc_init_array+0xc>
 8004fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd6:	4798      	blx	r3
 8004fd8:	3601      	adds	r6, #1
 8004fda:	e7f2      	b.n	8004fc2 <__libc_init_array+0x1e>
 8004fdc:	080061dc 	.word	0x080061dc
 8004fe0:	080061dc 	.word	0x080061dc
 8004fe4:	080061dc 	.word	0x080061dc
 8004fe8:	080061e0 	.word	0x080061e0

08004fec <memset>:
 8004fec:	4402      	add	r2, r0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <__sfputc_r>:
 8004ffc:	6893      	ldr	r3, [r2, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	b410      	push	{r4}
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	da08      	bge.n	800501a <__sfputc_r+0x1e>
 8005008:	6994      	ldr	r4, [r2, #24]
 800500a:	42a3      	cmp	r3, r4
 800500c:	db01      	blt.n	8005012 <__sfputc_r+0x16>
 800500e:	290a      	cmp	r1, #10
 8005010:	d103      	bne.n	800501a <__sfputc_r+0x1e>
 8005012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005016:	f000 badf 	b.w	80055d8 <__swbuf_r>
 800501a:	6813      	ldr	r3, [r2, #0]
 800501c:	1c58      	adds	r0, r3, #1
 800501e:	6010      	str	r0, [r2, #0]
 8005020:	7019      	strb	r1, [r3, #0]
 8005022:	4608      	mov	r0, r1
 8005024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005028:	4770      	bx	lr

0800502a <__sfputs_r>:
 800502a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	4614      	mov	r4, r2
 8005032:	18d5      	adds	r5, r2, r3
 8005034:	42ac      	cmp	r4, r5
 8005036:	d101      	bne.n	800503c <__sfputs_r+0x12>
 8005038:	2000      	movs	r0, #0
 800503a:	e007      	b.n	800504c <__sfputs_r+0x22>
 800503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005040:	463a      	mov	r2, r7
 8005042:	4630      	mov	r0, r6
 8005044:	f7ff ffda 	bl	8004ffc <__sfputc_r>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d1f3      	bne.n	8005034 <__sfputs_r+0xa>
 800504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005050 <_vfiprintf_r>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	460d      	mov	r5, r1
 8005056:	b09d      	sub	sp, #116	; 0x74
 8005058:	4614      	mov	r4, r2
 800505a:	4698      	mov	r8, r3
 800505c:	4606      	mov	r6, r0
 800505e:	b118      	cbz	r0, 8005068 <_vfiprintf_r+0x18>
 8005060:	6983      	ldr	r3, [r0, #24]
 8005062:	b90b      	cbnz	r3, 8005068 <_vfiprintf_r+0x18>
 8005064:	f000 fc9a 	bl	800599c <__sinit>
 8005068:	4b89      	ldr	r3, [pc, #548]	; (8005290 <_vfiprintf_r+0x240>)
 800506a:	429d      	cmp	r5, r3
 800506c:	d11b      	bne.n	80050a6 <_vfiprintf_r+0x56>
 800506e:	6875      	ldr	r5, [r6, #4]
 8005070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005072:	07d9      	lsls	r1, r3, #31
 8005074:	d405      	bmi.n	8005082 <_vfiprintf_r+0x32>
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	059a      	lsls	r2, r3, #22
 800507a:	d402      	bmi.n	8005082 <_vfiprintf_r+0x32>
 800507c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800507e:	f000 fd2b 	bl	8005ad8 <__retarget_lock_acquire_recursive>
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	d501      	bpl.n	800508c <_vfiprintf_r+0x3c>
 8005088:	692b      	ldr	r3, [r5, #16]
 800508a:	b9eb      	cbnz	r3, 80050c8 <_vfiprintf_r+0x78>
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f000 faf4 	bl	800567c <__swsetup_r>
 8005094:	b1c0      	cbz	r0, 80050c8 <_vfiprintf_r+0x78>
 8005096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005098:	07dc      	lsls	r4, r3, #31
 800509a:	d50e      	bpl.n	80050ba <_vfiprintf_r+0x6a>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a0:	b01d      	add	sp, #116	; 0x74
 80050a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a6:	4b7b      	ldr	r3, [pc, #492]	; (8005294 <_vfiprintf_r+0x244>)
 80050a8:	429d      	cmp	r5, r3
 80050aa:	d101      	bne.n	80050b0 <_vfiprintf_r+0x60>
 80050ac:	68b5      	ldr	r5, [r6, #8]
 80050ae:	e7df      	b.n	8005070 <_vfiprintf_r+0x20>
 80050b0:	4b79      	ldr	r3, [pc, #484]	; (8005298 <_vfiprintf_r+0x248>)
 80050b2:	429d      	cmp	r5, r3
 80050b4:	bf08      	it	eq
 80050b6:	68f5      	ldreq	r5, [r6, #12]
 80050b8:	e7da      	b.n	8005070 <_vfiprintf_r+0x20>
 80050ba:	89ab      	ldrh	r3, [r5, #12]
 80050bc:	0598      	lsls	r0, r3, #22
 80050be:	d4ed      	bmi.n	800509c <_vfiprintf_r+0x4c>
 80050c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c2:	f000 fd0a 	bl	8005ada <__retarget_lock_release_recursive>
 80050c6:	e7e9      	b.n	800509c <_vfiprintf_r+0x4c>
 80050c8:	2300      	movs	r3, #0
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	2320      	movs	r3, #32
 80050ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d6:	2330      	movs	r3, #48	; 0x30
 80050d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800529c <_vfiprintf_r+0x24c>
 80050dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050e0:	f04f 0901 	mov.w	r9, #1
 80050e4:	4623      	mov	r3, r4
 80050e6:	469a      	mov	sl, r3
 80050e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ec:	b10a      	cbz	r2, 80050f2 <_vfiprintf_r+0xa2>
 80050ee:	2a25      	cmp	r2, #37	; 0x25
 80050f0:	d1f9      	bne.n	80050e6 <_vfiprintf_r+0x96>
 80050f2:	ebba 0b04 	subs.w	fp, sl, r4
 80050f6:	d00b      	beq.n	8005110 <_vfiprintf_r+0xc0>
 80050f8:	465b      	mov	r3, fp
 80050fa:	4622      	mov	r2, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ff93 	bl	800502a <__sfputs_r>
 8005104:	3001      	adds	r0, #1
 8005106:	f000 80aa 	beq.w	800525e <_vfiprintf_r+0x20e>
 800510a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510c:	445a      	add	r2, fp
 800510e:	9209      	str	r2, [sp, #36]	; 0x24
 8005110:	f89a 3000 	ldrb.w	r3, [sl]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80a2 	beq.w	800525e <_vfiprintf_r+0x20e>
 800511a:	2300      	movs	r3, #0
 800511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005124:	f10a 0a01 	add.w	sl, sl, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005130:	931a      	str	r3, [sp, #104]	; 0x68
 8005132:	4654      	mov	r4, sl
 8005134:	2205      	movs	r2, #5
 8005136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513a:	4858      	ldr	r0, [pc, #352]	; (800529c <_vfiprintf_r+0x24c>)
 800513c:	f7fb f848 	bl	80001d0 <memchr>
 8005140:	9a04      	ldr	r2, [sp, #16]
 8005142:	b9d8      	cbnz	r0, 800517c <_vfiprintf_r+0x12c>
 8005144:	06d1      	lsls	r1, r2, #27
 8005146:	bf44      	itt	mi
 8005148:	2320      	movmi	r3, #32
 800514a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800514e:	0713      	lsls	r3, r2, #28
 8005150:	bf44      	itt	mi
 8005152:	232b      	movmi	r3, #43	; 0x2b
 8005154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005158:	f89a 3000 	ldrb.w	r3, [sl]
 800515c:	2b2a      	cmp	r3, #42	; 0x2a
 800515e:	d015      	beq.n	800518c <_vfiprintf_r+0x13c>
 8005160:	9a07      	ldr	r2, [sp, #28]
 8005162:	4654      	mov	r4, sl
 8005164:	2000      	movs	r0, #0
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4621      	mov	r1, r4
 800516c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005170:	3b30      	subs	r3, #48	; 0x30
 8005172:	2b09      	cmp	r3, #9
 8005174:	d94e      	bls.n	8005214 <_vfiprintf_r+0x1c4>
 8005176:	b1b0      	cbz	r0, 80051a6 <_vfiprintf_r+0x156>
 8005178:	9207      	str	r2, [sp, #28]
 800517a:	e014      	b.n	80051a6 <_vfiprintf_r+0x156>
 800517c:	eba0 0308 	sub.w	r3, r0, r8
 8005180:	fa09 f303 	lsl.w	r3, r9, r3
 8005184:	4313      	orrs	r3, r2
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	46a2      	mov	sl, r4
 800518a:	e7d2      	b.n	8005132 <_vfiprintf_r+0xe2>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	1d19      	adds	r1, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	9103      	str	r1, [sp, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfbb      	ittet	lt
 8005198:	425b      	neglt	r3, r3
 800519a:	f042 0202 	orrlt.w	r2, r2, #2
 800519e:	9307      	strge	r3, [sp, #28]
 80051a0:	9307      	strlt	r3, [sp, #28]
 80051a2:	bfb8      	it	lt
 80051a4:	9204      	strlt	r2, [sp, #16]
 80051a6:	7823      	ldrb	r3, [r4, #0]
 80051a8:	2b2e      	cmp	r3, #46	; 0x2e
 80051aa:	d10c      	bne.n	80051c6 <_vfiprintf_r+0x176>
 80051ac:	7863      	ldrb	r3, [r4, #1]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d135      	bne.n	800521e <_vfiprintf_r+0x1ce>
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	1d1a      	adds	r2, r3, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	9203      	str	r2, [sp, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfb8      	it	lt
 80051be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051c2:	3402      	adds	r4, #2
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052ac <_vfiprintf_r+0x25c>
 80051ca:	7821      	ldrb	r1, [r4, #0]
 80051cc:	2203      	movs	r2, #3
 80051ce:	4650      	mov	r0, sl
 80051d0:	f7fa fffe 	bl	80001d0 <memchr>
 80051d4:	b140      	cbz	r0, 80051e8 <_vfiprintf_r+0x198>
 80051d6:	2340      	movs	r3, #64	; 0x40
 80051d8:	eba0 000a 	sub.w	r0, r0, sl
 80051dc:	fa03 f000 	lsl.w	r0, r3, r0
 80051e0:	9b04      	ldr	r3, [sp, #16]
 80051e2:	4303      	orrs	r3, r0
 80051e4:	3401      	adds	r4, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	482c      	ldr	r0, [pc, #176]	; (80052a0 <_vfiprintf_r+0x250>)
 80051ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051f2:	2206      	movs	r2, #6
 80051f4:	f7fa ffec 	bl	80001d0 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d03f      	beq.n	800527c <_vfiprintf_r+0x22c>
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <_vfiprintf_r+0x254>)
 80051fe:	bb1b      	cbnz	r3, 8005248 <_vfiprintf_r+0x1f8>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	3307      	adds	r3, #7
 8005204:	f023 0307 	bic.w	r3, r3, #7
 8005208:	3308      	adds	r3, #8
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520e:	443b      	add	r3, r7
 8005210:	9309      	str	r3, [sp, #36]	; 0x24
 8005212:	e767      	b.n	80050e4 <_vfiprintf_r+0x94>
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	e7a5      	b.n	800516a <_vfiprintf_r+0x11a>
 800521e:	2300      	movs	r3, #0
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0c0a 	mov.w	ip, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005230:	3a30      	subs	r2, #48	; 0x30
 8005232:	2a09      	cmp	r2, #9
 8005234:	d903      	bls.n	800523e <_vfiprintf_r+0x1ee>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0c5      	beq.n	80051c6 <_vfiprintf_r+0x176>
 800523a:	9105      	str	r1, [sp, #20]
 800523c:	e7c3      	b.n	80051c6 <_vfiprintf_r+0x176>
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	e7f0      	b.n	800522a <_vfiprintf_r+0x1da>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <_vfiprintf_r+0x258>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4630      	mov	r0, r6
 8005254:	f3af 8000 	nop.w
 8005258:	4607      	mov	r7, r0
 800525a:	1c78      	adds	r0, r7, #1
 800525c:	d1d6      	bne.n	800520c <_vfiprintf_r+0x1bc>
 800525e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005260:	07d9      	lsls	r1, r3, #31
 8005262:	d405      	bmi.n	8005270 <_vfiprintf_r+0x220>
 8005264:	89ab      	ldrh	r3, [r5, #12]
 8005266:	059a      	lsls	r2, r3, #22
 8005268:	d402      	bmi.n	8005270 <_vfiprintf_r+0x220>
 800526a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800526c:	f000 fc35 	bl	8005ada <__retarget_lock_release_recursive>
 8005270:	89ab      	ldrh	r3, [r5, #12]
 8005272:	065b      	lsls	r3, r3, #25
 8005274:	f53f af12 	bmi.w	800509c <_vfiprintf_r+0x4c>
 8005278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800527a:	e711      	b.n	80050a0 <_vfiprintf_r+0x50>
 800527c:	ab03      	add	r3, sp, #12
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	462a      	mov	r2, r5
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <_vfiprintf_r+0x258>)
 8005284:	a904      	add	r1, sp, #16
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f880 	bl	800538c <_printf_i>
 800528c:	e7e4      	b.n	8005258 <_vfiprintf_r+0x208>
 800528e:	bf00      	nop
 8005290:	0800619c 	.word	0x0800619c
 8005294:	080061bc 	.word	0x080061bc
 8005298:	0800617c 	.word	0x0800617c
 800529c:	08006148 	.word	0x08006148
 80052a0:	08006152 	.word	0x08006152
 80052a4:	00000000 	.word	0x00000000
 80052a8:	0800502b 	.word	0x0800502b
 80052ac:	0800614e 	.word	0x0800614e

080052b0 <_printf_common>:
 80052b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	4616      	mov	r6, r2
 80052b6:	4699      	mov	r9, r3
 80052b8:	688a      	ldr	r2, [r1, #8]
 80052ba:	690b      	ldr	r3, [r1, #16]
 80052bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bfb8      	it	lt
 80052c4:	4613      	movlt	r3, r2
 80052c6:	6033      	str	r3, [r6, #0]
 80052c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052cc:	4607      	mov	r7, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b10a      	cbz	r2, 80052d6 <_printf_common+0x26>
 80052d2:	3301      	adds	r3, #1
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	0699      	lsls	r1, r3, #26
 80052da:	bf42      	ittt	mi
 80052dc:	6833      	ldrmi	r3, [r6, #0]
 80052de:	3302      	addmi	r3, #2
 80052e0:	6033      	strmi	r3, [r6, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	f015 0506 	ands.w	r5, r5, #6
 80052e8:	d106      	bne.n	80052f8 <_printf_common+0x48>
 80052ea:	f104 0a19 	add.w	sl, r4, #25
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	6832      	ldr	r2, [r6, #0]
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	dc26      	bgt.n	8005346 <_printf_common+0x96>
 80052f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052fc:	1e13      	subs	r3, r2, #0
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	bf18      	it	ne
 8005302:	2301      	movne	r3, #1
 8005304:	0692      	lsls	r2, r2, #26
 8005306:	d42b      	bmi.n	8005360 <_printf_common+0xb0>
 8005308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800530c:	4649      	mov	r1, r9
 800530e:	4638      	mov	r0, r7
 8005310:	47c0      	blx	r8
 8005312:	3001      	adds	r0, #1
 8005314:	d01e      	beq.n	8005354 <_printf_common+0xa4>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	68e5      	ldr	r5, [r4, #12]
 800531a:	6832      	ldr	r2, [r6, #0]
 800531c:	f003 0306 	and.w	r3, r3, #6
 8005320:	2b04      	cmp	r3, #4
 8005322:	bf08      	it	eq
 8005324:	1aad      	subeq	r5, r5, r2
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	bf0c      	ite	eq
 800532c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005330:	2500      	movne	r5, #0
 8005332:	4293      	cmp	r3, r2
 8005334:	bfc4      	itt	gt
 8005336:	1a9b      	subgt	r3, r3, r2
 8005338:	18ed      	addgt	r5, r5, r3
 800533a:	2600      	movs	r6, #0
 800533c:	341a      	adds	r4, #26
 800533e:	42b5      	cmp	r5, r6
 8005340:	d11a      	bne.n	8005378 <_printf_common+0xc8>
 8005342:	2000      	movs	r0, #0
 8005344:	e008      	b.n	8005358 <_printf_common+0xa8>
 8005346:	2301      	movs	r3, #1
 8005348:	4652      	mov	r2, sl
 800534a:	4649      	mov	r1, r9
 800534c:	4638      	mov	r0, r7
 800534e:	47c0      	blx	r8
 8005350:	3001      	adds	r0, #1
 8005352:	d103      	bne.n	800535c <_printf_common+0xac>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	3501      	adds	r5, #1
 800535e:	e7c6      	b.n	80052ee <_printf_common+0x3e>
 8005360:	18e1      	adds	r1, r4, r3
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	2030      	movs	r0, #48	; 0x30
 8005366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800536a:	4422      	add	r2, r4
 800536c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005374:	3302      	adds	r3, #2
 8005376:	e7c7      	b.n	8005308 <_printf_common+0x58>
 8005378:	2301      	movs	r3, #1
 800537a:	4622      	mov	r2, r4
 800537c:	4649      	mov	r1, r9
 800537e:	4638      	mov	r0, r7
 8005380:	47c0      	blx	r8
 8005382:	3001      	adds	r0, #1
 8005384:	d0e6      	beq.n	8005354 <_printf_common+0xa4>
 8005386:	3601      	adds	r6, #1
 8005388:	e7d9      	b.n	800533e <_printf_common+0x8e>
	...

0800538c <_printf_i>:
 800538c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	4691      	mov	r9, r2
 8005394:	7e27      	ldrb	r7, [r4, #24]
 8005396:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005398:	2f78      	cmp	r7, #120	; 0x78
 800539a:	4680      	mov	r8, r0
 800539c:	469a      	mov	sl, r3
 800539e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a2:	d807      	bhi.n	80053b4 <_printf_i+0x28>
 80053a4:	2f62      	cmp	r7, #98	; 0x62
 80053a6:	d80a      	bhi.n	80053be <_printf_i+0x32>
 80053a8:	2f00      	cmp	r7, #0
 80053aa:	f000 80d8 	beq.w	800555e <_printf_i+0x1d2>
 80053ae:	2f58      	cmp	r7, #88	; 0x58
 80053b0:	f000 80a3 	beq.w	80054fa <_printf_i+0x16e>
 80053b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053bc:	e03a      	b.n	8005434 <_printf_i+0xa8>
 80053be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053c2:	2b15      	cmp	r3, #21
 80053c4:	d8f6      	bhi.n	80053b4 <_printf_i+0x28>
 80053c6:	a001      	add	r0, pc, #4	; (adr r0, 80053cc <_printf_i+0x40>)
 80053c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005439 	.word	0x08005439
 80053d4:	080053b5 	.word	0x080053b5
 80053d8:	080053b5 	.word	0x080053b5
 80053dc:	080053b5 	.word	0x080053b5
 80053e0:	080053b5 	.word	0x080053b5
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080053b5 	.word	0x080053b5
 80053ec:	080053b5 	.word	0x080053b5
 80053f0:	080053b5 	.word	0x080053b5
 80053f4:	080053b5 	.word	0x080053b5
 80053f8:	08005545 	.word	0x08005545
 80053fc:	08005469 	.word	0x08005469
 8005400:	08005527 	.word	0x08005527
 8005404:	080053b5 	.word	0x080053b5
 8005408:	080053b5 	.word	0x080053b5
 800540c:	08005567 	.word	0x08005567
 8005410:	080053b5 	.word	0x080053b5
 8005414:	08005469 	.word	0x08005469
 8005418:	080053b5 	.word	0x080053b5
 800541c:	080053b5 	.word	0x080053b5
 8005420:	0800552f 	.word	0x0800552f
 8005424:	680b      	ldr	r3, [r1, #0]
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	600a      	str	r2, [r1, #0]
 800542c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005434:	2301      	movs	r3, #1
 8005436:	e0a3      	b.n	8005580 <_printf_i+0x1f4>
 8005438:	6825      	ldr	r5, [r4, #0]
 800543a:	6808      	ldr	r0, [r1, #0]
 800543c:	062e      	lsls	r6, r5, #24
 800543e:	f100 0304 	add.w	r3, r0, #4
 8005442:	d50a      	bpl.n	800545a <_printf_i+0xce>
 8005444:	6805      	ldr	r5, [r0, #0]
 8005446:	600b      	str	r3, [r1, #0]
 8005448:	2d00      	cmp	r5, #0
 800544a:	da03      	bge.n	8005454 <_printf_i+0xc8>
 800544c:	232d      	movs	r3, #45	; 0x2d
 800544e:	426d      	negs	r5, r5
 8005450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005454:	485e      	ldr	r0, [pc, #376]	; (80055d0 <_printf_i+0x244>)
 8005456:	230a      	movs	r3, #10
 8005458:	e019      	b.n	800548e <_printf_i+0x102>
 800545a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800545e:	6805      	ldr	r5, [r0, #0]
 8005460:	600b      	str	r3, [r1, #0]
 8005462:	bf18      	it	ne
 8005464:	b22d      	sxthne	r5, r5
 8005466:	e7ef      	b.n	8005448 <_printf_i+0xbc>
 8005468:	680b      	ldr	r3, [r1, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	1d18      	adds	r0, r3, #4
 800546e:	6008      	str	r0, [r1, #0]
 8005470:	0628      	lsls	r0, r5, #24
 8005472:	d501      	bpl.n	8005478 <_printf_i+0xec>
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	e002      	b.n	800547e <_printf_i+0xf2>
 8005478:	0669      	lsls	r1, r5, #25
 800547a:	d5fb      	bpl.n	8005474 <_printf_i+0xe8>
 800547c:	881d      	ldrh	r5, [r3, #0]
 800547e:	4854      	ldr	r0, [pc, #336]	; (80055d0 <_printf_i+0x244>)
 8005480:	2f6f      	cmp	r7, #111	; 0x6f
 8005482:	bf0c      	ite	eq
 8005484:	2308      	moveq	r3, #8
 8005486:	230a      	movne	r3, #10
 8005488:	2100      	movs	r1, #0
 800548a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800548e:	6866      	ldr	r6, [r4, #4]
 8005490:	60a6      	str	r6, [r4, #8]
 8005492:	2e00      	cmp	r6, #0
 8005494:	bfa2      	ittt	ge
 8005496:	6821      	ldrge	r1, [r4, #0]
 8005498:	f021 0104 	bicge.w	r1, r1, #4
 800549c:	6021      	strge	r1, [r4, #0]
 800549e:	b90d      	cbnz	r5, 80054a4 <_printf_i+0x118>
 80054a0:	2e00      	cmp	r6, #0
 80054a2:	d04d      	beq.n	8005540 <_printf_i+0x1b4>
 80054a4:	4616      	mov	r6, r2
 80054a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054aa:	fb03 5711 	mls	r7, r3, r1, r5
 80054ae:	5dc7      	ldrb	r7, [r0, r7]
 80054b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054b4:	462f      	mov	r7, r5
 80054b6:	42bb      	cmp	r3, r7
 80054b8:	460d      	mov	r5, r1
 80054ba:	d9f4      	bls.n	80054a6 <_printf_i+0x11a>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10b      	bne.n	80054d8 <_printf_i+0x14c>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07df      	lsls	r7, r3, #31
 80054c4:	d508      	bpl.n	80054d8 <_printf_i+0x14c>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	bfde      	ittt	le
 80054ce:	2330      	movle	r3, #48	; 0x30
 80054d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80054d8:	1b92      	subs	r2, r2, r6
 80054da:	6122      	str	r2, [r4, #16]
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	464b      	mov	r3, r9
 80054e2:	aa03      	add	r2, sp, #12
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fee2 	bl	80052b0 <_printf_common>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d14c      	bne.n	800558a <_printf_i+0x1fe>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f4:	b004      	add	sp, #16
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	4835      	ldr	r0, [pc, #212]	; (80055d0 <_printf_i+0x244>)
 80054fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	680e      	ldr	r6, [r1, #0]
 8005504:	061f      	lsls	r7, r3, #24
 8005506:	f856 5b04 	ldr.w	r5, [r6], #4
 800550a:	600e      	str	r6, [r1, #0]
 800550c:	d514      	bpl.n	8005538 <_printf_i+0x1ac>
 800550e:	07d9      	lsls	r1, r3, #31
 8005510:	bf44      	itt	mi
 8005512:	f043 0320 	orrmi.w	r3, r3, #32
 8005516:	6023      	strmi	r3, [r4, #0]
 8005518:	b91d      	cbnz	r5, 8005522 <_printf_i+0x196>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f023 0320 	bic.w	r3, r3, #32
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	2310      	movs	r3, #16
 8005524:	e7b0      	b.n	8005488 <_printf_i+0xfc>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f043 0320 	orr.w	r3, r3, #32
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	2378      	movs	r3, #120	; 0x78
 8005530:	4828      	ldr	r0, [pc, #160]	; (80055d4 <_printf_i+0x248>)
 8005532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005536:	e7e3      	b.n	8005500 <_printf_i+0x174>
 8005538:	065e      	lsls	r6, r3, #25
 800553a:	bf48      	it	mi
 800553c:	b2ad      	uxthmi	r5, r5
 800553e:	e7e6      	b.n	800550e <_printf_i+0x182>
 8005540:	4616      	mov	r6, r2
 8005542:	e7bb      	b.n	80054bc <_printf_i+0x130>
 8005544:	680b      	ldr	r3, [r1, #0]
 8005546:	6826      	ldr	r6, [r4, #0]
 8005548:	6960      	ldr	r0, [r4, #20]
 800554a:	1d1d      	adds	r5, r3, #4
 800554c:	600d      	str	r5, [r1, #0]
 800554e:	0635      	lsls	r5, r6, #24
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	d501      	bpl.n	8005558 <_printf_i+0x1cc>
 8005554:	6018      	str	r0, [r3, #0]
 8005556:	e002      	b.n	800555e <_printf_i+0x1d2>
 8005558:	0671      	lsls	r1, r6, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0x1c8>
 800555c:	8018      	strh	r0, [r3, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	4616      	mov	r6, r2
 8005564:	e7ba      	b.n	80054dc <_printf_i+0x150>
 8005566:	680b      	ldr	r3, [r1, #0]
 8005568:	1d1a      	adds	r2, r3, #4
 800556a:	600a      	str	r2, [r1, #0]
 800556c:	681e      	ldr	r6, [r3, #0]
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	2100      	movs	r1, #0
 8005572:	4630      	mov	r0, r6
 8005574:	f7fa fe2c 	bl	80001d0 <memchr>
 8005578:	b108      	cbz	r0, 800557e <_printf_i+0x1f2>
 800557a:	1b80      	subs	r0, r0, r6
 800557c:	6060      	str	r0, [r4, #4]
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	2300      	movs	r3, #0
 8005584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005588:	e7a8      	b.n	80054dc <_printf_i+0x150>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	4632      	mov	r2, r6
 800558e:	4649      	mov	r1, r9
 8005590:	4640      	mov	r0, r8
 8005592:	47d0      	blx	sl
 8005594:	3001      	adds	r0, #1
 8005596:	d0ab      	beq.n	80054f0 <_printf_i+0x164>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	d413      	bmi.n	80055c6 <_printf_i+0x23a>
 800559e:	68e0      	ldr	r0, [r4, #12]
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	4298      	cmp	r0, r3
 80055a4:	bfb8      	it	lt
 80055a6:	4618      	movlt	r0, r3
 80055a8:	e7a4      	b.n	80054f4 <_printf_i+0x168>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4632      	mov	r2, r6
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	47d0      	blx	sl
 80055b4:	3001      	adds	r0, #1
 80055b6:	d09b      	beq.n	80054f0 <_printf_i+0x164>
 80055b8:	3501      	adds	r5, #1
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	9903      	ldr	r1, [sp, #12]
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dcf2      	bgt.n	80055aa <_printf_i+0x21e>
 80055c4:	e7eb      	b.n	800559e <_printf_i+0x212>
 80055c6:	2500      	movs	r5, #0
 80055c8:	f104 0619 	add.w	r6, r4, #25
 80055cc:	e7f5      	b.n	80055ba <_printf_i+0x22e>
 80055ce:	bf00      	nop
 80055d0:	08006159 	.word	0x08006159
 80055d4:	0800616a 	.word	0x0800616a

080055d8 <__swbuf_r>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	460e      	mov	r6, r1
 80055dc:	4614      	mov	r4, r2
 80055de:	4605      	mov	r5, r0
 80055e0:	b118      	cbz	r0, 80055ea <__swbuf_r+0x12>
 80055e2:	6983      	ldr	r3, [r0, #24]
 80055e4:	b90b      	cbnz	r3, 80055ea <__swbuf_r+0x12>
 80055e6:	f000 f9d9 	bl	800599c <__sinit>
 80055ea:	4b21      	ldr	r3, [pc, #132]	; (8005670 <__swbuf_r+0x98>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d12b      	bne.n	8005648 <__swbuf_r+0x70>
 80055f0:	686c      	ldr	r4, [r5, #4]
 80055f2:	69a3      	ldr	r3, [r4, #24]
 80055f4:	60a3      	str	r3, [r4, #8]
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	071a      	lsls	r2, r3, #28
 80055fa:	d52f      	bpl.n	800565c <__swbuf_r+0x84>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	b36b      	cbz	r3, 800565c <__swbuf_r+0x84>
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	1ac0      	subs	r0, r0, r3
 8005606:	6963      	ldr	r3, [r4, #20]
 8005608:	b2f6      	uxtb	r6, r6
 800560a:	4283      	cmp	r3, r0
 800560c:	4637      	mov	r7, r6
 800560e:	dc04      	bgt.n	800561a <__swbuf_r+0x42>
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f92e 	bl	8005874 <_fflush_r>
 8005618:	bb30      	cbnz	r0, 8005668 <__swbuf_r+0x90>
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	3b01      	subs	r3, #1
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	701e      	strb	r6, [r3, #0]
 8005628:	6963      	ldr	r3, [r4, #20]
 800562a:	3001      	adds	r0, #1
 800562c:	4283      	cmp	r3, r0
 800562e:	d004      	beq.n	800563a <__swbuf_r+0x62>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	07db      	lsls	r3, r3, #31
 8005634:	d506      	bpl.n	8005644 <__swbuf_r+0x6c>
 8005636:	2e0a      	cmp	r6, #10
 8005638:	d104      	bne.n	8005644 <__swbuf_r+0x6c>
 800563a:	4621      	mov	r1, r4
 800563c:	4628      	mov	r0, r5
 800563e:	f000 f919 	bl	8005874 <_fflush_r>
 8005642:	b988      	cbnz	r0, 8005668 <__swbuf_r+0x90>
 8005644:	4638      	mov	r0, r7
 8005646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <__swbuf_r+0x9c>)
 800564a:	429c      	cmp	r4, r3
 800564c:	d101      	bne.n	8005652 <__swbuf_r+0x7a>
 800564e:	68ac      	ldr	r4, [r5, #8]
 8005650:	e7cf      	b.n	80055f2 <__swbuf_r+0x1a>
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <__swbuf_r+0xa0>)
 8005654:	429c      	cmp	r4, r3
 8005656:	bf08      	it	eq
 8005658:	68ec      	ldreq	r4, [r5, #12]
 800565a:	e7ca      	b.n	80055f2 <__swbuf_r+0x1a>
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f80c 	bl	800567c <__swsetup_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	d0cb      	beq.n	8005600 <__swbuf_r+0x28>
 8005668:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800566c:	e7ea      	b.n	8005644 <__swbuf_r+0x6c>
 800566e:	bf00      	nop
 8005670:	0800619c 	.word	0x0800619c
 8005674:	080061bc 	.word	0x080061bc
 8005678:	0800617c 	.word	0x0800617c

0800567c <__swsetup_r>:
 800567c:	4b32      	ldr	r3, [pc, #200]	; (8005748 <__swsetup_r+0xcc>)
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	4606      	mov	r6, r0
 8005684:	460c      	mov	r4, r1
 8005686:	b125      	cbz	r5, 8005692 <__swsetup_r+0x16>
 8005688:	69ab      	ldr	r3, [r5, #24]
 800568a:	b913      	cbnz	r3, 8005692 <__swsetup_r+0x16>
 800568c:	4628      	mov	r0, r5
 800568e:	f000 f985 	bl	800599c <__sinit>
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <__swsetup_r+0xd0>)
 8005694:	429c      	cmp	r4, r3
 8005696:	d10f      	bne.n	80056b8 <__swsetup_r+0x3c>
 8005698:	686c      	ldr	r4, [r5, #4]
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a0:	0719      	lsls	r1, r3, #28
 80056a2:	d42c      	bmi.n	80056fe <__swsetup_r+0x82>
 80056a4:	06dd      	lsls	r5, r3, #27
 80056a6:	d411      	bmi.n	80056cc <__swsetup_r+0x50>
 80056a8:	2309      	movs	r3, #9
 80056aa:	6033      	str	r3, [r6, #0]
 80056ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b6:	e03e      	b.n	8005736 <__swsetup_r+0xba>
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <__swsetup_r+0xd4>)
 80056ba:	429c      	cmp	r4, r3
 80056bc:	d101      	bne.n	80056c2 <__swsetup_r+0x46>
 80056be:	68ac      	ldr	r4, [r5, #8]
 80056c0:	e7eb      	b.n	800569a <__swsetup_r+0x1e>
 80056c2:	4b24      	ldr	r3, [pc, #144]	; (8005754 <__swsetup_r+0xd8>)
 80056c4:	429c      	cmp	r4, r3
 80056c6:	bf08      	it	eq
 80056c8:	68ec      	ldreq	r4, [r5, #12]
 80056ca:	e7e6      	b.n	800569a <__swsetup_r+0x1e>
 80056cc:	0758      	lsls	r0, r3, #29
 80056ce:	d512      	bpl.n	80056f6 <__swsetup_r+0x7a>
 80056d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d2:	b141      	cbz	r1, 80056e6 <__swsetup_r+0x6a>
 80056d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d8:	4299      	cmp	r1, r3
 80056da:	d002      	beq.n	80056e2 <__swsetup_r+0x66>
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 fa61 	bl	8005ba4 <_free_r>
 80056e2:	2300      	movs	r3, #0
 80056e4:	6363      	str	r3, [r4, #52]	; 0x34
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	2300      	movs	r3, #0
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	81a3      	strh	r3, [r4, #12]
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	b94b      	cbnz	r3, 8005716 <__swsetup_r+0x9a>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570c:	d003      	beq.n	8005716 <__swsetup_r+0x9a>
 800570e:	4621      	mov	r1, r4
 8005710:	4630      	mov	r0, r6
 8005712:	f000 fa07 	bl	8005b24 <__smakebuf_r>
 8005716:	89a0      	ldrh	r0, [r4, #12]
 8005718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800571c:	f010 0301 	ands.w	r3, r0, #1
 8005720:	d00a      	beq.n	8005738 <__swsetup_r+0xbc>
 8005722:	2300      	movs	r3, #0
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	6963      	ldr	r3, [r4, #20]
 8005728:	425b      	negs	r3, r3
 800572a:	61a3      	str	r3, [r4, #24]
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	b943      	cbnz	r3, 8005742 <__swsetup_r+0xc6>
 8005730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005734:	d1ba      	bne.n	80056ac <__swsetup_r+0x30>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	0781      	lsls	r1, r0, #30
 800573a:	bf58      	it	pl
 800573c:	6963      	ldrpl	r3, [r4, #20]
 800573e:	60a3      	str	r3, [r4, #8]
 8005740:	e7f4      	b.n	800572c <__swsetup_r+0xb0>
 8005742:	2000      	movs	r0, #0
 8005744:	e7f7      	b.n	8005736 <__swsetup_r+0xba>
 8005746:	bf00      	nop
 8005748:	2000000c 	.word	0x2000000c
 800574c:	0800619c 	.word	0x0800619c
 8005750:	080061bc 	.word	0x080061bc
 8005754:	0800617c 	.word	0x0800617c

08005758 <abort>:
 8005758:	b508      	push	{r3, lr}
 800575a:	2006      	movs	r0, #6
 800575c:	f000 fb04 	bl	8005d68 <raise>
 8005760:	2001      	movs	r0, #1
 8005762:	f7fb fb5d 	bl	8000e20 <_exit>
	...

08005768 <__sflush_r>:
 8005768:	898a      	ldrh	r2, [r1, #12]
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	4605      	mov	r5, r0
 8005770:	0710      	lsls	r0, r2, #28
 8005772:	460c      	mov	r4, r1
 8005774:	d458      	bmi.n	8005828 <__sflush_r+0xc0>
 8005776:	684b      	ldr	r3, [r1, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	dc05      	bgt.n	8005788 <__sflush_r+0x20>
 800577c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	dc02      	bgt.n	8005788 <__sflush_r+0x20>
 8005782:	2000      	movs	r0, #0
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800578a:	2e00      	cmp	r6, #0
 800578c:	d0f9      	beq.n	8005782 <__sflush_r+0x1a>
 800578e:	2300      	movs	r3, #0
 8005790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005794:	682f      	ldr	r7, [r5, #0]
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	d032      	beq.n	8005800 <__sflush_r+0x98>
 800579a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	075a      	lsls	r2, r3, #29
 80057a0:	d505      	bpl.n	80057ae <__sflush_r+0x46>
 80057a2:	6863      	ldr	r3, [r4, #4]
 80057a4:	1ac0      	subs	r0, r0, r3
 80057a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057a8:	b10b      	cbz	r3, 80057ae <__sflush_r+0x46>
 80057aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ac:	1ac0      	subs	r0, r0, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	4602      	mov	r2, r0
 80057b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057b4:	6a21      	ldr	r1, [r4, #32]
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b0      	blx	r6
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	d106      	bne.n	80057ce <__sflush_r+0x66>
 80057c0:	6829      	ldr	r1, [r5, #0]
 80057c2:	291d      	cmp	r1, #29
 80057c4:	d82c      	bhi.n	8005820 <__sflush_r+0xb8>
 80057c6:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <__sflush_r+0x108>)
 80057c8:	40ca      	lsrs	r2, r1
 80057ca:	07d6      	lsls	r6, r2, #31
 80057cc:	d528      	bpl.n	8005820 <__sflush_r+0xb8>
 80057ce:	2200      	movs	r2, #0
 80057d0:	6062      	str	r2, [r4, #4]
 80057d2:	04d9      	lsls	r1, r3, #19
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	d504      	bpl.n	80057e4 <__sflush_r+0x7c>
 80057da:	1c42      	adds	r2, r0, #1
 80057dc:	d101      	bne.n	80057e2 <__sflush_r+0x7a>
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	b903      	cbnz	r3, 80057e4 <__sflush_r+0x7c>
 80057e2:	6560      	str	r0, [r4, #84]	; 0x54
 80057e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057e6:	602f      	str	r7, [r5, #0]
 80057e8:	2900      	cmp	r1, #0
 80057ea:	d0ca      	beq.n	8005782 <__sflush_r+0x1a>
 80057ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f0:	4299      	cmp	r1, r3
 80057f2:	d002      	beq.n	80057fa <__sflush_r+0x92>
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f9d5 	bl	8005ba4 <_free_r>
 80057fa:	2000      	movs	r0, #0
 80057fc:	6360      	str	r0, [r4, #52]	; 0x34
 80057fe:	e7c1      	b.n	8005784 <__sflush_r+0x1c>
 8005800:	6a21      	ldr	r1, [r4, #32]
 8005802:	2301      	movs	r3, #1
 8005804:	4628      	mov	r0, r5
 8005806:	47b0      	blx	r6
 8005808:	1c41      	adds	r1, r0, #1
 800580a:	d1c7      	bne.n	800579c <__sflush_r+0x34>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0c4      	beq.n	800579c <__sflush_r+0x34>
 8005812:	2b1d      	cmp	r3, #29
 8005814:	d001      	beq.n	800581a <__sflush_r+0xb2>
 8005816:	2b16      	cmp	r3, #22
 8005818:	d101      	bne.n	800581e <__sflush_r+0xb6>
 800581a:	602f      	str	r7, [r5, #0]
 800581c:	e7b1      	b.n	8005782 <__sflush_r+0x1a>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	e7ad      	b.n	8005784 <__sflush_r+0x1c>
 8005828:	690f      	ldr	r7, [r1, #16]
 800582a:	2f00      	cmp	r7, #0
 800582c:	d0a9      	beq.n	8005782 <__sflush_r+0x1a>
 800582e:	0793      	lsls	r3, r2, #30
 8005830:	680e      	ldr	r6, [r1, #0]
 8005832:	bf08      	it	eq
 8005834:	694b      	ldreq	r3, [r1, #20]
 8005836:	600f      	str	r7, [r1, #0]
 8005838:	bf18      	it	ne
 800583a:	2300      	movne	r3, #0
 800583c:	eba6 0807 	sub.w	r8, r6, r7
 8005840:	608b      	str	r3, [r1, #8]
 8005842:	f1b8 0f00 	cmp.w	r8, #0
 8005846:	dd9c      	ble.n	8005782 <__sflush_r+0x1a>
 8005848:	6a21      	ldr	r1, [r4, #32]
 800584a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800584c:	4643      	mov	r3, r8
 800584e:	463a      	mov	r2, r7
 8005850:	4628      	mov	r0, r5
 8005852:	47b0      	blx	r6
 8005854:	2800      	cmp	r0, #0
 8005856:	dc06      	bgt.n	8005866 <__sflush_r+0xfe>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005864:	e78e      	b.n	8005784 <__sflush_r+0x1c>
 8005866:	4407      	add	r7, r0
 8005868:	eba8 0800 	sub.w	r8, r8, r0
 800586c:	e7e9      	b.n	8005842 <__sflush_r+0xda>
 800586e:	bf00      	nop
 8005870:	20400001 	.word	0x20400001

08005874 <_fflush_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	4605      	mov	r5, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b913      	cbnz	r3, 8005884 <_fflush_r+0x10>
 800587e:	2500      	movs	r5, #0
 8005880:	4628      	mov	r0, r5
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	b118      	cbz	r0, 800588e <_fflush_r+0x1a>
 8005886:	6983      	ldr	r3, [r0, #24]
 8005888:	b90b      	cbnz	r3, 800588e <_fflush_r+0x1a>
 800588a:	f000 f887 	bl	800599c <__sinit>
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <_fflush_r+0x6c>)
 8005890:	429c      	cmp	r4, r3
 8005892:	d11b      	bne.n	80058cc <_fflush_r+0x58>
 8005894:	686c      	ldr	r4, [r5, #4]
 8005896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ef      	beq.n	800587e <_fflush_r+0xa>
 800589e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058a0:	07d0      	lsls	r0, r2, #31
 80058a2:	d404      	bmi.n	80058ae <_fflush_r+0x3a>
 80058a4:	0599      	lsls	r1, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_fflush_r+0x3a>
 80058a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058aa:	f000 f915 	bl	8005ad8 <__retarget_lock_acquire_recursive>
 80058ae:	4628      	mov	r0, r5
 80058b0:	4621      	mov	r1, r4
 80058b2:	f7ff ff59 	bl	8005768 <__sflush_r>
 80058b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b8:	07da      	lsls	r2, r3, #31
 80058ba:	4605      	mov	r5, r0
 80058bc:	d4e0      	bmi.n	8005880 <_fflush_r+0xc>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	059b      	lsls	r3, r3, #22
 80058c2:	d4dd      	bmi.n	8005880 <_fflush_r+0xc>
 80058c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c6:	f000 f908 	bl	8005ada <__retarget_lock_release_recursive>
 80058ca:	e7d9      	b.n	8005880 <_fflush_r+0xc>
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <_fflush_r+0x70>)
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d101      	bne.n	80058d6 <_fflush_r+0x62>
 80058d2:	68ac      	ldr	r4, [r5, #8]
 80058d4:	e7df      	b.n	8005896 <_fflush_r+0x22>
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <_fflush_r+0x74>)
 80058d8:	429c      	cmp	r4, r3
 80058da:	bf08      	it	eq
 80058dc:	68ec      	ldreq	r4, [r5, #12]
 80058de:	e7da      	b.n	8005896 <_fflush_r+0x22>
 80058e0:	0800619c 	.word	0x0800619c
 80058e4:	080061bc 	.word	0x080061bc
 80058e8:	0800617c 	.word	0x0800617c

080058ec <std>:
 80058ec:	2300      	movs	r3, #0
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	e9c0 3300 	strd	r3, r3, [r0]
 80058f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058fa:	6083      	str	r3, [r0, #8]
 80058fc:	8181      	strh	r1, [r0, #12]
 80058fe:	6643      	str	r3, [r0, #100]	; 0x64
 8005900:	81c2      	strh	r2, [r0, #14]
 8005902:	6183      	str	r3, [r0, #24]
 8005904:	4619      	mov	r1, r3
 8005906:	2208      	movs	r2, #8
 8005908:	305c      	adds	r0, #92	; 0x5c
 800590a:	f7ff fb6f 	bl	8004fec <memset>
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <std+0x38>)
 8005910:	6263      	str	r3, [r4, #36]	; 0x24
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <std+0x3c>)
 8005914:	62a3      	str	r3, [r4, #40]	; 0x28
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <std+0x40>)
 8005918:	62e3      	str	r3, [r4, #44]	; 0x2c
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <std+0x44>)
 800591c:	6224      	str	r4, [r4, #32]
 800591e:	6323      	str	r3, [r4, #48]	; 0x30
 8005920:	bd10      	pop	{r4, pc}
 8005922:	bf00      	nop
 8005924:	08005da1 	.word	0x08005da1
 8005928:	08005dc3 	.word	0x08005dc3
 800592c:	08005dfb 	.word	0x08005dfb
 8005930:	08005e1f 	.word	0x08005e1f

08005934 <_cleanup_r>:
 8005934:	4901      	ldr	r1, [pc, #4]	; (800593c <_cleanup_r+0x8>)
 8005936:	f000 b8af 	b.w	8005a98 <_fwalk_reent>
 800593a:	bf00      	nop
 800593c:	08005875 	.word	0x08005875

08005940 <__sfmoreglue>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	1e4a      	subs	r2, r1, #1
 8005944:	2568      	movs	r5, #104	; 0x68
 8005946:	4355      	muls	r5, r2
 8005948:	460e      	mov	r6, r1
 800594a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800594e:	f000 f979 	bl	8005c44 <_malloc_r>
 8005952:	4604      	mov	r4, r0
 8005954:	b140      	cbz	r0, 8005968 <__sfmoreglue+0x28>
 8005956:	2100      	movs	r1, #0
 8005958:	e9c0 1600 	strd	r1, r6, [r0]
 800595c:	300c      	adds	r0, #12
 800595e:	60a0      	str	r0, [r4, #8]
 8005960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005964:	f7ff fb42 	bl	8004fec <memset>
 8005968:	4620      	mov	r0, r4
 800596a:	bd70      	pop	{r4, r5, r6, pc}

0800596c <__sfp_lock_acquire>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__sfp_lock_acquire+0x8>)
 800596e:	f000 b8b3 	b.w	8005ad8 <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	200061ac 	.word	0x200061ac

08005978 <__sfp_lock_release>:
 8005978:	4801      	ldr	r0, [pc, #4]	; (8005980 <__sfp_lock_release+0x8>)
 800597a:	f000 b8ae 	b.w	8005ada <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	200061ac 	.word	0x200061ac

08005984 <__sinit_lock_acquire>:
 8005984:	4801      	ldr	r0, [pc, #4]	; (800598c <__sinit_lock_acquire+0x8>)
 8005986:	f000 b8a7 	b.w	8005ad8 <__retarget_lock_acquire_recursive>
 800598a:	bf00      	nop
 800598c:	200061a7 	.word	0x200061a7

08005990 <__sinit_lock_release>:
 8005990:	4801      	ldr	r0, [pc, #4]	; (8005998 <__sinit_lock_release+0x8>)
 8005992:	f000 b8a2 	b.w	8005ada <__retarget_lock_release_recursive>
 8005996:	bf00      	nop
 8005998:	200061a7 	.word	0x200061a7

0800599c <__sinit>:
 800599c:	b510      	push	{r4, lr}
 800599e:	4604      	mov	r4, r0
 80059a0:	f7ff fff0 	bl	8005984 <__sinit_lock_acquire>
 80059a4:	69a3      	ldr	r3, [r4, #24]
 80059a6:	b11b      	cbz	r3, 80059b0 <__sinit+0x14>
 80059a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ac:	f7ff bff0 	b.w	8005990 <__sinit_lock_release>
 80059b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059b4:	6523      	str	r3, [r4, #80]	; 0x50
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <__sinit+0x68>)
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <__sinit+0x6c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80059be:	42a3      	cmp	r3, r4
 80059c0:	bf04      	itt	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	61a3      	streq	r3, [r4, #24]
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f820 	bl	8005a0c <__sfp>
 80059cc:	6060      	str	r0, [r4, #4]
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 f81c 	bl	8005a0c <__sfp>
 80059d4:	60a0      	str	r0, [r4, #8]
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 f818 	bl	8005a0c <__sfp>
 80059dc:	2200      	movs	r2, #0
 80059de:	60e0      	str	r0, [r4, #12]
 80059e0:	2104      	movs	r1, #4
 80059e2:	6860      	ldr	r0, [r4, #4]
 80059e4:	f7ff ff82 	bl	80058ec <std>
 80059e8:	68a0      	ldr	r0, [r4, #8]
 80059ea:	2201      	movs	r2, #1
 80059ec:	2109      	movs	r1, #9
 80059ee:	f7ff ff7d 	bl	80058ec <std>
 80059f2:	68e0      	ldr	r0, [r4, #12]
 80059f4:	2202      	movs	r2, #2
 80059f6:	2112      	movs	r1, #18
 80059f8:	f7ff ff78 	bl	80058ec <std>
 80059fc:	2301      	movs	r3, #1
 80059fe:	61a3      	str	r3, [r4, #24]
 8005a00:	e7d2      	b.n	80059a8 <__sinit+0xc>
 8005a02:	bf00      	nop
 8005a04:	08006144 	.word	0x08006144
 8005a08:	08005935 	.word	0x08005935

08005a0c <__sfp>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	4607      	mov	r7, r0
 8005a10:	f7ff ffac 	bl	800596c <__sfp_lock_acquire>
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <__sfp+0x84>)
 8005a16:	681e      	ldr	r6, [r3, #0]
 8005a18:	69b3      	ldr	r3, [r6, #24]
 8005a1a:	b913      	cbnz	r3, 8005a22 <__sfp+0x16>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff ffbd 	bl	800599c <__sinit>
 8005a22:	3648      	adds	r6, #72	; 0x48
 8005a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	d503      	bpl.n	8005a34 <__sfp+0x28>
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	b30b      	cbz	r3, 8005a74 <__sfp+0x68>
 8005a30:	6836      	ldr	r6, [r6, #0]
 8005a32:	e7f7      	b.n	8005a24 <__sfp+0x18>
 8005a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a38:	b9d5      	cbnz	r5, 8005a70 <__sfp+0x64>
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <__sfp+0x88>)
 8005a3c:	60e3      	str	r3, [r4, #12]
 8005a3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a42:	6665      	str	r5, [r4, #100]	; 0x64
 8005a44:	f000 f847 	bl	8005ad6 <__retarget_lock_init_recursive>
 8005a48:	f7ff ff96 	bl	8005978 <__sfp_lock_release>
 8005a4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a54:	6025      	str	r5, [r4, #0]
 8005a56:	61a5      	str	r5, [r4, #24]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a60:	f7ff fac4 	bl	8004fec <memset>
 8005a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a70:	3468      	adds	r4, #104	; 0x68
 8005a72:	e7d9      	b.n	8005a28 <__sfp+0x1c>
 8005a74:	2104      	movs	r1, #4
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7ff ff62 	bl	8005940 <__sfmoreglue>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	6030      	str	r0, [r6, #0]
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d1d5      	bne.n	8005a30 <__sfp+0x24>
 8005a84:	f7ff ff78 	bl	8005978 <__sfp_lock_release>
 8005a88:	230c      	movs	r3, #12
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	e7ee      	b.n	8005a6c <__sfp+0x60>
 8005a8e:	bf00      	nop
 8005a90:	08006144 	.word	0x08006144
 8005a94:	ffff0001 	.word	0xffff0001

08005a98 <_fwalk_reent>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	4688      	mov	r8, r1
 8005aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aa4:	2700      	movs	r7, #0
 8005aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8005aae:	d505      	bpl.n	8005abc <_fwalk_reent+0x24>
 8005ab0:	6824      	ldr	r4, [r4, #0]
 8005ab2:	2c00      	cmp	r4, #0
 8005ab4:	d1f7      	bne.n	8005aa6 <_fwalk_reent+0xe>
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abc:	89ab      	ldrh	r3, [r5, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d907      	bls.n	8005ad2 <_fwalk_reent+0x3a>
 8005ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	d003      	beq.n	8005ad2 <_fwalk_reent+0x3a>
 8005aca:	4629      	mov	r1, r5
 8005acc:	4630      	mov	r0, r6
 8005ace:	47c0      	blx	r8
 8005ad0:	4307      	orrs	r7, r0
 8005ad2:	3568      	adds	r5, #104	; 0x68
 8005ad4:	e7e9      	b.n	8005aaa <_fwalk_reent+0x12>

08005ad6 <__retarget_lock_init_recursive>:
 8005ad6:	4770      	bx	lr

08005ad8 <__retarget_lock_acquire_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_release_recursive>:
 8005ada:	4770      	bx	lr

08005adc <__swhatbuf_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	b096      	sub	sp, #88	; 0x58
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	da07      	bge.n	8005afe <__swhatbuf_r+0x22>
 8005aee:	2300      	movs	r3, #0
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	89b3      	ldrh	r3, [r6, #12]
 8005af4:	061a      	lsls	r2, r3, #24
 8005af6:	d410      	bmi.n	8005b1a <__swhatbuf_r+0x3e>
 8005af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afc:	e00e      	b.n	8005b1c <__swhatbuf_r+0x40>
 8005afe:	466a      	mov	r2, sp
 8005b00:	f000 f9b4 	bl	8005e6c <_fstat_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dbf2      	blt.n	8005aee <__swhatbuf_r+0x12>
 8005b08:	9a01      	ldr	r2, [sp, #4]
 8005b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b12:	425a      	negs	r2, r3
 8005b14:	415a      	adcs	r2, r3
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	e7ee      	b.n	8005af8 <__swhatbuf_r+0x1c>
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	b016      	add	sp, #88	; 0x58
 8005b22:	bd70      	pop	{r4, r5, r6, pc}

08005b24 <__smakebuf_r>:
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b28:	079d      	lsls	r5, r3, #30
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	d507      	bpl.n	8005b40 <__smakebuf_r+0x1c>
 8005b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	6163      	str	r3, [r4, #20]
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	ab01      	add	r3, sp, #4
 8005b42:	466a      	mov	r2, sp
 8005b44:	f7ff ffca 	bl	8005adc <__swhatbuf_r>
 8005b48:	9900      	ldr	r1, [sp, #0]
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f879 	bl	8005c44 <_malloc_r>
 8005b52:	b948      	cbnz	r0, 8005b68 <__smakebuf_r+0x44>
 8005b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b58:	059a      	lsls	r2, r3, #22
 8005b5a:	d4ef      	bmi.n	8005b3c <__smakebuf_r+0x18>
 8005b5c:	f023 0303 	bic.w	r3, r3, #3
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	e7e3      	b.n	8005b30 <__smakebuf_r+0xc>
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <__smakebuf_r+0x7c>)
 8005b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	6020      	str	r0, [r4, #0]
 8005b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	6163      	str	r3, [r4, #20]
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	6120      	str	r0, [r4, #16]
 8005b7e:	b15b      	cbz	r3, 8005b98 <__smakebuf_r+0x74>
 8005b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 f983 	bl	8005e90 <_isatty_r>
 8005b8a:	b128      	cbz	r0, 8005b98 <__smakebuf_r+0x74>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	89a0      	ldrh	r0, [r4, #12]
 8005b9a:	4305      	orrs	r5, r0
 8005b9c:	81a5      	strh	r5, [r4, #12]
 8005b9e:	e7cd      	b.n	8005b3c <__smakebuf_r+0x18>
 8005ba0:	08005935 	.word	0x08005935

08005ba4 <_free_r>:
 8005ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d048      	beq.n	8005c3c <_free_r+0x98>
 8005baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bae:	9001      	str	r0, [sp, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bb6:	bfb8      	it	lt
 8005bb8:	18e4      	addlt	r4, r4, r3
 8005bba:	f000 f98b 	bl	8005ed4 <__malloc_lock>
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <_free_r+0x9c>)
 8005bc0:	9801      	ldr	r0, [sp, #4]
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	b933      	cbnz	r3, 8005bd6 <_free_r+0x32>
 8005bc8:	6063      	str	r3, [r4, #4]
 8005bca:	6014      	str	r4, [r2, #0]
 8005bcc:	b003      	add	sp, #12
 8005bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd2:	f000 b985 	b.w	8005ee0 <__malloc_unlock>
 8005bd6:	42a3      	cmp	r3, r4
 8005bd8:	d90b      	bls.n	8005bf2 <_free_r+0x4e>
 8005bda:	6821      	ldr	r1, [r4, #0]
 8005bdc:	1862      	adds	r2, r4, r1
 8005bde:	4293      	cmp	r3, r2
 8005be0:	bf04      	itt	eq
 8005be2:	681a      	ldreq	r2, [r3, #0]
 8005be4:	685b      	ldreq	r3, [r3, #4]
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	bf04      	itt	eq
 8005bea:	1852      	addeq	r2, r2, r1
 8005bec:	6022      	streq	r2, [r4, #0]
 8005bee:	602c      	str	r4, [r5, #0]
 8005bf0:	e7ec      	b.n	8005bcc <_free_r+0x28>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x58>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x4e>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1855      	adds	r5, r2, r1
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x78>
 8005c04:	6824      	ldr	r4, [r4, #0]
 8005c06:	4421      	add	r1, r4
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1dd      	bne.n	8005bcc <_free_r+0x28>
 8005c10:	681c      	ldr	r4, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	4421      	add	r1, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	e7d7      	b.n	8005bcc <_free_r+0x28>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x80>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	e7d3      	b.n	8005bcc <_free_r+0x28>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1949      	addeq	r1, r1, r5
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7c7      	b.n	8005bcc <_free_r+0x28>
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bd30      	pop	{r4, r5, pc}
 8005c40:	200060a0 	.word	0x200060a0

08005c44 <_malloc_r>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	1ccd      	adds	r5, r1, #3
 8005c48:	f025 0503 	bic.w	r5, r5, #3
 8005c4c:	3508      	adds	r5, #8
 8005c4e:	2d0c      	cmp	r5, #12
 8005c50:	bf38      	it	cc
 8005c52:	250c      	movcc	r5, #12
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	4606      	mov	r6, r0
 8005c58:	db01      	blt.n	8005c5e <_malloc_r+0x1a>
 8005c5a:	42a9      	cmp	r1, r5
 8005c5c:	d903      	bls.n	8005c66 <_malloc_r+0x22>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	2000      	movs	r0, #0
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c66:	f000 f935 	bl	8005ed4 <__malloc_lock>
 8005c6a:	4921      	ldr	r1, [pc, #132]	; (8005cf0 <_malloc_r+0xac>)
 8005c6c:	680a      	ldr	r2, [r1, #0]
 8005c6e:	4614      	mov	r4, r2
 8005c70:	b99c      	cbnz	r4, 8005c9a <_malloc_r+0x56>
 8005c72:	4f20      	ldr	r7, [pc, #128]	; (8005cf4 <_malloc_r+0xb0>)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	b923      	cbnz	r3, 8005c82 <_malloc_r+0x3e>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f000 f83c 	bl	8005cf8 <_sbrk_r>
 8005c80:	6038      	str	r0, [r7, #0]
 8005c82:	4629      	mov	r1, r5
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 f837 	bl	8005cf8 <_sbrk_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d123      	bne.n	8005cd6 <_malloc_r+0x92>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	4630      	mov	r0, r6
 8005c94:	f000 f924 	bl	8005ee0 <__malloc_unlock>
 8005c98:	e7e3      	b.n	8005c62 <_malloc_r+0x1e>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	1b5b      	subs	r3, r3, r5
 8005c9e:	d417      	bmi.n	8005cd0 <_malloc_r+0x8c>
 8005ca0:	2b0b      	cmp	r3, #11
 8005ca2:	d903      	bls.n	8005cac <_malloc_r+0x68>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	441c      	add	r4, r3
 8005ca8:	6025      	str	r5, [r4, #0]
 8005caa:	e004      	b.n	8005cb6 <_malloc_r+0x72>
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	42a2      	cmp	r2, r4
 8005cb0:	bf0c      	ite	eq
 8005cb2:	600b      	streq	r3, [r1, #0]
 8005cb4:	6053      	strne	r3, [r2, #4]
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 f912 	bl	8005ee0 <__malloc_unlock>
 8005cbc:	f104 000b 	add.w	r0, r4, #11
 8005cc0:	1d23      	adds	r3, r4, #4
 8005cc2:	f020 0007 	bic.w	r0, r0, #7
 8005cc6:	1ac2      	subs	r2, r0, r3
 8005cc8:	d0cc      	beq.n	8005c64 <_malloc_r+0x20>
 8005cca:	1a1b      	subs	r3, r3, r0
 8005ccc:	50a3      	str	r3, [r4, r2]
 8005cce:	e7c9      	b.n	8005c64 <_malloc_r+0x20>
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	6864      	ldr	r4, [r4, #4]
 8005cd4:	e7cc      	b.n	8005c70 <_malloc_r+0x2c>
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d0e3      	beq.n	8005ca8 <_malloc_r+0x64>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f000 f808 	bl	8005cf8 <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d1dd      	bne.n	8005ca8 <_malloc_r+0x64>
 8005cec:	e7cf      	b.n	8005c8e <_malloc_r+0x4a>
 8005cee:	bf00      	nop
 8005cf0:	200060a0 	.word	0x200060a0
 8005cf4:	200060a4 	.word	0x200060a4

08005cf8 <_sbrk_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	; (8005d14 <_sbrk_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fb f904 	bl	8000f10 <_sbrk>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_sbrk_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_sbrk_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	200061b0 	.word	0x200061b0

08005d18 <_raise_r>:
 8005d18:	291f      	cmp	r1, #31
 8005d1a:	b538      	push	{r3, r4, r5, lr}
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	d904      	bls.n	8005d2c <_raise_r+0x14>
 8005d22:	2316      	movs	r3, #22
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d2e:	b112      	cbz	r2, 8005d36 <_raise_r+0x1e>
 8005d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d34:	b94b      	cbnz	r3, 8005d4a <_raise_r+0x32>
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 f830 	bl	8005d9c <_getpid_r>
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4601      	mov	r1, r0
 8005d40:	4620      	mov	r0, r4
 8005d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d46:	f000 b817 	b.w	8005d78 <_kill_r>
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d00a      	beq.n	8005d64 <_raise_r+0x4c>
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	d103      	bne.n	8005d5a <_raise_r+0x42>
 8005d52:	2316      	movs	r3, #22
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	2001      	movs	r0, #1
 8005d58:	e7e7      	b.n	8005d2a <_raise_r+0x12>
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d60:	4628      	mov	r0, r5
 8005d62:	4798      	blx	r3
 8005d64:	2000      	movs	r0, #0
 8005d66:	e7e0      	b.n	8005d2a <_raise_r+0x12>

08005d68 <raise>:
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <raise+0xc>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f7ff bfd3 	b.w	8005d18 <_raise_r>
 8005d72:	bf00      	nop
 8005d74:	2000000c 	.word	0x2000000c

08005d78 <_kill_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d07      	ldr	r5, [pc, #28]	; (8005d98 <_kill_r+0x20>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	f7fb f83b 	bl	8000e00 <_kill>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	d102      	bne.n	8005d94 <_kill_r+0x1c>
 8005d8e:	682b      	ldr	r3, [r5, #0]
 8005d90:	b103      	cbz	r3, 8005d94 <_kill_r+0x1c>
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	200061b0 	.word	0x200061b0

08005d9c <_getpid_r>:
 8005d9c:	f7fb b828 	b.w	8000df0 <_getpid>

08005da0 <__sread>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
 8005da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da8:	f000 f8a0 	bl	8005eec <_read_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	bfab      	itete	ge
 8005db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db2:	89a3      	ldrhlt	r3, [r4, #12]
 8005db4:	181b      	addge	r3, r3, r0
 8005db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dba:	bfac      	ite	ge
 8005dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dbe:	81a3      	strhlt	r3, [r4, #12]
 8005dc0:	bd10      	pop	{r4, pc}

08005dc2 <__swrite>:
 8005dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	461f      	mov	r7, r3
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	05db      	lsls	r3, r3, #23
 8005dcc:	4605      	mov	r5, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	d505      	bpl.n	8005de0 <__swrite+0x1e>
 8005dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd8:	2302      	movs	r3, #2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f000 f868 	bl	8005eb0 <_lseek_r>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	4632      	mov	r2, r6
 8005dee:	463b      	mov	r3, r7
 8005df0:	4628      	mov	r0, r5
 8005df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005df6:	f000 b817 	b.w	8005e28 <_write_r>

08005dfa <__sseek>:
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e02:	f000 f855 	bl	8005eb0 <_lseek_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	bf15      	itete	ne
 8005e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e16:	81a3      	strheq	r3, [r4, #12]
 8005e18:	bf18      	it	ne
 8005e1a:	81a3      	strhne	r3, [r4, #12]
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <__sclose>:
 8005e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e22:	f000 b813 	b.w	8005e4c <_close_r>
	...

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	; (8005e48 <_write_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fb f819 	bl	8000e6e <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	200061b0 	.word	0x200061b0

08005e4c <_close_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4d06      	ldr	r5, [pc, #24]	; (8005e68 <_close_r+0x1c>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	4604      	mov	r4, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	602b      	str	r3, [r5, #0]
 8005e58:	f7fb f825 	bl	8000ea6 <_close>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_close_r+0x1a>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_close_r+0x1a>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	200061b0 	.word	0x200061b0

08005e6c <_fstat_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	; (8005e8c <_fstat_r+0x20>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f7fb f820 	bl	8000ebe <_fstat>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_fstat_r+0x1c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_fstat_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200061b0 	.word	0x200061b0

08005e90 <_isatty_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_isatty_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb f81f 	bl	8000ede <_isatty>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_isatty_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_isatty_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	200061b0 	.word	0x200061b0

08005eb0 <_lseek_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	; (8005ed0 <_lseek_r+0x20>)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb f818 	bl	8000ef4 <_lseek>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_lseek_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_lseek_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	200061b0 	.word	0x200061b0

08005ed4 <__malloc_lock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__malloc_lock+0x8>)
 8005ed6:	f7ff bdff 	b.w	8005ad8 <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	200061a8 	.word	0x200061a8

08005ee0 <__malloc_unlock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__malloc_unlock+0x8>)
 8005ee2:	f7ff bdfa 	b.w	8005ada <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200061a8 	.word	0x200061a8

08005eec <_read_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4d07      	ldr	r5, [pc, #28]	; (8005f0c <_read_r+0x20>)
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7fa ff9a 	bl	8000e34 <_read>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_read_r+0x1e>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_read_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200061b0 	.word	0x200061b0

08005f10 <floor>:
 8005f10:	ec51 0b10 	vmov	r0, r1, d0
 8005f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f20:	2e13      	cmp	r6, #19
 8005f22:	ee10 5a10 	vmov	r5, s0
 8005f26:	ee10 8a10 	vmov	r8, s0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	dc32      	bgt.n	8005f94 <floor+0x84>
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	da14      	bge.n	8005f5c <floor+0x4c>
 8005f32:	a333      	add	r3, pc, #204	; (adr r3, 8006000 <floor+0xf0>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa f9a0 	bl	800027c <__adddf3>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f7fa fbd0 	bl	80006e4 <__aeabi_dcmpgt>
 8005f44:	b138      	cbz	r0, 8005f56 <floor+0x46>
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	da57      	bge.n	8005ffa <floor+0xea>
 8005f4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f4e:	431d      	orrs	r5, r3
 8005f50:	d001      	beq.n	8005f56 <floor+0x46>
 8005f52:	4c2d      	ldr	r4, [pc, #180]	; (8006008 <floor+0xf8>)
 8005f54:	2500      	movs	r5, #0
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	e025      	b.n	8005fa8 <floor+0x98>
 8005f5c:	4f2b      	ldr	r7, [pc, #172]	; (800600c <floor+0xfc>)
 8005f5e:	4137      	asrs	r7, r6
 8005f60:	ea01 0307 	and.w	r3, r1, r7
 8005f64:	4303      	orrs	r3, r0
 8005f66:	d01f      	beq.n	8005fa8 <floor+0x98>
 8005f68:	a325      	add	r3, pc, #148	; (adr r3, 8006000 <floor+0xf0>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa f985 	bl	800027c <__adddf3>
 8005f72:	2200      	movs	r2, #0
 8005f74:	2300      	movs	r3, #0
 8005f76:	f7fa fbb5 	bl	80006e4 <__aeabi_dcmpgt>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0eb      	beq.n	8005f56 <floor+0x46>
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	bfbe      	ittt	lt
 8005f82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f86:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f8a:	19a4      	addlt	r4, r4, r6
 8005f8c:	ea24 0407 	bic.w	r4, r4, r7
 8005f90:	2500      	movs	r5, #0
 8005f92:	e7e0      	b.n	8005f56 <floor+0x46>
 8005f94:	2e33      	cmp	r6, #51	; 0x33
 8005f96:	dd0b      	ble.n	8005fb0 <floor+0xa0>
 8005f98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f9c:	d104      	bne.n	8005fa8 <floor+0x98>
 8005f9e:	ee10 2a10 	vmov	r2, s0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	f7fa f96a 	bl	800027c <__adddf3>
 8005fa8:	ec41 0b10 	vmov	d0, r0, r1
 8005fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb8:	fa23 f707 	lsr.w	r7, r3, r7
 8005fbc:	4207      	tst	r7, r0
 8005fbe:	d0f3      	beq.n	8005fa8 <floor+0x98>
 8005fc0:	a30f      	add	r3, pc, #60	; (adr r3, 8006000 <floor+0xf0>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa f959 	bl	800027c <__adddf3>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f7fa fb89 	bl	80006e4 <__aeabi_dcmpgt>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d0bf      	beq.n	8005f56 <floor+0x46>
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	da02      	bge.n	8005fe0 <floor+0xd0>
 8005fda:	2e14      	cmp	r6, #20
 8005fdc:	d103      	bne.n	8005fe6 <floor+0xd6>
 8005fde:	3401      	adds	r4, #1
 8005fe0:	ea25 0507 	bic.w	r5, r5, r7
 8005fe4:	e7b7      	b.n	8005f56 <floor+0x46>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005fec:	fa03 f606 	lsl.w	r6, r3, r6
 8005ff0:	4435      	add	r5, r6
 8005ff2:	4545      	cmp	r5, r8
 8005ff4:	bf38      	it	cc
 8005ff6:	18e4      	addcc	r4, r4, r3
 8005ff8:	e7f2      	b.n	8005fe0 <floor+0xd0>
 8005ffa:	2500      	movs	r5, #0
 8005ffc:	462c      	mov	r4, r5
 8005ffe:	e7aa      	b.n	8005f56 <floor+0x46>
 8006000:	8800759c 	.word	0x8800759c
 8006004:	7e37e43c 	.word	0x7e37e43c
 8006008:	bff00000 	.word	0xbff00000
 800600c:	000fffff 	.word	0x000fffff

08006010 <_init>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr

0800601c <_fini>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr
